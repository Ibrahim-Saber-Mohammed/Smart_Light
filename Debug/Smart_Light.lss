
Smart_Light.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004880  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000010c  00800060  00004880  00004914  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  0080016c  0080016c  00004a20  2**0
                  ALLOC
  3 .stab         00003cb4  00000000  00000000  00004a20  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00001ab0  00000000  00000000  000086d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001e0  00000000  00000000  0000a184  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000232  00000000  00000000  0000a364  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002ca8  00000000  00000000  0000a596  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000015f5  00000000  00000000  0000d23e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00001485  00000000  00000000  0000e833  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000200  00000000  00000000  0000fcb8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000038f  00000000  00000000  0000feb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000018da  00000000  00000000  00010247  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000068  00000000  00000000  00011b21  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e0 e8       	ldi	r30, 0x80	; 128
      68:	f8 e4       	ldi	r31, 0x48	; 72
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 36       	cpi	r26, 0x6C	; 108
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ac e6       	ldi	r26, 0x6C	; 108
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a0 37       	cpi	r26, 0x70	; 112
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 05 1e 	call	0x3c0a	; 0x3c0a <main>
      8a:	0c 94 3e 24 	jmp	0x487c	; 0x487c <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__ashldi3>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	df 93       	push	r29
      9a:	cf 93       	push	r28
      9c:	cd b7       	in	r28, 0x3d	; 61
      9e:	de b7       	in	r29, 0x3e	; 62
      a0:	60 97       	sbiw	r28, 0x10	; 16
      a2:	0f b6       	in	r0, 0x3f	; 63
      a4:	f8 94       	cli
      a6:	de bf       	out	0x3e, r29	; 62
      a8:	0f be       	out	0x3f, r0	; 63
      aa:	cd bf       	out	0x3d, r28	; 61
      ac:	a8 2f       	mov	r26, r24
      ae:	00 23       	and	r16, r16
      b0:	09 f4       	brne	.+2      	; 0xb4 <__ashldi3+0x22>
      b2:	61 c0       	rjmp	.+194    	; 0x176 <__ashldi3+0xe4>
      b4:	7e 01       	movw	r14, r28
      b6:	08 94       	sec
      b8:	e1 1c       	adc	r14, r1
      ba:	f1 1c       	adc	r15, r1
      bc:	88 e0       	ldi	r24, 0x08	; 8
      be:	f7 01       	movw	r30, r14
      c0:	11 92       	st	Z+, r1
      c2:	8a 95       	dec	r24
      c4:	e9 f7       	brne	.-6      	; 0xc0 <__ashldi3+0x2e>
      c6:	29 83       	std	Y+1, r18	; 0x01
      c8:	3a 83       	std	Y+2, r19	; 0x02
      ca:	4b 83       	std	Y+3, r20	; 0x03
      cc:	5c 83       	std	Y+4, r21	; 0x04
      ce:	6d 83       	std	Y+5, r22	; 0x05
      d0:	7e 83       	std	Y+6, r23	; 0x06
      d2:	af 83       	std	Y+7, r26	; 0x07
      d4:	98 87       	std	Y+8, r25	; 0x08
      d6:	80 e2       	ldi	r24, 0x20	; 32
      d8:	80 1b       	sub	r24, r16
      da:	e8 2f       	mov	r30, r24
      dc:	ff 27       	eor	r31, r31
      de:	e7 fd       	sbrc	r30, 7
      e0:	f0 95       	com	r31
      e2:	49 81       	ldd	r20, Y+1	; 0x01
      e4:	5a 81       	ldd	r21, Y+2	; 0x02
      e6:	6b 81       	ldd	r22, Y+3	; 0x03
      e8:	7c 81       	ldd	r23, Y+4	; 0x04
      ea:	18 16       	cp	r1, r24
      ec:	84 f0       	brlt	.+32     	; 0x10e <__ashldi3+0x7c>
      ee:	19 86       	std	Y+9, r1	; 0x09
      f0:	1a 86       	std	Y+10, r1	; 0x0a
      f2:	1b 86       	std	Y+11, r1	; 0x0b
      f4:	1c 86       	std	Y+12, r1	; 0x0c
      f6:	88 27       	eor	r24, r24
      f8:	99 27       	eor	r25, r25
      fa:	8e 1b       	sub	r24, r30
      fc:	9f 0b       	sbc	r25, r31
      fe:	04 c0       	rjmp	.+8      	; 0x108 <__ashldi3+0x76>
     100:	44 0f       	add	r20, r20
     102:	55 1f       	adc	r21, r21
     104:	66 1f       	adc	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	8a 95       	dec	r24
     10a:	d2 f7       	brpl	.-12     	; 0x100 <__ashldi3+0x6e>
     10c:	28 c0       	rjmp	.+80     	; 0x15e <__ashldi3+0xcc>
     10e:	20 2f       	mov	r18, r16
     110:	33 27       	eor	r19, r19
     112:	27 fd       	sbrc	r18, 7
     114:	30 95       	com	r19
     116:	db 01       	movw	r26, r22
     118:	ca 01       	movw	r24, r20
     11a:	02 2e       	mov	r0, r18
     11c:	04 c0       	rjmp	.+8      	; 0x126 <__ashldi3+0x94>
     11e:	88 0f       	add	r24, r24
     120:	99 1f       	adc	r25, r25
     122:	aa 1f       	adc	r26, r26
     124:	bb 1f       	adc	r27, r27
     126:	0a 94       	dec	r0
     128:	d2 f7       	brpl	.-12     	; 0x11e <__ashldi3+0x8c>
     12a:	89 87       	std	Y+9, r24	; 0x09
     12c:	9a 87       	std	Y+10, r25	; 0x0a
     12e:	ab 87       	std	Y+11, r26	; 0x0b
     130:	bc 87       	std	Y+12, r27	; 0x0c
     132:	04 c0       	rjmp	.+8      	; 0x13c <__ashldi3+0xaa>
     134:	76 95       	lsr	r23
     136:	67 95       	ror	r22
     138:	57 95       	ror	r21
     13a:	47 95       	ror	r20
     13c:	ea 95       	dec	r30
     13e:	d2 f7       	brpl	.-12     	; 0x134 <__ashldi3+0xa2>
     140:	8d 81       	ldd	r24, Y+5	; 0x05
     142:	9e 81       	ldd	r25, Y+6	; 0x06
     144:	af 81       	ldd	r26, Y+7	; 0x07
     146:	b8 85       	ldd	r27, Y+8	; 0x08
     148:	04 c0       	rjmp	.+8      	; 0x152 <__ashldi3+0xc0>
     14a:	88 0f       	add	r24, r24
     14c:	99 1f       	adc	r25, r25
     14e:	aa 1f       	adc	r26, r26
     150:	bb 1f       	adc	r27, r27
     152:	2a 95       	dec	r18
     154:	d2 f7       	brpl	.-12     	; 0x14a <__ashldi3+0xb8>
     156:	48 2b       	or	r20, r24
     158:	59 2b       	or	r21, r25
     15a:	6a 2b       	or	r22, r26
     15c:	7b 2b       	or	r23, r27
     15e:	4d 87       	std	Y+13, r20	; 0x0d
     160:	5e 87       	std	Y+14, r21	; 0x0e
     162:	6f 87       	std	Y+15, r22	; 0x0f
     164:	78 8b       	std	Y+16, r23	; 0x10
     166:	29 85       	ldd	r18, Y+9	; 0x09
     168:	3a 85       	ldd	r19, Y+10	; 0x0a
     16a:	4b 85       	ldd	r20, Y+11	; 0x0b
     16c:	5c 85       	ldd	r21, Y+12	; 0x0c
     16e:	6d 85       	ldd	r22, Y+13	; 0x0d
     170:	7e 85       	ldd	r23, Y+14	; 0x0e
     172:	af 85       	ldd	r26, Y+15	; 0x0f
     174:	98 89       	ldd	r25, Y+16	; 0x10
     176:	8a 2f       	mov	r24, r26
     178:	60 96       	adiw	r28, 0x10	; 16
     17a:	0f b6       	in	r0, 0x3f	; 63
     17c:	f8 94       	cli
     17e:	de bf       	out	0x3e, r29	; 62
     180:	0f be       	out	0x3f, r0	; 63
     182:	cd bf       	out	0x3d, r28	; 61
     184:	cf 91       	pop	r28
     186:	df 91       	pop	r29
     188:	0f 91       	pop	r16
     18a:	ff 90       	pop	r15
     18c:	ef 90       	pop	r14
     18e:	08 95       	ret

00000190 <__fixunssfsi>:
     190:	ef 92       	push	r14
     192:	ff 92       	push	r15
     194:	0f 93       	push	r16
     196:	1f 93       	push	r17
     198:	7b 01       	movw	r14, r22
     19a:	8c 01       	movw	r16, r24
     19c:	20 e0       	ldi	r18, 0x00	; 0
     19e:	30 e0       	ldi	r19, 0x00	; 0
     1a0:	40 e0       	ldi	r20, 0x00	; 0
     1a2:	5f e4       	ldi	r21, 0x4F	; 79
     1a4:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <__gesf2>
     1a8:	88 23       	and	r24, r24
     1aa:	8c f0       	brlt	.+34     	; 0x1ce <__fixunssfsi+0x3e>
     1ac:	c8 01       	movw	r24, r16
     1ae:	b7 01       	movw	r22, r14
     1b0:	20 e0       	ldi	r18, 0x00	; 0
     1b2:	30 e0       	ldi	r19, 0x00	; 0
     1b4:	40 e0       	ldi	r20, 0x00	; 0
     1b6:	5f e4       	ldi	r21, 0x4F	; 79
     1b8:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
     1bc:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     1c0:	9b 01       	movw	r18, r22
     1c2:	ac 01       	movw	r20, r24
     1c4:	20 50       	subi	r18, 0x00	; 0
     1c6:	30 40       	sbci	r19, 0x00	; 0
     1c8:	40 40       	sbci	r20, 0x00	; 0
     1ca:	50 48       	sbci	r21, 0x80	; 128
     1cc:	06 c0       	rjmp	.+12     	; 0x1da <__fixunssfsi+0x4a>
     1ce:	c8 01       	movw	r24, r16
     1d0:	b7 01       	movw	r22, r14
     1d2:	0e 94 49 0b 	call	0x1692	; 0x1692 <__fixsfsi>
     1d6:	9b 01       	movw	r18, r22
     1d8:	ac 01       	movw	r20, r24
     1da:	b9 01       	movw	r22, r18
     1dc:	ca 01       	movw	r24, r20
     1de:	1f 91       	pop	r17
     1e0:	0f 91       	pop	r16
     1e2:	ff 90       	pop	r15
     1e4:	ef 90       	pop	r14
     1e6:	08 95       	ret

000001e8 <__udivdi3>:
     1e8:	ae e5       	ldi	r26, 0x5E	; 94
     1ea:	b0 e0       	ldi	r27, 0x00	; 0
     1ec:	ea ef       	ldi	r30, 0xFA	; 250
     1ee:	f0 e0       	ldi	r31, 0x00	; 0
     1f0:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
     1f4:	a8 e0       	ldi	r26, 0x08	; 8
     1f6:	4e 01       	movw	r8, r28
     1f8:	08 94       	sec
     1fa:	81 1c       	adc	r8, r1
     1fc:	91 1c       	adc	r9, r1
     1fe:	f4 01       	movw	r30, r8
     200:	6a 2e       	mov	r6, r26
     202:	11 92       	st	Z+, r1
     204:	6a 94       	dec	r6
     206:	e9 f7       	brne	.-6      	; 0x202 <__udivdi3+0x1a>
     208:	29 83       	std	Y+1, r18	; 0x01
     20a:	3a 83       	std	Y+2, r19	; 0x02
     20c:	4b 83       	std	Y+3, r20	; 0x03
     20e:	5c 83       	std	Y+4, r21	; 0x04
     210:	6d 83       	std	Y+5, r22	; 0x05
     212:	7e 83       	std	Y+6, r23	; 0x06
     214:	8f 83       	std	Y+7, r24	; 0x07
     216:	98 87       	std	Y+8, r25	; 0x08
     218:	ce 01       	movw	r24, r28
     21a:	09 96       	adiw	r24, 0x09	; 9
     21c:	fc 01       	movw	r30, r24
     21e:	11 92       	st	Z+, r1
     220:	aa 95       	dec	r26
     222:	e9 f7       	brne	.-6      	; 0x21e <__udivdi3+0x36>
     224:	a9 86       	std	Y+9, r10	; 0x09
     226:	ba 86       	std	Y+10, r11	; 0x0a
     228:	cb 86       	std	Y+11, r12	; 0x0b
     22a:	dc 86       	std	Y+12, r13	; 0x0c
     22c:	ed 86       	std	Y+13, r14	; 0x0d
     22e:	fe 86       	std	Y+14, r15	; 0x0e
     230:	0f 87       	std	Y+15, r16	; 0x0f
     232:	18 8b       	std	Y+16, r17	; 0x10
     234:	29 84       	ldd	r2, Y+9	; 0x09
     236:	3a 84       	ldd	r3, Y+10	; 0x0a
     238:	4b 84       	ldd	r4, Y+11	; 0x0b
     23a:	5c 84       	ldd	r5, Y+12	; 0x0c
     23c:	ed 84       	ldd	r14, Y+13	; 0x0d
     23e:	fe 84       	ldd	r15, Y+14	; 0x0e
     240:	0f 85       	ldd	r16, Y+15	; 0x0f
     242:	18 89       	ldd	r17, Y+16	; 0x10
     244:	69 80       	ldd	r6, Y+1	; 0x01
     246:	7a 80       	ldd	r7, Y+2	; 0x02
     248:	8b 80       	ldd	r8, Y+3	; 0x03
     24a:	9c 80       	ldd	r9, Y+4	; 0x04
     24c:	6d a6       	std	Y+45, r6	; 0x2d
     24e:	7e a6       	std	Y+46, r7	; 0x2e
     250:	8f a6       	std	Y+47, r8	; 0x2f
     252:	98 aa       	std	Y+48, r9	; 0x30
     254:	6d 80       	ldd	r6, Y+5	; 0x05
     256:	7e 80       	ldd	r7, Y+6	; 0x06
     258:	8f 80       	ldd	r8, Y+7	; 0x07
     25a:	98 84       	ldd	r9, Y+8	; 0x08
     25c:	e1 14       	cp	r14, r1
     25e:	f1 04       	cpc	r15, r1
     260:	01 05       	cpc	r16, r1
     262:	11 05       	cpc	r17, r1
     264:	09 f0       	breq	.+2      	; 0x268 <__udivdi3+0x80>
     266:	b3 c3       	rjmp	.+1894   	; 0x9ce <__stack+0x16f>
     268:	62 14       	cp	r6, r2
     26a:	73 04       	cpc	r7, r3
     26c:	84 04       	cpc	r8, r4
     26e:	95 04       	cpc	r9, r5
     270:	08 f0       	brcs	.+2      	; 0x274 <__udivdi3+0x8c>
     272:	3d c1       	rjmp	.+634    	; 0x4ee <__udivdi3+0x306>
     274:	00 e0       	ldi	r16, 0x00	; 0
     276:	20 16       	cp	r2, r16
     278:	00 e0       	ldi	r16, 0x00	; 0
     27a:	30 06       	cpc	r3, r16
     27c:	01 e0       	ldi	r16, 0x01	; 1
     27e:	40 06       	cpc	r4, r16
     280:	00 e0       	ldi	r16, 0x00	; 0
     282:	50 06       	cpc	r5, r16
     284:	88 f4       	brcc	.+34     	; 0x2a8 <__udivdi3+0xc0>
     286:	1f ef       	ldi	r17, 0xFF	; 255
     288:	21 16       	cp	r2, r17
     28a:	31 04       	cpc	r3, r1
     28c:	41 04       	cpc	r4, r1
     28e:	51 04       	cpc	r5, r1
     290:	39 f0       	breq	.+14     	; 0x2a0 <__udivdi3+0xb8>
     292:	30 f0       	brcs	.+12     	; 0x2a0 <__udivdi3+0xb8>
     294:	48 e0       	ldi	r20, 0x08	; 8
     296:	e4 2e       	mov	r14, r20
     298:	f1 2c       	mov	r15, r1
     29a:	01 2d       	mov	r16, r1
     29c:	11 2d       	mov	r17, r1
     29e:	18 c0       	rjmp	.+48     	; 0x2d0 <__udivdi3+0xe8>
     2a0:	ee 24       	eor	r14, r14
     2a2:	ff 24       	eor	r15, r15
     2a4:	87 01       	movw	r16, r14
     2a6:	14 c0       	rjmp	.+40     	; 0x2d0 <__udivdi3+0xe8>
     2a8:	20 e0       	ldi	r18, 0x00	; 0
     2aa:	22 16       	cp	r2, r18
     2ac:	20 e0       	ldi	r18, 0x00	; 0
     2ae:	32 06       	cpc	r3, r18
     2b0:	20 e0       	ldi	r18, 0x00	; 0
     2b2:	42 06       	cpc	r4, r18
     2b4:	21 e0       	ldi	r18, 0x01	; 1
     2b6:	52 06       	cpc	r5, r18
     2b8:	30 f0       	brcs	.+12     	; 0x2c6 <__udivdi3+0xde>
     2ba:	38 e1       	ldi	r19, 0x18	; 24
     2bc:	e3 2e       	mov	r14, r19
     2be:	f1 2c       	mov	r15, r1
     2c0:	01 2d       	mov	r16, r1
     2c2:	11 2d       	mov	r17, r1
     2c4:	05 c0       	rjmp	.+10     	; 0x2d0 <__udivdi3+0xe8>
     2c6:	20 e1       	ldi	r18, 0x10	; 16
     2c8:	e2 2e       	mov	r14, r18
     2ca:	f1 2c       	mov	r15, r1
     2cc:	01 2d       	mov	r16, r1
     2ce:	11 2d       	mov	r17, r1
     2d0:	d2 01       	movw	r26, r4
     2d2:	c1 01       	movw	r24, r2
     2d4:	0e 2c       	mov	r0, r14
     2d6:	04 c0       	rjmp	.+8      	; 0x2e0 <__udivdi3+0xf8>
     2d8:	b6 95       	lsr	r27
     2da:	a7 95       	ror	r26
     2dc:	97 95       	ror	r25
     2de:	87 95       	ror	r24
     2e0:	0a 94       	dec	r0
     2e2:	d2 f7       	brpl	.-12     	; 0x2d8 <__udivdi3+0xf0>
     2e4:	88 59       	subi	r24, 0x98	; 152
     2e6:	9f 4f       	sbci	r25, 0xFF	; 255
     2e8:	dc 01       	movw	r26, r24
     2ea:	2c 91       	ld	r18, X
     2ec:	80 e2       	ldi	r24, 0x20	; 32
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	a0 e0       	ldi	r26, 0x00	; 0
     2f2:	b0 e0       	ldi	r27, 0x00	; 0
     2f4:	8e 19       	sub	r24, r14
     2f6:	9f 09       	sbc	r25, r15
     2f8:	a0 0b       	sbc	r26, r16
     2fa:	b1 0b       	sbc	r27, r17
     2fc:	7c 01       	movw	r14, r24
     2fe:	8d 01       	movw	r16, r26
     300:	e2 1a       	sub	r14, r18
     302:	f1 08       	sbc	r15, r1
     304:	01 09       	sbc	r16, r1
     306:	11 09       	sbc	r17, r1
     308:	e1 14       	cp	r14, r1
     30a:	f1 04       	cpc	r15, r1
     30c:	01 05       	cpc	r16, r1
     30e:	11 05       	cpc	r17, r1
     310:	a1 f1       	breq	.+104    	; 0x37a <__udivdi3+0x192>
     312:	0e 2c       	mov	r0, r14
     314:	04 c0       	rjmp	.+8      	; 0x31e <__udivdi3+0x136>
     316:	22 0c       	add	r2, r2
     318:	33 1c       	adc	r3, r3
     31a:	44 1c       	adc	r4, r4
     31c:	55 1c       	adc	r5, r5
     31e:	0a 94       	dec	r0
     320:	d2 f7       	brpl	.-12     	; 0x316 <__udivdi3+0x12e>
     322:	a4 01       	movw	r20, r8
     324:	93 01       	movw	r18, r6
     326:	0e 2c       	mov	r0, r14
     328:	04 c0       	rjmp	.+8      	; 0x332 <__udivdi3+0x14a>
     32a:	22 0f       	add	r18, r18
     32c:	33 1f       	adc	r19, r19
     32e:	44 1f       	adc	r20, r20
     330:	55 1f       	adc	r21, r21
     332:	0a 94       	dec	r0
     334:	d2 f7       	brpl	.-12     	; 0x32a <__udivdi3+0x142>
     336:	80 e2       	ldi	r24, 0x20	; 32
     338:	90 e0       	ldi	r25, 0x00	; 0
     33a:	8e 19       	sub	r24, r14
     33c:	9f 09       	sbc	r25, r15
     33e:	6d a4       	ldd	r6, Y+45	; 0x2d
     340:	7e a4       	ldd	r7, Y+46	; 0x2e
     342:	8f a4       	ldd	r8, Y+47	; 0x2f
     344:	98 a8       	ldd	r9, Y+48	; 0x30
     346:	04 c0       	rjmp	.+8      	; 0x350 <__udivdi3+0x168>
     348:	96 94       	lsr	r9
     34a:	87 94       	ror	r8
     34c:	77 94       	ror	r7
     34e:	67 94       	ror	r6
     350:	8a 95       	dec	r24
     352:	d2 f7       	brpl	.-12     	; 0x348 <__udivdi3+0x160>
     354:	62 2a       	or	r6, r18
     356:	73 2a       	or	r7, r19
     358:	84 2a       	or	r8, r20
     35a:	95 2a       	or	r9, r21
     35c:	ad a4       	ldd	r10, Y+45	; 0x2d
     35e:	be a4       	ldd	r11, Y+46	; 0x2e
     360:	cf a4       	ldd	r12, Y+47	; 0x2f
     362:	d8 a8       	ldd	r13, Y+48	; 0x30
     364:	04 c0       	rjmp	.+8      	; 0x36e <__udivdi3+0x186>
     366:	aa 0c       	add	r10, r10
     368:	bb 1c       	adc	r11, r11
     36a:	cc 1c       	adc	r12, r12
     36c:	dd 1c       	adc	r13, r13
     36e:	ea 94       	dec	r14
     370:	d2 f7       	brpl	.-12     	; 0x366 <__udivdi3+0x17e>
     372:	ad a6       	std	Y+45, r10	; 0x2d
     374:	be a6       	std	Y+46, r11	; 0x2e
     376:	cf a6       	std	Y+47, r12	; 0x2f
     378:	d8 aa       	std	Y+48, r13	; 0x30
     37a:	62 01       	movw	r12, r4
     37c:	ee 24       	eor	r14, r14
     37e:	ff 24       	eor	r15, r15
     380:	cd aa       	std	Y+53, r12	; 0x35
     382:	de aa       	std	Y+54, r13	; 0x36
     384:	ef aa       	std	Y+55, r14	; 0x37
     386:	f8 ae       	std	Y+56, r15	; 0x38
     388:	92 01       	movw	r18, r4
     38a:	81 01       	movw	r16, r2
     38c:	20 70       	andi	r18, 0x00	; 0
     38e:	30 70       	andi	r19, 0x00	; 0
     390:	09 af       	std	Y+57, r16	; 0x39
     392:	1a af       	std	Y+58, r17	; 0x3a
     394:	2b af       	std	Y+59, r18	; 0x3b
     396:	3c af       	std	Y+60, r19	; 0x3c
     398:	c4 01       	movw	r24, r8
     39a:	b3 01       	movw	r22, r6
     39c:	a7 01       	movw	r20, r14
     39e:	96 01       	movw	r18, r12
     3a0:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     3a4:	7b 01       	movw	r14, r22
     3a6:	8c 01       	movw	r16, r24
     3a8:	c4 01       	movw	r24, r8
     3aa:	b3 01       	movw	r22, r6
     3ac:	2d a9       	ldd	r18, Y+53	; 0x35
     3ae:	3e a9       	ldd	r19, Y+54	; 0x36
     3b0:	4f a9       	ldd	r20, Y+55	; 0x37
     3b2:	58 ad       	ldd	r21, Y+56	; 0x38
     3b4:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     3b8:	c9 01       	movw	r24, r18
     3ba:	da 01       	movw	r26, r20
     3bc:	3c 01       	movw	r6, r24
     3be:	4d 01       	movw	r8, r26
     3c0:	c4 01       	movw	r24, r8
     3c2:	b3 01       	movw	r22, r6
     3c4:	29 ad       	ldd	r18, Y+57	; 0x39
     3c6:	3a ad       	ldd	r19, Y+58	; 0x3a
     3c8:	4b ad       	ldd	r20, Y+59	; 0x3b
     3ca:	5c ad       	ldd	r21, Y+60	; 0x3c
     3cc:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     3d0:	9b 01       	movw	r18, r22
     3d2:	ac 01       	movw	r20, r24
     3d4:	87 01       	movw	r16, r14
     3d6:	ff 24       	eor	r15, r15
     3d8:	ee 24       	eor	r14, r14
     3da:	ad a4       	ldd	r10, Y+45	; 0x2d
     3dc:	be a4       	ldd	r11, Y+46	; 0x2e
     3de:	cf a4       	ldd	r12, Y+47	; 0x2f
     3e0:	d8 a8       	ldd	r13, Y+48	; 0x30
     3e2:	c6 01       	movw	r24, r12
     3e4:	aa 27       	eor	r26, r26
     3e6:	bb 27       	eor	r27, r27
     3e8:	57 01       	movw	r10, r14
     3ea:	68 01       	movw	r12, r16
     3ec:	a8 2a       	or	r10, r24
     3ee:	b9 2a       	or	r11, r25
     3f0:	ca 2a       	or	r12, r26
     3f2:	db 2a       	or	r13, r27
     3f4:	a2 16       	cp	r10, r18
     3f6:	b3 06       	cpc	r11, r19
     3f8:	c4 06       	cpc	r12, r20
     3fa:	d5 06       	cpc	r13, r21
     3fc:	e0 f4       	brcc	.+56     	; 0x436 <__udivdi3+0x24e>
     3fe:	08 94       	sec
     400:	61 08       	sbc	r6, r1
     402:	71 08       	sbc	r7, r1
     404:	81 08       	sbc	r8, r1
     406:	91 08       	sbc	r9, r1
     408:	a2 0c       	add	r10, r2
     40a:	b3 1c       	adc	r11, r3
     40c:	c4 1c       	adc	r12, r4
     40e:	d5 1c       	adc	r13, r5
     410:	a2 14       	cp	r10, r2
     412:	b3 04       	cpc	r11, r3
     414:	c4 04       	cpc	r12, r4
     416:	d5 04       	cpc	r13, r5
     418:	70 f0       	brcs	.+28     	; 0x436 <__udivdi3+0x24e>
     41a:	a2 16       	cp	r10, r18
     41c:	b3 06       	cpc	r11, r19
     41e:	c4 06       	cpc	r12, r20
     420:	d5 06       	cpc	r13, r21
     422:	48 f4       	brcc	.+18     	; 0x436 <__udivdi3+0x24e>
     424:	08 94       	sec
     426:	61 08       	sbc	r6, r1
     428:	71 08       	sbc	r7, r1
     42a:	81 08       	sbc	r8, r1
     42c:	91 08       	sbc	r9, r1
     42e:	a2 0c       	add	r10, r2
     430:	b3 1c       	adc	r11, r3
     432:	c4 1c       	adc	r12, r4
     434:	d5 1c       	adc	r13, r5
     436:	a2 1a       	sub	r10, r18
     438:	b3 0a       	sbc	r11, r19
     43a:	c4 0a       	sbc	r12, r20
     43c:	d5 0a       	sbc	r13, r21
     43e:	c6 01       	movw	r24, r12
     440:	b5 01       	movw	r22, r10
     442:	2d a9       	ldd	r18, Y+53	; 0x35
     444:	3e a9       	ldd	r19, Y+54	; 0x36
     446:	4f a9       	ldd	r20, Y+55	; 0x37
     448:	58 ad       	ldd	r21, Y+56	; 0x38
     44a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     44e:	7b 01       	movw	r14, r22
     450:	8c 01       	movw	r16, r24
     452:	c6 01       	movw	r24, r12
     454:	b5 01       	movw	r22, r10
     456:	2d a9       	ldd	r18, Y+53	; 0x35
     458:	3e a9       	ldd	r19, Y+54	; 0x36
     45a:	4f a9       	ldd	r20, Y+55	; 0x37
     45c:	58 ad       	ldd	r21, Y+56	; 0x38
     45e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     462:	c9 01       	movw	r24, r18
     464:	da 01       	movw	r26, r20
     466:	5c 01       	movw	r10, r24
     468:	6d 01       	movw	r12, r26
     46a:	c6 01       	movw	r24, r12
     46c:	b5 01       	movw	r22, r10
     46e:	29 ad       	ldd	r18, Y+57	; 0x39
     470:	3a ad       	ldd	r19, Y+58	; 0x3a
     472:	4b ad       	ldd	r20, Y+59	; 0x3b
     474:	5c ad       	ldd	r21, Y+60	; 0x3c
     476:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     47a:	9b 01       	movw	r18, r22
     47c:	ac 01       	movw	r20, r24
     47e:	87 01       	movw	r16, r14
     480:	ff 24       	eor	r15, r15
     482:	ee 24       	eor	r14, r14
     484:	8d a5       	ldd	r24, Y+45	; 0x2d
     486:	9e a5       	ldd	r25, Y+46	; 0x2e
     488:	af a5       	ldd	r26, Y+47	; 0x2f
     48a:	b8 a9       	ldd	r27, Y+48	; 0x30
     48c:	a0 70       	andi	r26, 0x00	; 0
     48e:	b0 70       	andi	r27, 0x00	; 0
     490:	e8 2a       	or	r14, r24
     492:	f9 2a       	or	r15, r25
     494:	0a 2b       	or	r16, r26
     496:	1b 2b       	or	r17, r27
     498:	e2 16       	cp	r14, r18
     49a:	f3 06       	cpc	r15, r19
     49c:	04 07       	cpc	r16, r20
     49e:	15 07       	cpc	r17, r21
     4a0:	c0 f4       	brcc	.+48     	; 0x4d2 <__udivdi3+0x2ea>
     4a2:	08 94       	sec
     4a4:	a1 08       	sbc	r10, r1
     4a6:	b1 08       	sbc	r11, r1
     4a8:	c1 08       	sbc	r12, r1
     4aa:	d1 08       	sbc	r13, r1
     4ac:	e2 0c       	add	r14, r2
     4ae:	f3 1c       	adc	r15, r3
     4b0:	04 1d       	adc	r16, r4
     4b2:	15 1d       	adc	r17, r5
     4b4:	e2 14       	cp	r14, r2
     4b6:	f3 04       	cpc	r15, r3
     4b8:	04 05       	cpc	r16, r4
     4ba:	15 05       	cpc	r17, r5
     4bc:	50 f0       	brcs	.+20     	; 0x4d2 <__udivdi3+0x2ea>
     4be:	e2 16       	cp	r14, r18
     4c0:	f3 06       	cpc	r15, r19
     4c2:	04 07       	cpc	r16, r20
     4c4:	15 07       	cpc	r17, r21
     4c6:	28 f4       	brcc	.+10     	; 0x4d2 <__udivdi3+0x2ea>
     4c8:	08 94       	sec
     4ca:	a1 08       	sbc	r10, r1
     4cc:	b1 08       	sbc	r11, r1
     4ce:	c1 08       	sbc	r12, r1
     4d0:	d1 08       	sbc	r13, r1
     4d2:	d3 01       	movw	r26, r6
     4d4:	99 27       	eor	r25, r25
     4d6:	88 27       	eor	r24, r24
     4d8:	86 01       	movw	r16, r12
     4da:	75 01       	movw	r14, r10
     4dc:	e8 2a       	or	r14, r24
     4de:	f9 2a       	or	r15, r25
     4e0:	0a 2b       	or	r16, r26
     4e2:	1b 2b       	or	r17, r27
     4e4:	e9 aa       	std	Y+49, r14	; 0x31
     4e6:	fa aa       	std	Y+50, r15	; 0x32
     4e8:	0b ab       	std	Y+51, r16	; 0x33
     4ea:	1c ab       	std	Y+52, r17	; 0x34
     4ec:	cf c4       	rjmp	.+2462   	; 0xe8c <__stack+0x62d>
     4ee:	21 14       	cp	r2, r1
     4f0:	31 04       	cpc	r3, r1
     4f2:	41 04       	cpc	r4, r1
     4f4:	51 04       	cpc	r5, r1
     4f6:	71 f4       	brne	.+28     	; 0x514 <__udivdi3+0x32c>
     4f8:	61 e0       	ldi	r22, 0x01	; 1
     4fa:	70 e0       	ldi	r23, 0x00	; 0
     4fc:	80 e0       	ldi	r24, 0x00	; 0
     4fe:	90 e0       	ldi	r25, 0x00	; 0
     500:	20 e0       	ldi	r18, 0x00	; 0
     502:	30 e0       	ldi	r19, 0x00	; 0
     504:	40 e0       	ldi	r20, 0x00	; 0
     506:	50 e0       	ldi	r21, 0x00	; 0
     508:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     50c:	c9 01       	movw	r24, r18
     50e:	da 01       	movw	r26, r20
     510:	1c 01       	movw	r2, r24
     512:	2d 01       	movw	r4, r26
     514:	00 e0       	ldi	r16, 0x00	; 0
     516:	20 16       	cp	r2, r16
     518:	00 e0       	ldi	r16, 0x00	; 0
     51a:	30 06       	cpc	r3, r16
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	40 06       	cpc	r4, r16
     520:	00 e0       	ldi	r16, 0x00	; 0
     522:	50 06       	cpc	r5, r16
     524:	88 f4       	brcc	.+34     	; 0x548 <__udivdi3+0x360>
     526:	1f ef       	ldi	r17, 0xFF	; 255
     528:	21 16       	cp	r2, r17
     52a:	31 04       	cpc	r3, r1
     52c:	41 04       	cpc	r4, r1
     52e:	51 04       	cpc	r5, r1
     530:	31 f0       	breq	.+12     	; 0x53e <__udivdi3+0x356>
     532:	28 f0       	brcs	.+10     	; 0x53e <__udivdi3+0x356>
     534:	48 e0       	ldi	r20, 0x08	; 8
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	60 e0       	ldi	r22, 0x00	; 0
     53a:	70 e0       	ldi	r23, 0x00	; 0
     53c:	17 c0       	rjmp	.+46     	; 0x56c <__udivdi3+0x384>
     53e:	40 e0       	ldi	r20, 0x00	; 0
     540:	50 e0       	ldi	r21, 0x00	; 0
     542:	60 e0       	ldi	r22, 0x00	; 0
     544:	70 e0       	ldi	r23, 0x00	; 0
     546:	12 c0       	rjmp	.+36     	; 0x56c <__udivdi3+0x384>
     548:	20 e0       	ldi	r18, 0x00	; 0
     54a:	22 16       	cp	r2, r18
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	32 06       	cpc	r3, r18
     550:	20 e0       	ldi	r18, 0x00	; 0
     552:	42 06       	cpc	r4, r18
     554:	21 e0       	ldi	r18, 0x01	; 1
     556:	52 06       	cpc	r5, r18
     558:	28 f0       	brcs	.+10     	; 0x564 <__udivdi3+0x37c>
     55a:	48 e1       	ldi	r20, 0x18	; 24
     55c:	50 e0       	ldi	r21, 0x00	; 0
     55e:	60 e0       	ldi	r22, 0x00	; 0
     560:	70 e0       	ldi	r23, 0x00	; 0
     562:	04 c0       	rjmp	.+8      	; 0x56c <__udivdi3+0x384>
     564:	40 e1       	ldi	r20, 0x10	; 16
     566:	50 e0       	ldi	r21, 0x00	; 0
     568:	60 e0       	ldi	r22, 0x00	; 0
     56a:	70 e0       	ldi	r23, 0x00	; 0
     56c:	d2 01       	movw	r26, r4
     56e:	c1 01       	movw	r24, r2
     570:	04 2e       	mov	r0, r20
     572:	04 c0       	rjmp	.+8      	; 0x57c <__udivdi3+0x394>
     574:	b6 95       	lsr	r27
     576:	a7 95       	ror	r26
     578:	97 95       	ror	r25
     57a:	87 95       	ror	r24
     57c:	0a 94       	dec	r0
     57e:	d2 f7       	brpl	.-12     	; 0x574 <__udivdi3+0x38c>
     580:	88 59       	subi	r24, 0x98	; 152
     582:	9f 4f       	sbci	r25, 0xFF	; 255
     584:	dc 01       	movw	r26, r24
     586:	2c 91       	ld	r18, X
     588:	e0 e2       	ldi	r30, 0x20	; 32
     58a:	ee 2e       	mov	r14, r30
     58c:	f1 2c       	mov	r15, r1
     58e:	01 2d       	mov	r16, r1
     590:	11 2d       	mov	r17, r1
     592:	d8 01       	movw	r26, r16
     594:	c7 01       	movw	r24, r14
     596:	84 1b       	sub	r24, r20
     598:	95 0b       	sbc	r25, r21
     59a:	a6 0b       	sbc	r26, r22
     59c:	b7 0b       	sbc	r27, r23
     59e:	82 1b       	sub	r24, r18
     5a0:	91 09       	sbc	r25, r1
     5a2:	a1 09       	sbc	r26, r1
     5a4:	b1 09       	sbc	r27, r1
     5a6:	00 97       	sbiw	r24, 0x00	; 0
     5a8:	a1 05       	cpc	r26, r1
     5aa:	b1 05       	cpc	r27, r1
     5ac:	61 f4       	brne	.+24     	; 0x5c6 <__udivdi3+0x3de>
     5ae:	64 01       	movw	r12, r8
     5b0:	53 01       	movw	r10, r6
     5b2:	a2 18       	sub	r10, r2
     5b4:	b3 08       	sbc	r11, r3
     5b6:	c4 08       	sbc	r12, r4
     5b8:	d5 08       	sbc	r13, r5
     5ba:	31 e0       	ldi	r19, 0x01	; 1
     5bc:	63 2e       	mov	r6, r19
     5be:	71 2c       	mov	r7, r1
     5c0:	81 2c       	mov	r8, r1
     5c2:	91 2c       	mov	r9, r1
     5c4:	1e c1       	rjmp	.+572    	; 0x802 <__udivdi3+0x61a>
     5c6:	6f 96       	adiw	r28, 0x1f	; 31
     5c8:	8f af       	std	Y+63, r24	; 0x3f
     5ca:	6f 97       	sbiw	r28, 0x1f	; 31
     5cc:	08 2e       	mov	r0, r24
     5ce:	04 c0       	rjmp	.+8      	; 0x5d8 <__udivdi3+0x3f0>
     5d0:	22 0c       	add	r2, r2
     5d2:	33 1c       	adc	r3, r3
     5d4:	44 1c       	adc	r4, r4
     5d6:	55 1c       	adc	r5, r5
     5d8:	0a 94       	dec	r0
     5da:	d2 f7       	brpl	.-12     	; 0x5d0 <__udivdi3+0x3e8>
     5dc:	ee 2d       	mov	r30, r14
     5de:	e8 1b       	sub	r30, r24
     5e0:	64 01       	movw	r12, r8
     5e2:	53 01       	movw	r10, r6
     5e4:	0e 2e       	mov	r0, r30
     5e6:	04 c0       	rjmp	.+8      	; 0x5f0 <__udivdi3+0x408>
     5e8:	d6 94       	lsr	r13
     5ea:	c7 94       	ror	r12
     5ec:	b7 94       	ror	r11
     5ee:	a7 94       	ror	r10
     5f0:	0a 94       	dec	r0
     5f2:	d2 f7       	brpl	.-12     	; 0x5e8 <__udivdi3+0x400>
     5f4:	a4 01       	movw	r20, r8
     5f6:	93 01       	movw	r18, r6
     5f8:	6f 96       	adiw	r28, 0x1f	; 31
     5fa:	0f ac       	ldd	r0, Y+63	; 0x3f
     5fc:	6f 97       	sbiw	r28, 0x1f	; 31
     5fe:	04 c0       	rjmp	.+8      	; 0x608 <__udivdi3+0x420>
     600:	22 0f       	add	r18, r18
     602:	33 1f       	adc	r19, r19
     604:	44 1f       	adc	r20, r20
     606:	55 1f       	adc	r21, r21
     608:	0a 94       	dec	r0
     60a:	d2 f7       	brpl	.-12     	; 0x600 <__udivdi3+0x418>
     60c:	6d a4       	ldd	r6, Y+45	; 0x2d
     60e:	7e a4       	ldd	r7, Y+46	; 0x2e
     610:	8f a4       	ldd	r8, Y+47	; 0x2f
     612:	98 a8       	ldd	r9, Y+48	; 0x30
     614:	0e 2e       	mov	r0, r30
     616:	04 c0       	rjmp	.+8      	; 0x620 <__udivdi3+0x438>
     618:	96 94       	lsr	r9
     61a:	87 94       	ror	r8
     61c:	77 94       	ror	r7
     61e:	67 94       	ror	r6
     620:	0a 94       	dec	r0
     622:	d2 f7       	brpl	.-12     	; 0x618 <__udivdi3+0x430>
     624:	84 01       	movw	r16, r8
     626:	73 01       	movw	r14, r6
     628:	e2 2a       	or	r14, r18
     62a:	f3 2a       	or	r15, r19
     62c:	04 2b       	or	r16, r20
     62e:	15 2b       	or	r17, r21
     630:	e9 a6       	std	Y+41, r14	; 0x29
     632:	fa a6       	std	Y+42, r15	; 0x2a
     634:	0b a7       	std	Y+43, r16	; 0x2b
     636:	1c a7       	std	Y+44, r17	; 0x2c
     638:	32 01       	movw	r6, r4
     63a:	88 24       	eor	r8, r8
     63c:	99 24       	eor	r9, r9
     63e:	92 01       	movw	r18, r4
     640:	81 01       	movw	r16, r2
     642:	20 70       	andi	r18, 0x00	; 0
     644:	30 70       	andi	r19, 0x00	; 0
     646:	21 96       	adiw	r28, 0x01	; 1
     648:	0c af       	std	Y+60, r16	; 0x3c
     64a:	1d af       	std	Y+61, r17	; 0x3d
     64c:	2e af       	std	Y+62, r18	; 0x3e
     64e:	3f af       	std	Y+63, r19	; 0x3f
     650:	21 97       	sbiw	r28, 0x01	; 1
     652:	c6 01       	movw	r24, r12
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	93 01       	movw	r18, r6
     65a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     65e:	7b 01       	movw	r14, r22
     660:	8c 01       	movw	r16, r24
     662:	c6 01       	movw	r24, r12
     664:	b5 01       	movw	r22, r10
     666:	a4 01       	movw	r20, r8
     668:	93 01       	movw	r18, r6
     66a:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     66e:	c9 01       	movw	r24, r18
     670:	da 01       	movw	r26, r20
     672:	25 96       	adiw	r28, 0x05	; 5
     674:	8c af       	std	Y+60, r24	; 0x3c
     676:	9d af       	std	Y+61, r25	; 0x3d
     678:	ae af       	std	Y+62, r26	; 0x3e
     67a:	bf af       	std	Y+63, r27	; 0x3f
     67c:	25 97       	sbiw	r28, 0x05	; 5
     67e:	bc 01       	movw	r22, r24
     680:	cd 01       	movw	r24, r26
     682:	21 96       	adiw	r28, 0x01	; 1
     684:	2c ad       	ldd	r18, Y+60	; 0x3c
     686:	3d ad       	ldd	r19, Y+61	; 0x3d
     688:	4e ad       	ldd	r20, Y+62	; 0x3e
     68a:	5f ad       	ldd	r21, Y+63	; 0x3f
     68c:	21 97       	sbiw	r28, 0x01	; 1
     68e:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     692:	9b 01       	movw	r18, r22
     694:	ac 01       	movw	r20, r24
     696:	87 01       	movw	r16, r14
     698:	ff 24       	eor	r15, r15
     69a:	ee 24       	eor	r14, r14
     69c:	a9 a4       	ldd	r10, Y+41	; 0x29
     69e:	ba a4       	ldd	r11, Y+42	; 0x2a
     6a0:	cb a4       	ldd	r12, Y+43	; 0x2b
     6a2:	dc a4       	ldd	r13, Y+44	; 0x2c
     6a4:	c6 01       	movw	r24, r12
     6a6:	aa 27       	eor	r26, r26
     6a8:	bb 27       	eor	r27, r27
     6aa:	5c 01       	movw	r10, r24
     6ac:	6d 01       	movw	r12, r26
     6ae:	ae 28       	or	r10, r14
     6b0:	bf 28       	or	r11, r15
     6b2:	c0 2a       	or	r12, r16
     6b4:	d1 2a       	or	r13, r17
     6b6:	a2 16       	cp	r10, r18
     6b8:	b3 06       	cpc	r11, r19
     6ba:	c4 06       	cpc	r12, r20
     6bc:	d5 06       	cpc	r13, r21
     6be:	60 f5       	brcc	.+88     	; 0x718 <__udivdi3+0x530>
     6c0:	25 96       	adiw	r28, 0x05	; 5
     6c2:	6c ad       	ldd	r22, Y+60	; 0x3c
     6c4:	7d ad       	ldd	r23, Y+61	; 0x3d
     6c6:	8e ad       	ldd	r24, Y+62	; 0x3e
     6c8:	9f ad       	ldd	r25, Y+63	; 0x3f
     6ca:	25 97       	sbiw	r28, 0x05	; 5
     6cc:	61 50       	subi	r22, 0x01	; 1
     6ce:	70 40       	sbci	r23, 0x00	; 0
     6d0:	80 40       	sbci	r24, 0x00	; 0
     6d2:	90 40       	sbci	r25, 0x00	; 0
     6d4:	25 96       	adiw	r28, 0x05	; 5
     6d6:	6c af       	std	Y+60, r22	; 0x3c
     6d8:	7d af       	std	Y+61, r23	; 0x3d
     6da:	8e af       	std	Y+62, r24	; 0x3e
     6dc:	9f af       	std	Y+63, r25	; 0x3f
     6de:	25 97       	sbiw	r28, 0x05	; 5
     6e0:	a2 0c       	add	r10, r2
     6e2:	b3 1c       	adc	r11, r3
     6e4:	c4 1c       	adc	r12, r4
     6e6:	d5 1c       	adc	r13, r5
     6e8:	a2 14       	cp	r10, r2
     6ea:	b3 04       	cpc	r11, r3
     6ec:	c4 04       	cpc	r12, r4
     6ee:	d5 04       	cpc	r13, r5
     6f0:	98 f0       	brcs	.+38     	; 0x718 <__udivdi3+0x530>
     6f2:	a2 16       	cp	r10, r18
     6f4:	b3 06       	cpc	r11, r19
     6f6:	c4 06       	cpc	r12, r20
     6f8:	d5 06       	cpc	r13, r21
     6fa:	70 f4       	brcc	.+28     	; 0x718 <__udivdi3+0x530>
     6fc:	61 50       	subi	r22, 0x01	; 1
     6fe:	70 40       	sbci	r23, 0x00	; 0
     700:	80 40       	sbci	r24, 0x00	; 0
     702:	90 40       	sbci	r25, 0x00	; 0
     704:	25 96       	adiw	r28, 0x05	; 5
     706:	6c af       	std	Y+60, r22	; 0x3c
     708:	7d af       	std	Y+61, r23	; 0x3d
     70a:	8e af       	std	Y+62, r24	; 0x3e
     70c:	9f af       	std	Y+63, r25	; 0x3f
     70e:	25 97       	sbiw	r28, 0x05	; 5
     710:	a2 0c       	add	r10, r2
     712:	b3 1c       	adc	r11, r3
     714:	c4 1c       	adc	r12, r4
     716:	d5 1c       	adc	r13, r5
     718:	a2 1a       	sub	r10, r18
     71a:	b3 0a       	sbc	r11, r19
     71c:	c4 0a       	sbc	r12, r20
     71e:	d5 0a       	sbc	r13, r21
     720:	c6 01       	movw	r24, r12
     722:	b5 01       	movw	r22, r10
     724:	a4 01       	movw	r20, r8
     726:	93 01       	movw	r18, r6
     728:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     72c:	7b 01       	movw	r14, r22
     72e:	8c 01       	movw	r16, r24
     730:	c6 01       	movw	r24, r12
     732:	b5 01       	movw	r22, r10
     734:	a4 01       	movw	r20, r8
     736:	93 01       	movw	r18, r6
     738:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     73c:	c9 01       	movw	r24, r18
     73e:	da 01       	movw	r26, r20
     740:	3c 01       	movw	r6, r24
     742:	4d 01       	movw	r8, r26
     744:	c4 01       	movw	r24, r8
     746:	b3 01       	movw	r22, r6
     748:	21 96       	adiw	r28, 0x01	; 1
     74a:	2c ad       	ldd	r18, Y+60	; 0x3c
     74c:	3d ad       	ldd	r19, Y+61	; 0x3d
     74e:	4e ad       	ldd	r20, Y+62	; 0x3e
     750:	5f ad       	ldd	r21, Y+63	; 0x3f
     752:	21 97       	sbiw	r28, 0x01	; 1
     754:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     758:	9b 01       	movw	r18, r22
     75a:	ac 01       	movw	r20, r24
     75c:	87 01       	movw	r16, r14
     75e:	ff 24       	eor	r15, r15
     760:	ee 24       	eor	r14, r14
     762:	89 a5       	ldd	r24, Y+41	; 0x29
     764:	9a a5       	ldd	r25, Y+42	; 0x2a
     766:	ab a5       	ldd	r26, Y+43	; 0x2b
     768:	bc a5       	ldd	r27, Y+44	; 0x2c
     76a:	a0 70       	andi	r26, 0x00	; 0
     76c:	b0 70       	andi	r27, 0x00	; 0
     76e:	57 01       	movw	r10, r14
     770:	68 01       	movw	r12, r16
     772:	a8 2a       	or	r10, r24
     774:	b9 2a       	or	r11, r25
     776:	ca 2a       	or	r12, r26
     778:	db 2a       	or	r13, r27
     77a:	a2 16       	cp	r10, r18
     77c:	b3 06       	cpc	r11, r19
     77e:	c4 06       	cpc	r12, r20
     780:	d5 06       	cpc	r13, r21
     782:	e0 f4       	brcc	.+56     	; 0x7bc <__udivdi3+0x5d4>
     784:	08 94       	sec
     786:	61 08       	sbc	r6, r1
     788:	71 08       	sbc	r7, r1
     78a:	81 08       	sbc	r8, r1
     78c:	91 08       	sbc	r9, r1
     78e:	a2 0c       	add	r10, r2
     790:	b3 1c       	adc	r11, r3
     792:	c4 1c       	adc	r12, r4
     794:	d5 1c       	adc	r13, r5
     796:	a2 14       	cp	r10, r2
     798:	b3 04       	cpc	r11, r3
     79a:	c4 04       	cpc	r12, r4
     79c:	d5 04       	cpc	r13, r5
     79e:	70 f0       	brcs	.+28     	; 0x7bc <__udivdi3+0x5d4>
     7a0:	a2 16       	cp	r10, r18
     7a2:	b3 06       	cpc	r11, r19
     7a4:	c4 06       	cpc	r12, r20
     7a6:	d5 06       	cpc	r13, r21
     7a8:	48 f4       	brcc	.+18     	; 0x7bc <__udivdi3+0x5d4>
     7aa:	08 94       	sec
     7ac:	61 08       	sbc	r6, r1
     7ae:	71 08       	sbc	r7, r1
     7b0:	81 08       	sbc	r8, r1
     7b2:	91 08       	sbc	r9, r1
     7b4:	a2 0c       	add	r10, r2
     7b6:	b3 1c       	adc	r11, r3
     7b8:	c4 1c       	adc	r12, r4
     7ba:	d5 1c       	adc	r13, r5
     7bc:	8d a5       	ldd	r24, Y+45	; 0x2d
     7be:	9e a5       	ldd	r25, Y+46	; 0x2e
     7c0:	af a5       	ldd	r26, Y+47	; 0x2f
     7c2:	b8 a9       	ldd	r27, Y+48	; 0x30
     7c4:	6f 96       	adiw	r28, 0x1f	; 31
     7c6:	0f ac       	ldd	r0, Y+63	; 0x3f
     7c8:	6f 97       	sbiw	r28, 0x1f	; 31
     7ca:	04 c0       	rjmp	.+8      	; 0x7d4 <__udivdi3+0x5ec>
     7cc:	88 0f       	add	r24, r24
     7ce:	99 1f       	adc	r25, r25
     7d0:	aa 1f       	adc	r26, r26
     7d2:	bb 1f       	adc	r27, r27
     7d4:	0a 94       	dec	r0
     7d6:	d2 f7       	brpl	.-12     	; 0x7cc <__udivdi3+0x5e4>
     7d8:	8d a7       	std	Y+45, r24	; 0x2d
     7da:	9e a7       	std	Y+46, r25	; 0x2e
     7dc:	af a7       	std	Y+47, r26	; 0x2f
     7de:	b8 ab       	std	Y+48, r27	; 0x30
     7e0:	a2 1a       	sub	r10, r18
     7e2:	b3 0a       	sbc	r11, r19
     7e4:	c4 0a       	sbc	r12, r20
     7e6:	d5 0a       	sbc	r13, r21
     7e8:	25 96       	adiw	r28, 0x05	; 5
     7ea:	ec ac       	ldd	r14, Y+60	; 0x3c
     7ec:	fd ac       	ldd	r15, Y+61	; 0x3d
     7ee:	0e ad       	ldd	r16, Y+62	; 0x3e
     7f0:	1f ad       	ldd	r17, Y+63	; 0x3f
     7f2:	25 97       	sbiw	r28, 0x05	; 5
     7f4:	d7 01       	movw	r26, r14
     7f6:	99 27       	eor	r25, r25
     7f8:	88 27       	eor	r24, r24
     7fa:	68 2a       	or	r6, r24
     7fc:	79 2a       	or	r7, r25
     7fe:	8a 2a       	or	r8, r26
     800:	9b 2a       	or	r9, r27
     802:	82 01       	movw	r16, r4
     804:	22 27       	eor	r18, r18
     806:	33 27       	eor	r19, r19
     808:	29 96       	adiw	r28, 0x09	; 9
     80a:	0c af       	std	Y+60, r16	; 0x3c
     80c:	1d af       	std	Y+61, r17	; 0x3d
     80e:	2e af       	std	Y+62, r18	; 0x3e
     810:	3f af       	std	Y+63, r19	; 0x3f
     812:	29 97       	sbiw	r28, 0x09	; 9
     814:	a2 01       	movw	r20, r4
     816:	91 01       	movw	r18, r2
     818:	40 70       	andi	r20, 0x00	; 0
     81a:	50 70       	andi	r21, 0x00	; 0
     81c:	2d 96       	adiw	r28, 0x0d	; 13
     81e:	2c af       	std	Y+60, r18	; 0x3c
     820:	3d af       	std	Y+61, r19	; 0x3d
     822:	4e af       	std	Y+62, r20	; 0x3e
     824:	5f af       	std	Y+63, r21	; 0x3f
     826:	2d 97       	sbiw	r28, 0x0d	; 13
     828:	c6 01       	movw	r24, r12
     82a:	b5 01       	movw	r22, r10
     82c:	29 96       	adiw	r28, 0x09	; 9
     82e:	2c ad       	ldd	r18, Y+60	; 0x3c
     830:	3d ad       	ldd	r19, Y+61	; 0x3d
     832:	4e ad       	ldd	r20, Y+62	; 0x3e
     834:	5f ad       	ldd	r21, Y+63	; 0x3f
     836:	29 97       	sbiw	r28, 0x09	; 9
     838:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     83c:	7b 01       	movw	r14, r22
     83e:	8c 01       	movw	r16, r24
     840:	c6 01       	movw	r24, r12
     842:	b5 01       	movw	r22, r10
     844:	29 96       	adiw	r28, 0x09	; 9
     846:	2c ad       	ldd	r18, Y+60	; 0x3c
     848:	3d ad       	ldd	r19, Y+61	; 0x3d
     84a:	4e ad       	ldd	r20, Y+62	; 0x3e
     84c:	5f ad       	ldd	r21, Y+63	; 0x3f
     84e:	29 97       	sbiw	r28, 0x09	; 9
     850:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     854:	c9 01       	movw	r24, r18
     856:	da 01       	movw	r26, r20
     858:	61 96       	adiw	r28, 0x11	; 17
     85a:	8c af       	std	Y+60, r24	; 0x3c
     85c:	9d af       	std	Y+61, r25	; 0x3d
     85e:	ae af       	std	Y+62, r26	; 0x3e
     860:	bf af       	std	Y+63, r27	; 0x3f
     862:	61 97       	sbiw	r28, 0x11	; 17
     864:	bc 01       	movw	r22, r24
     866:	cd 01       	movw	r24, r26
     868:	2d 96       	adiw	r28, 0x0d	; 13
     86a:	2c ad       	ldd	r18, Y+60	; 0x3c
     86c:	3d ad       	ldd	r19, Y+61	; 0x3d
     86e:	4e ad       	ldd	r20, Y+62	; 0x3e
     870:	5f ad       	ldd	r21, Y+63	; 0x3f
     872:	2d 97       	sbiw	r28, 0x0d	; 13
     874:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     878:	9b 01       	movw	r18, r22
     87a:	ac 01       	movw	r20, r24
     87c:	87 01       	movw	r16, r14
     87e:	ff 24       	eor	r15, r15
     880:	ee 24       	eor	r14, r14
     882:	ad a4       	ldd	r10, Y+45	; 0x2d
     884:	be a4       	ldd	r11, Y+46	; 0x2e
     886:	cf a4       	ldd	r12, Y+47	; 0x2f
     888:	d8 a8       	ldd	r13, Y+48	; 0x30
     88a:	c6 01       	movw	r24, r12
     88c:	aa 27       	eor	r26, r26
     88e:	bb 27       	eor	r27, r27
     890:	57 01       	movw	r10, r14
     892:	68 01       	movw	r12, r16
     894:	a8 2a       	or	r10, r24
     896:	b9 2a       	or	r11, r25
     898:	ca 2a       	or	r12, r26
     89a:	db 2a       	or	r13, r27
     89c:	a2 16       	cp	r10, r18
     89e:	b3 06       	cpc	r11, r19
     8a0:	c4 06       	cpc	r12, r20
     8a2:	d5 06       	cpc	r13, r21
     8a4:	60 f5       	brcc	.+88     	; 0x8fe <__stack+0x9f>
     8a6:	61 96       	adiw	r28, 0x11	; 17
     8a8:	6c ad       	ldd	r22, Y+60	; 0x3c
     8aa:	7d ad       	ldd	r23, Y+61	; 0x3d
     8ac:	8e ad       	ldd	r24, Y+62	; 0x3e
     8ae:	9f ad       	ldd	r25, Y+63	; 0x3f
     8b0:	61 97       	sbiw	r28, 0x11	; 17
     8b2:	61 50       	subi	r22, 0x01	; 1
     8b4:	70 40       	sbci	r23, 0x00	; 0
     8b6:	80 40       	sbci	r24, 0x00	; 0
     8b8:	90 40       	sbci	r25, 0x00	; 0
     8ba:	61 96       	adiw	r28, 0x11	; 17
     8bc:	6c af       	std	Y+60, r22	; 0x3c
     8be:	7d af       	std	Y+61, r23	; 0x3d
     8c0:	8e af       	std	Y+62, r24	; 0x3e
     8c2:	9f af       	std	Y+63, r25	; 0x3f
     8c4:	61 97       	sbiw	r28, 0x11	; 17
     8c6:	a2 0c       	add	r10, r2
     8c8:	b3 1c       	adc	r11, r3
     8ca:	c4 1c       	adc	r12, r4
     8cc:	d5 1c       	adc	r13, r5
     8ce:	a2 14       	cp	r10, r2
     8d0:	b3 04       	cpc	r11, r3
     8d2:	c4 04       	cpc	r12, r4
     8d4:	d5 04       	cpc	r13, r5
     8d6:	98 f0       	brcs	.+38     	; 0x8fe <__stack+0x9f>
     8d8:	a2 16       	cp	r10, r18
     8da:	b3 06       	cpc	r11, r19
     8dc:	c4 06       	cpc	r12, r20
     8de:	d5 06       	cpc	r13, r21
     8e0:	70 f4       	brcc	.+28     	; 0x8fe <__stack+0x9f>
     8e2:	61 50       	subi	r22, 0x01	; 1
     8e4:	70 40       	sbci	r23, 0x00	; 0
     8e6:	80 40       	sbci	r24, 0x00	; 0
     8e8:	90 40       	sbci	r25, 0x00	; 0
     8ea:	61 96       	adiw	r28, 0x11	; 17
     8ec:	6c af       	std	Y+60, r22	; 0x3c
     8ee:	7d af       	std	Y+61, r23	; 0x3d
     8f0:	8e af       	std	Y+62, r24	; 0x3e
     8f2:	9f af       	std	Y+63, r25	; 0x3f
     8f4:	61 97       	sbiw	r28, 0x11	; 17
     8f6:	a2 0c       	add	r10, r2
     8f8:	b3 1c       	adc	r11, r3
     8fa:	c4 1c       	adc	r12, r4
     8fc:	d5 1c       	adc	r13, r5
     8fe:	a2 1a       	sub	r10, r18
     900:	b3 0a       	sbc	r11, r19
     902:	c4 0a       	sbc	r12, r20
     904:	d5 0a       	sbc	r13, r21
     906:	c6 01       	movw	r24, r12
     908:	b5 01       	movw	r22, r10
     90a:	29 96       	adiw	r28, 0x09	; 9
     90c:	2c ad       	ldd	r18, Y+60	; 0x3c
     90e:	3d ad       	ldd	r19, Y+61	; 0x3d
     910:	4e ad       	ldd	r20, Y+62	; 0x3e
     912:	5f ad       	ldd	r21, Y+63	; 0x3f
     914:	29 97       	sbiw	r28, 0x09	; 9
     916:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     91a:	7b 01       	movw	r14, r22
     91c:	8c 01       	movw	r16, r24
     91e:	c6 01       	movw	r24, r12
     920:	b5 01       	movw	r22, r10
     922:	29 96       	adiw	r28, 0x09	; 9
     924:	2c ad       	ldd	r18, Y+60	; 0x3c
     926:	3d ad       	ldd	r19, Y+61	; 0x3d
     928:	4e ad       	ldd	r20, Y+62	; 0x3e
     92a:	5f ad       	ldd	r21, Y+63	; 0x3f
     92c:	29 97       	sbiw	r28, 0x09	; 9
     92e:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     932:	c9 01       	movw	r24, r18
     934:	da 01       	movw	r26, r20
     936:	5c 01       	movw	r10, r24
     938:	6d 01       	movw	r12, r26
     93a:	c6 01       	movw	r24, r12
     93c:	b5 01       	movw	r22, r10
     93e:	2d 96       	adiw	r28, 0x0d	; 13
     940:	2c ad       	ldd	r18, Y+60	; 0x3c
     942:	3d ad       	ldd	r19, Y+61	; 0x3d
     944:	4e ad       	ldd	r20, Y+62	; 0x3e
     946:	5f ad       	ldd	r21, Y+63	; 0x3f
     948:	2d 97       	sbiw	r28, 0x0d	; 13
     94a:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     94e:	9b 01       	movw	r18, r22
     950:	ac 01       	movw	r20, r24
     952:	87 01       	movw	r16, r14
     954:	ff 24       	eor	r15, r15
     956:	ee 24       	eor	r14, r14
     958:	8d a5       	ldd	r24, Y+45	; 0x2d
     95a:	9e a5       	ldd	r25, Y+46	; 0x2e
     95c:	af a5       	ldd	r26, Y+47	; 0x2f
     95e:	b8 a9       	ldd	r27, Y+48	; 0x30
     960:	a0 70       	andi	r26, 0x00	; 0
     962:	b0 70       	andi	r27, 0x00	; 0
     964:	e8 2a       	or	r14, r24
     966:	f9 2a       	or	r15, r25
     968:	0a 2b       	or	r16, r26
     96a:	1b 2b       	or	r17, r27
     96c:	e2 16       	cp	r14, r18
     96e:	f3 06       	cpc	r15, r19
     970:	04 07       	cpc	r16, r20
     972:	15 07       	cpc	r17, r21
     974:	c0 f4       	brcc	.+48     	; 0x9a6 <__stack+0x147>
     976:	08 94       	sec
     978:	a1 08       	sbc	r10, r1
     97a:	b1 08       	sbc	r11, r1
     97c:	c1 08       	sbc	r12, r1
     97e:	d1 08       	sbc	r13, r1
     980:	e2 0c       	add	r14, r2
     982:	f3 1c       	adc	r15, r3
     984:	04 1d       	adc	r16, r4
     986:	15 1d       	adc	r17, r5
     988:	e2 14       	cp	r14, r2
     98a:	f3 04       	cpc	r15, r3
     98c:	04 05       	cpc	r16, r4
     98e:	15 05       	cpc	r17, r5
     990:	50 f0       	brcs	.+20     	; 0x9a6 <__stack+0x147>
     992:	e2 16       	cp	r14, r18
     994:	f3 06       	cpc	r15, r19
     996:	04 07       	cpc	r16, r20
     998:	15 07       	cpc	r17, r21
     99a:	28 f4       	brcc	.+10     	; 0x9a6 <__stack+0x147>
     99c:	08 94       	sec
     99e:	a1 08       	sbc	r10, r1
     9a0:	b1 08       	sbc	r11, r1
     9a2:	c1 08       	sbc	r12, r1
     9a4:	d1 08       	sbc	r13, r1
     9a6:	61 96       	adiw	r28, 0x11	; 17
     9a8:	ec ac       	ldd	r14, Y+60	; 0x3c
     9aa:	fd ac       	ldd	r15, Y+61	; 0x3d
     9ac:	0e ad       	ldd	r16, Y+62	; 0x3e
     9ae:	1f ad       	ldd	r17, Y+63	; 0x3f
     9b0:	61 97       	sbiw	r28, 0x11	; 17
     9b2:	d7 01       	movw	r26, r14
     9b4:	99 27       	eor	r25, r25
     9b6:	88 27       	eor	r24, r24
     9b8:	96 01       	movw	r18, r12
     9ba:	85 01       	movw	r16, r10
     9bc:	08 2b       	or	r16, r24
     9be:	19 2b       	or	r17, r25
     9c0:	2a 2b       	or	r18, r26
     9c2:	3b 2b       	or	r19, r27
     9c4:	09 ab       	std	Y+49, r16	; 0x31
     9c6:	1a ab       	std	Y+50, r17	; 0x32
     9c8:	2b ab       	std	Y+51, r18	; 0x33
     9ca:	3c ab       	std	Y+52, r19	; 0x34
     9cc:	62 c2       	rjmp	.+1220   	; 0xe92 <__stack+0x633>
     9ce:	6e 14       	cp	r6, r14
     9d0:	7f 04       	cpc	r7, r15
     9d2:	80 06       	cpc	r8, r16
     9d4:	91 06       	cpc	r9, r17
     9d6:	08 f4       	brcc	.+2      	; 0x9da <__stack+0x17b>
     9d8:	51 c2       	rjmp	.+1186   	; 0xe7c <__stack+0x61d>
     9da:	20 e0       	ldi	r18, 0x00	; 0
     9dc:	e2 16       	cp	r14, r18
     9de:	20 e0       	ldi	r18, 0x00	; 0
     9e0:	f2 06       	cpc	r15, r18
     9e2:	21 e0       	ldi	r18, 0x01	; 1
     9e4:	02 07       	cpc	r16, r18
     9e6:	20 e0       	ldi	r18, 0x00	; 0
     9e8:	12 07       	cpc	r17, r18
     9ea:	88 f4       	brcc	.+34     	; 0xa0e <__stack+0x1af>
     9ec:	3f ef       	ldi	r19, 0xFF	; 255
     9ee:	e3 16       	cp	r14, r19
     9f0:	f1 04       	cpc	r15, r1
     9f2:	01 05       	cpc	r16, r1
     9f4:	11 05       	cpc	r17, r1
     9f6:	31 f0       	breq	.+12     	; 0xa04 <__stack+0x1a5>
     9f8:	28 f0       	brcs	.+10     	; 0xa04 <__stack+0x1a5>
     9fa:	48 e0       	ldi	r20, 0x08	; 8
     9fc:	50 e0       	ldi	r21, 0x00	; 0
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	70 e0       	ldi	r23, 0x00	; 0
     a02:	17 c0       	rjmp	.+46     	; 0xa32 <__stack+0x1d3>
     a04:	40 e0       	ldi	r20, 0x00	; 0
     a06:	50 e0       	ldi	r21, 0x00	; 0
     a08:	60 e0       	ldi	r22, 0x00	; 0
     a0a:	70 e0       	ldi	r23, 0x00	; 0
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__stack+0x1d3>
     a0e:	40 e0       	ldi	r20, 0x00	; 0
     a10:	e4 16       	cp	r14, r20
     a12:	40 e0       	ldi	r20, 0x00	; 0
     a14:	f4 06       	cpc	r15, r20
     a16:	40 e0       	ldi	r20, 0x00	; 0
     a18:	04 07       	cpc	r16, r20
     a1a:	41 e0       	ldi	r20, 0x01	; 1
     a1c:	14 07       	cpc	r17, r20
     a1e:	28 f0       	brcs	.+10     	; 0xa2a <__stack+0x1cb>
     a20:	48 e1       	ldi	r20, 0x18	; 24
     a22:	50 e0       	ldi	r21, 0x00	; 0
     a24:	60 e0       	ldi	r22, 0x00	; 0
     a26:	70 e0       	ldi	r23, 0x00	; 0
     a28:	04 c0       	rjmp	.+8      	; 0xa32 <__stack+0x1d3>
     a2a:	40 e1       	ldi	r20, 0x10	; 16
     a2c:	50 e0       	ldi	r21, 0x00	; 0
     a2e:	60 e0       	ldi	r22, 0x00	; 0
     a30:	70 e0       	ldi	r23, 0x00	; 0
     a32:	d8 01       	movw	r26, r16
     a34:	c7 01       	movw	r24, r14
     a36:	04 2e       	mov	r0, r20
     a38:	04 c0       	rjmp	.+8      	; 0xa42 <__stack+0x1e3>
     a3a:	b6 95       	lsr	r27
     a3c:	a7 95       	ror	r26
     a3e:	97 95       	ror	r25
     a40:	87 95       	ror	r24
     a42:	0a 94       	dec	r0
     a44:	d2 f7       	brpl	.-12     	; 0xa3a <__stack+0x1db>
     a46:	88 59       	subi	r24, 0x98	; 152
     a48:	9f 4f       	sbci	r25, 0xFF	; 255
     a4a:	dc 01       	movw	r26, r24
     a4c:	2c 91       	ld	r18, X
     a4e:	30 e2       	ldi	r19, 0x20	; 32
     a50:	a3 2e       	mov	r10, r19
     a52:	b1 2c       	mov	r11, r1
     a54:	c1 2c       	mov	r12, r1
     a56:	d1 2c       	mov	r13, r1
     a58:	d6 01       	movw	r26, r12
     a5a:	c5 01       	movw	r24, r10
     a5c:	84 1b       	sub	r24, r20
     a5e:	95 0b       	sbc	r25, r21
     a60:	a6 0b       	sbc	r26, r22
     a62:	b7 0b       	sbc	r27, r23
     a64:	82 1b       	sub	r24, r18
     a66:	91 09       	sbc	r25, r1
     a68:	a1 09       	sbc	r26, r1
     a6a:	b1 09       	sbc	r27, r1
     a6c:	00 97       	sbiw	r24, 0x00	; 0
     a6e:	a1 05       	cpc	r26, r1
     a70:	b1 05       	cpc	r27, r1
     a72:	89 f4       	brne	.+34     	; 0xa96 <__stack+0x237>
     a74:	e6 14       	cp	r14, r6
     a76:	f7 04       	cpc	r15, r7
     a78:	08 05       	cpc	r16, r8
     a7a:	19 05       	cpc	r17, r9
     a7c:	08 f4       	brcc	.+2      	; 0xa80 <__stack+0x221>
     a7e:	f2 c1       	rjmp	.+996    	; 0xe64 <__stack+0x605>
     a80:	6d a4       	ldd	r6, Y+45	; 0x2d
     a82:	7e a4       	ldd	r7, Y+46	; 0x2e
     a84:	8f a4       	ldd	r8, Y+47	; 0x2f
     a86:	98 a8       	ldd	r9, Y+48	; 0x30
     a88:	62 14       	cp	r6, r2
     a8a:	73 04       	cpc	r7, r3
     a8c:	84 04       	cpc	r8, r4
     a8e:	95 04       	cpc	r9, r5
     a90:	08 f0       	brcs	.+2      	; 0xa94 <__stack+0x235>
     a92:	e8 c1       	rjmp	.+976    	; 0xe64 <__stack+0x605>
     a94:	f3 c1       	rjmp	.+998    	; 0xe7c <__stack+0x61d>
     a96:	6e 96       	adiw	r28, 0x1e	; 30
     a98:	8f af       	std	Y+63, r24	; 0x3f
     a9a:	6e 97       	sbiw	r28, 0x1e	; 30
     a9c:	08 2e       	mov	r0, r24
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__stack+0x249>
     aa0:	ee 0c       	add	r14, r14
     aa2:	ff 1c       	adc	r15, r15
     aa4:	00 1f       	adc	r16, r16
     aa6:	11 1f       	adc	r17, r17
     aa8:	0a 94       	dec	r0
     aaa:	d2 f7       	brpl	.-12     	; 0xaa0 <__stack+0x241>
     aac:	6a 2d       	mov	r22, r10
     aae:	68 1b       	sub	r22, r24
     ab0:	d2 01       	movw	r26, r4
     ab2:	c1 01       	movw	r24, r2
     ab4:	06 2e       	mov	r0, r22
     ab6:	04 c0       	rjmp	.+8      	; 0xac0 <__stack+0x261>
     ab8:	b6 95       	lsr	r27
     aba:	a7 95       	ror	r26
     abc:	97 95       	ror	r25
     abe:	87 95       	ror	r24
     ac0:	0a 94       	dec	r0
     ac2:	d2 f7       	brpl	.-12     	; 0xab8 <__stack+0x259>
     ac4:	5c 01       	movw	r10, r24
     ac6:	6d 01       	movw	r12, r26
     ac8:	ae 28       	or	r10, r14
     aca:	bf 28       	or	r11, r15
     acc:	c0 2a       	or	r12, r16
     ace:	d1 2a       	or	r13, r17
     ad0:	ad a2       	std	Y+37, r10	; 0x25
     ad2:	be a2       	std	Y+38, r11	; 0x26
     ad4:	cf a2       	std	Y+39, r12	; 0x27
     ad6:	d8 a6       	std	Y+40, r13	; 0x28
     ad8:	72 01       	movw	r14, r4
     ada:	61 01       	movw	r12, r2
     adc:	6e 96       	adiw	r28, 0x1e	; 30
     ade:	0f ac       	ldd	r0, Y+63	; 0x3f
     ae0:	6e 97       	sbiw	r28, 0x1e	; 30
     ae2:	04 c0       	rjmp	.+8      	; 0xaec <__stack+0x28d>
     ae4:	cc 0c       	add	r12, r12
     ae6:	dd 1c       	adc	r13, r13
     ae8:	ee 1c       	adc	r14, r14
     aea:	ff 1c       	adc	r15, r15
     aec:	0a 94       	dec	r0
     aee:	d2 f7       	brpl	.-12     	; 0xae4 <__stack+0x285>
     af0:	c9 a2       	std	Y+33, r12	; 0x21
     af2:	da a2       	std	Y+34, r13	; 0x22
     af4:	eb a2       	std	Y+35, r14	; 0x23
     af6:	fc a2       	std	Y+36, r15	; 0x24
     af8:	64 01       	movw	r12, r8
     afa:	53 01       	movw	r10, r6
     afc:	06 2e       	mov	r0, r22
     afe:	04 c0       	rjmp	.+8      	; 0xb08 <__stack+0x2a9>
     b00:	d6 94       	lsr	r13
     b02:	c7 94       	ror	r12
     b04:	b7 94       	ror	r11
     b06:	a7 94       	ror	r10
     b08:	0a 94       	dec	r0
     b0a:	d2 f7       	brpl	.-12     	; 0xb00 <__stack+0x2a1>
     b0c:	d4 01       	movw	r26, r8
     b0e:	c3 01       	movw	r24, r6
     b10:	6e 96       	adiw	r28, 0x1e	; 30
     b12:	0f ac       	ldd	r0, Y+63	; 0x3f
     b14:	6e 97       	sbiw	r28, 0x1e	; 30
     b16:	04 c0       	rjmp	.+8      	; 0xb20 <__stack+0x2c1>
     b18:	88 0f       	add	r24, r24
     b1a:	99 1f       	adc	r25, r25
     b1c:	aa 1f       	adc	r26, r26
     b1e:	bb 1f       	adc	r27, r27
     b20:	0a 94       	dec	r0
     b22:	d2 f7       	brpl	.-12     	; 0xb18 <__stack+0x2b9>
     b24:	ed a4       	ldd	r14, Y+45	; 0x2d
     b26:	fe a4       	ldd	r15, Y+46	; 0x2e
     b28:	0f a5       	ldd	r16, Y+47	; 0x2f
     b2a:	18 a9       	ldd	r17, Y+48	; 0x30
     b2c:	04 c0       	rjmp	.+8      	; 0xb36 <__stack+0x2d7>
     b2e:	16 95       	lsr	r17
     b30:	07 95       	ror	r16
     b32:	f7 94       	ror	r15
     b34:	e7 94       	ror	r14
     b36:	6a 95       	dec	r22
     b38:	d2 f7       	brpl	.-12     	; 0xb2e <__stack+0x2cf>
     b3a:	37 01       	movw	r6, r14
     b3c:	48 01       	movw	r8, r16
     b3e:	68 2a       	or	r6, r24
     b40:	79 2a       	or	r7, r25
     b42:	8a 2a       	or	r8, r26
     b44:	9b 2a       	or	r9, r27
     b46:	6d 8e       	std	Y+29, r6	; 0x1d
     b48:	7e 8e       	std	Y+30, r7	; 0x1e
     b4a:	8f 8e       	std	Y+31, r8	; 0x1f
     b4c:	98 a2       	std	Y+32, r9	; 0x20
     b4e:	ed a0       	ldd	r14, Y+37	; 0x25
     b50:	fe a0       	ldd	r15, Y+38	; 0x26
     b52:	0f a1       	ldd	r16, Y+39	; 0x27
     b54:	18 a5       	ldd	r17, Y+40	; 0x28
     b56:	38 01       	movw	r6, r16
     b58:	88 24       	eor	r8, r8
     b5a:	99 24       	eor	r9, r9
     b5c:	98 01       	movw	r18, r16
     b5e:	87 01       	movw	r16, r14
     b60:	20 70       	andi	r18, 0x00	; 0
     b62:	30 70       	andi	r19, 0x00	; 0
     b64:	65 96       	adiw	r28, 0x15	; 21
     b66:	0c af       	std	Y+60, r16	; 0x3c
     b68:	1d af       	std	Y+61, r17	; 0x3d
     b6a:	2e af       	std	Y+62, r18	; 0x3e
     b6c:	3f af       	std	Y+63, r19	; 0x3f
     b6e:	65 97       	sbiw	r28, 0x15	; 21
     b70:	c6 01       	movw	r24, r12
     b72:	b5 01       	movw	r22, r10
     b74:	a4 01       	movw	r20, r8
     b76:	93 01       	movw	r18, r6
     b78:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     b7c:	7b 01       	movw	r14, r22
     b7e:	8c 01       	movw	r16, r24
     b80:	c6 01       	movw	r24, r12
     b82:	b5 01       	movw	r22, r10
     b84:	a4 01       	movw	r20, r8
     b86:	93 01       	movw	r18, r6
     b88:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     b8c:	c9 01       	movw	r24, r18
     b8e:	da 01       	movw	r26, r20
     b90:	1c 01       	movw	r2, r24
     b92:	2d 01       	movw	r4, r26
     b94:	c2 01       	movw	r24, r4
     b96:	b1 01       	movw	r22, r2
     b98:	65 96       	adiw	r28, 0x15	; 21
     b9a:	2c ad       	ldd	r18, Y+60	; 0x3c
     b9c:	3d ad       	ldd	r19, Y+61	; 0x3d
     b9e:	4e ad       	ldd	r20, Y+62	; 0x3e
     ba0:	5f ad       	ldd	r21, Y+63	; 0x3f
     ba2:	65 97       	sbiw	r28, 0x15	; 21
     ba4:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     ba8:	9b 01       	movw	r18, r22
     baa:	ac 01       	movw	r20, r24
     bac:	87 01       	movw	r16, r14
     bae:	ff 24       	eor	r15, r15
     bb0:	ee 24       	eor	r14, r14
     bb2:	ad 8c       	ldd	r10, Y+29	; 0x1d
     bb4:	be 8c       	ldd	r11, Y+30	; 0x1e
     bb6:	cf 8c       	ldd	r12, Y+31	; 0x1f
     bb8:	d8 a0       	ldd	r13, Y+32	; 0x20
     bba:	c6 01       	movw	r24, r12
     bbc:	aa 27       	eor	r26, r26
     bbe:	bb 27       	eor	r27, r27
     bc0:	57 01       	movw	r10, r14
     bc2:	68 01       	movw	r12, r16
     bc4:	a8 2a       	or	r10, r24
     bc6:	b9 2a       	or	r11, r25
     bc8:	ca 2a       	or	r12, r26
     bca:	db 2a       	or	r13, r27
     bcc:	a2 16       	cp	r10, r18
     bce:	b3 06       	cpc	r11, r19
     bd0:	c4 06       	cpc	r12, r20
     bd2:	d5 06       	cpc	r13, r21
     bd4:	00 f5       	brcc	.+64     	; 0xc16 <__stack+0x3b7>
     bd6:	08 94       	sec
     bd8:	21 08       	sbc	r2, r1
     bda:	31 08       	sbc	r3, r1
     bdc:	41 08       	sbc	r4, r1
     bde:	51 08       	sbc	r5, r1
     be0:	ed a0       	ldd	r14, Y+37	; 0x25
     be2:	fe a0       	ldd	r15, Y+38	; 0x26
     be4:	0f a1       	ldd	r16, Y+39	; 0x27
     be6:	18 a5       	ldd	r17, Y+40	; 0x28
     be8:	ae 0c       	add	r10, r14
     bea:	bf 1c       	adc	r11, r15
     bec:	c0 1e       	adc	r12, r16
     bee:	d1 1e       	adc	r13, r17
     bf0:	ae 14       	cp	r10, r14
     bf2:	bf 04       	cpc	r11, r15
     bf4:	c0 06       	cpc	r12, r16
     bf6:	d1 06       	cpc	r13, r17
     bf8:	70 f0       	brcs	.+28     	; 0xc16 <__stack+0x3b7>
     bfa:	a2 16       	cp	r10, r18
     bfc:	b3 06       	cpc	r11, r19
     bfe:	c4 06       	cpc	r12, r20
     c00:	d5 06       	cpc	r13, r21
     c02:	48 f4       	brcc	.+18     	; 0xc16 <__stack+0x3b7>
     c04:	08 94       	sec
     c06:	21 08       	sbc	r2, r1
     c08:	31 08       	sbc	r3, r1
     c0a:	41 08       	sbc	r4, r1
     c0c:	51 08       	sbc	r5, r1
     c0e:	ae 0c       	add	r10, r14
     c10:	bf 1c       	adc	r11, r15
     c12:	c0 1e       	adc	r12, r16
     c14:	d1 1e       	adc	r13, r17
     c16:	a2 1a       	sub	r10, r18
     c18:	b3 0a       	sbc	r11, r19
     c1a:	c4 0a       	sbc	r12, r20
     c1c:	d5 0a       	sbc	r13, r21
     c1e:	c6 01       	movw	r24, r12
     c20:	b5 01       	movw	r22, r10
     c22:	a4 01       	movw	r20, r8
     c24:	93 01       	movw	r18, r6
     c26:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     c2a:	7b 01       	movw	r14, r22
     c2c:	8c 01       	movw	r16, r24
     c2e:	c6 01       	movw	r24, r12
     c30:	b5 01       	movw	r22, r10
     c32:	a4 01       	movw	r20, r8
     c34:	93 01       	movw	r18, r6
     c36:	0e 94 e5 23 	call	0x47ca	; 0x47ca <__udivmodsi4>
     c3a:	c9 01       	movw	r24, r18
     c3c:	da 01       	movw	r26, r20
     c3e:	3c 01       	movw	r6, r24
     c40:	4d 01       	movw	r8, r26
     c42:	c4 01       	movw	r24, r8
     c44:	b3 01       	movw	r22, r6
     c46:	65 96       	adiw	r28, 0x15	; 21
     c48:	2c ad       	ldd	r18, Y+60	; 0x3c
     c4a:	3d ad       	ldd	r19, Y+61	; 0x3d
     c4c:	4e ad       	ldd	r20, Y+62	; 0x3e
     c4e:	5f ad       	ldd	r21, Y+63	; 0x3f
     c50:	65 97       	sbiw	r28, 0x15	; 21
     c52:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     c56:	9b 01       	movw	r18, r22
     c58:	ac 01       	movw	r20, r24
     c5a:	87 01       	movw	r16, r14
     c5c:	ff 24       	eor	r15, r15
     c5e:	ee 24       	eor	r14, r14
     c60:	8d 8d       	ldd	r24, Y+29	; 0x1d
     c62:	9e 8d       	ldd	r25, Y+30	; 0x1e
     c64:	af 8d       	ldd	r26, Y+31	; 0x1f
     c66:	b8 a1       	ldd	r27, Y+32	; 0x20
     c68:	a0 70       	andi	r26, 0x00	; 0
     c6a:	b0 70       	andi	r27, 0x00	; 0
     c6c:	57 01       	movw	r10, r14
     c6e:	68 01       	movw	r12, r16
     c70:	a8 2a       	or	r10, r24
     c72:	b9 2a       	or	r11, r25
     c74:	ca 2a       	or	r12, r26
     c76:	db 2a       	or	r13, r27
     c78:	a2 16       	cp	r10, r18
     c7a:	b3 06       	cpc	r11, r19
     c7c:	c4 06       	cpc	r12, r20
     c7e:	d5 06       	cpc	r13, r21
     c80:	00 f5       	brcc	.+64     	; 0xcc2 <__stack+0x463>
     c82:	08 94       	sec
     c84:	61 08       	sbc	r6, r1
     c86:	71 08       	sbc	r7, r1
     c88:	81 08       	sbc	r8, r1
     c8a:	91 08       	sbc	r9, r1
     c8c:	6d a1       	ldd	r22, Y+37	; 0x25
     c8e:	7e a1       	ldd	r23, Y+38	; 0x26
     c90:	8f a1       	ldd	r24, Y+39	; 0x27
     c92:	98 a5       	ldd	r25, Y+40	; 0x28
     c94:	a6 0e       	add	r10, r22
     c96:	b7 1e       	adc	r11, r23
     c98:	c8 1e       	adc	r12, r24
     c9a:	d9 1e       	adc	r13, r25
     c9c:	a6 16       	cp	r10, r22
     c9e:	b7 06       	cpc	r11, r23
     ca0:	c8 06       	cpc	r12, r24
     ca2:	d9 06       	cpc	r13, r25
     ca4:	70 f0       	brcs	.+28     	; 0xcc2 <__stack+0x463>
     ca6:	a2 16       	cp	r10, r18
     ca8:	b3 06       	cpc	r11, r19
     caa:	c4 06       	cpc	r12, r20
     cac:	d5 06       	cpc	r13, r21
     cae:	48 f4       	brcc	.+18     	; 0xcc2 <__stack+0x463>
     cb0:	08 94       	sec
     cb2:	61 08       	sbc	r6, r1
     cb4:	71 08       	sbc	r7, r1
     cb6:	81 08       	sbc	r8, r1
     cb8:	91 08       	sbc	r9, r1
     cba:	a6 0e       	add	r10, r22
     cbc:	b7 1e       	adc	r11, r23
     cbe:	c8 1e       	adc	r12, r24
     cc0:	d9 1e       	adc	r13, r25
     cc2:	d6 01       	movw	r26, r12
     cc4:	c5 01       	movw	r24, r10
     cc6:	82 1b       	sub	r24, r18
     cc8:	93 0b       	sbc	r25, r19
     cca:	a4 0b       	sbc	r26, r20
     ccc:	b5 0b       	sbc	r27, r21
     cce:	89 8f       	std	Y+25, r24	; 0x19
     cd0:	9a 8f       	std	Y+26, r25	; 0x1a
     cd2:	ab 8f       	std	Y+27, r26	; 0x1b
     cd4:	bc 8f       	std	Y+28, r27	; 0x1c
     cd6:	d1 01       	movw	r26, r2
     cd8:	99 27       	eor	r25, r25
     cda:	88 27       	eor	r24, r24
     cdc:	64 01       	movw	r12, r8
     cde:	53 01       	movw	r10, r6
     ce0:	a8 2a       	or	r10, r24
     ce2:	b9 2a       	or	r11, r25
     ce4:	ca 2a       	or	r12, r26
     ce6:	db 2a       	or	r13, r27
     ce8:	a9 aa       	std	Y+49, r10	; 0x31
     cea:	ba aa       	std	Y+50, r11	; 0x32
     cec:	cb aa       	std	Y+51, r12	; 0x33
     cee:	dc aa       	std	Y+52, r13	; 0x34
     cf0:	86 01       	movw	r16, r12
     cf2:	75 01       	movw	r14, r10
     cf4:	2f ef       	ldi	r18, 0xFF	; 255
     cf6:	3f ef       	ldi	r19, 0xFF	; 255
     cf8:	40 e0       	ldi	r20, 0x00	; 0
     cfa:	50 e0       	ldi	r21, 0x00	; 0
     cfc:	e2 22       	and	r14, r18
     cfe:	f3 22       	and	r15, r19
     d00:	04 23       	and	r16, r20
     d02:	15 23       	and	r17, r21
     d04:	a6 01       	movw	r20, r12
     d06:	66 27       	eor	r22, r22
     d08:	77 27       	eor	r23, r23
     d0a:	6d 96       	adiw	r28, 0x1d	; 29
     d0c:	4c af       	std	Y+60, r20	; 0x3c
     d0e:	5d af       	std	Y+61, r21	; 0x3d
     d10:	6e af       	std	Y+62, r22	; 0x3e
     d12:	7f af       	std	Y+63, r23	; 0x3f
     d14:	6d 97       	sbiw	r28, 0x1d	; 29
     d16:	a9 a0       	ldd	r10, Y+33	; 0x21
     d18:	ba a0       	ldd	r11, Y+34	; 0x22
     d1a:	cb a0       	ldd	r12, Y+35	; 0x23
     d1c:	dc a0       	ldd	r13, Y+36	; 0x24
     d1e:	6f ef       	ldi	r22, 0xFF	; 255
     d20:	7f ef       	ldi	r23, 0xFF	; 255
     d22:	80 e0       	ldi	r24, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	a6 22       	and	r10, r22
     d28:	b7 22       	and	r11, r23
     d2a:	c8 22       	and	r12, r24
     d2c:	d9 22       	and	r13, r25
     d2e:	89 a1       	ldd	r24, Y+33	; 0x21
     d30:	9a a1       	ldd	r25, Y+34	; 0x22
     d32:	ab a1       	ldd	r26, Y+35	; 0x23
     d34:	bc a1       	ldd	r27, Y+36	; 0x24
     d36:	1d 01       	movw	r2, r26
     d38:	44 24       	eor	r4, r4
     d3a:	55 24       	eor	r5, r5
     d3c:	c8 01       	movw	r24, r16
     d3e:	b7 01       	movw	r22, r14
     d40:	a6 01       	movw	r20, r12
     d42:	95 01       	movw	r18, r10
     d44:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     d48:	69 96       	adiw	r28, 0x19	; 25
     d4a:	6c af       	std	Y+60, r22	; 0x3c
     d4c:	7d af       	std	Y+61, r23	; 0x3d
     d4e:	8e af       	std	Y+62, r24	; 0x3e
     d50:	9f af       	std	Y+63, r25	; 0x3f
     d52:	69 97       	sbiw	r28, 0x19	; 25
     d54:	c8 01       	movw	r24, r16
     d56:	b7 01       	movw	r22, r14
     d58:	a2 01       	movw	r20, r4
     d5a:	91 01       	movw	r18, r2
     d5c:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     d60:	3b 01       	movw	r6, r22
     d62:	4c 01       	movw	r8, r24
     d64:	6d 96       	adiw	r28, 0x1d	; 29
     d66:	6c ad       	ldd	r22, Y+60	; 0x3c
     d68:	7d ad       	ldd	r23, Y+61	; 0x3d
     d6a:	8e ad       	ldd	r24, Y+62	; 0x3e
     d6c:	9f ad       	ldd	r25, Y+63	; 0x3f
     d6e:	6d 97       	sbiw	r28, 0x1d	; 29
     d70:	a6 01       	movw	r20, r12
     d72:	95 01       	movw	r18, r10
     d74:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     d78:	7b 01       	movw	r14, r22
     d7a:	8c 01       	movw	r16, r24
     d7c:	6d 96       	adiw	r28, 0x1d	; 29
     d7e:	6c ad       	ldd	r22, Y+60	; 0x3c
     d80:	7d ad       	ldd	r23, Y+61	; 0x3d
     d82:	8e ad       	ldd	r24, Y+62	; 0x3e
     d84:	9f ad       	ldd	r25, Y+63	; 0x3f
     d86:	6d 97       	sbiw	r28, 0x1d	; 29
     d88:	a2 01       	movw	r20, r4
     d8a:	91 01       	movw	r18, r2
     d8c:	0e 94 c6 23 	call	0x478c	; 0x478c <__mulsi3>
     d90:	5b 01       	movw	r10, r22
     d92:	6c 01       	movw	r12, r24
     d94:	a8 01       	movw	r20, r16
     d96:	97 01       	movw	r18, r14
     d98:	26 0d       	add	r18, r6
     d9a:	37 1d       	adc	r19, r7
     d9c:	48 1d       	adc	r20, r8
     d9e:	59 1d       	adc	r21, r9
     da0:	69 96       	adiw	r28, 0x19	; 25
     da2:	6c ac       	ldd	r6, Y+60	; 0x3c
     da4:	7d ac       	ldd	r7, Y+61	; 0x3d
     da6:	8e ac       	ldd	r8, Y+62	; 0x3e
     da8:	9f ac       	ldd	r9, Y+63	; 0x3f
     daa:	69 97       	sbiw	r28, 0x19	; 25
     dac:	c4 01       	movw	r24, r8
     dae:	aa 27       	eor	r26, r26
     db0:	bb 27       	eor	r27, r27
     db2:	28 0f       	add	r18, r24
     db4:	39 1f       	adc	r19, r25
     db6:	4a 1f       	adc	r20, r26
     db8:	5b 1f       	adc	r21, r27
     dba:	2e 15       	cp	r18, r14
     dbc:	3f 05       	cpc	r19, r15
     dbe:	40 07       	cpc	r20, r16
     dc0:	51 07       	cpc	r21, r17
     dc2:	48 f4       	brcc	.+18     	; 0xdd6 <__stack+0x577>
     dc4:	e1 2c       	mov	r14, r1
     dc6:	f1 2c       	mov	r15, r1
     dc8:	61 e0       	ldi	r22, 0x01	; 1
     dca:	06 2f       	mov	r16, r22
     dcc:	11 2d       	mov	r17, r1
     dce:	ae 0c       	add	r10, r14
     dd0:	bf 1c       	adc	r11, r15
     dd2:	c0 1e       	adc	r12, r16
     dd4:	d1 1e       	adc	r13, r17
     dd6:	ca 01       	movw	r24, r20
     dd8:	aa 27       	eor	r26, r26
     dda:	bb 27       	eor	r27, r27
     ddc:	bc 01       	movw	r22, r24
     dde:	cd 01       	movw	r24, r26
     de0:	6a 0d       	add	r22, r10
     de2:	7b 1d       	adc	r23, r11
     de4:	8c 1d       	adc	r24, r12
     de6:	9d 1d       	adc	r25, r13
     de8:	69 8c       	ldd	r6, Y+25	; 0x19
     dea:	7a 8c       	ldd	r7, Y+26	; 0x1a
     dec:	8b 8c       	ldd	r8, Y+27	; 0x1b
     dee:	9c 8c       	ldd	r9, Y+28	; 0x1c
     df0:	66 16       	cp	r6, r22
     df2:	77 06       	cpc	r7, r23
     df4:	88 06       	cpc	r8, r24
     df6:	99 06       	cpc	r9, r25
     df8:	40 f1       	brcs	.+80     	; 0xe4a <__stack+0x5eb>
     dfa:	66 15       	cp	r22, r6
     dfc:	77 05       	cpc	r23, r7
     dfe:	88 05       	cpc	r24, r8
     e00:	99 05       	cpc	r25, r9
     e02:	09 f0       	breq	.+2      	; 0xe06 <__stack+0x5a7>
     e04:	43 c0       	rjmp	.+134    	; 0xe8c <__stack+0x62d>
     e06:	d9 01       	movw	r26, r18
     e08:	99 27       	eor	r25, r25
     e0a:	88 27       	eor	r24, r24
     e0c:	69 96       	adiw	r28, 0x19	; 25
     e0e:	2c ad       	ldd	r18, Y+60	; 0x3c
     e10:	3d ad       	ldd	r19, Y+61	; 0x3d
     e12:	4e ad       	ldd	r20, Y+62	; 0x3e
     e14:	5f ad       	ldd	r21, Y+63	; 0x3f
     e16:	69 97       	sbiw	r28, 0x19	; 25
     e18:	40 70       	andi	r20, 0x00	; 0
     e1a:	50 70       	andi	r21, 0x00	; 0
     e1c:	82 0f       	add	r24, r18
     e1e:	93 1f       	adc	r25, r19
     e20:	a4 1f       	adc	r26, r20
     e22:	b5 1f       	adc	r27, r21
     e24:	2d a5       	ldd	r18, Y+45	; 0x2d
     e26:	3e a5       	ldd	r19, Y+46	; 0x2e
     e28:	4f a5       	ldd	r20, Y+47	; 0x2f
     e2a:	58 a9       	ldd	r21, Y+48	; 0x30
     e2c:	6e 96       	adiw	r28, 0x1e	; 30
     e2e:	0f ac       	ldd	r0, Y+63	; 0x3f
     e30:	6e 97       	sbiw	r28, 0x1e	; 30
     e32:	04 c0       	rjmp	.+8      	; 0xe3c <__stack+0x5dd>
     e34:	22 0f       	add	r18, r18
     e36:	33 1f       	adc	r19, r19
     e38:	44 1f       	adc	r20, r20
     e3a:	55 1f       	adc	r21, r21
     e3c:	0a 94       	dec	r0
     e3e:	d2 f7       	brpl	.-12     	; 0xe34 <__stack+0x5d5>
     e40:	28 17       	cp	r18, r24
     e42:	39 07       	cpc	r19, r25
     e44:	4a 07       	cpc	r20, r26
     e46:	5b 07       	cpc	r21, r27
     e48:	08 f5       	brcc	.+66     	; 0xe8c <__stack+0x62d>
     e4a:	09 a9       	ldd	r16, Y+49	; 0x31
     e4c:	1a a9       	ldd	r17, Y+50	; 0x32
     e4e:	2b a9       	ldd	r18, Y+51	; 0x33
     e50:	3c a9       	ldd	r19, Y+52	; 0x34
     e52:	01 50       	subi	r16, 0x01	; 1
     e54:	10 40       	sbci	r17, 0x00	; 0
     e56:	20 40       	sbci	r18, 0x00	; 0
     e58:	30 40       	sbci	r19, 0x00	; 0
     e5a:	09 ab       	std	Y+49, r16	; 0x31
     e5c:	1a ab       	std	Y+50, r17	; 0x32
     e5e:	2b ab       	std	Y+51, r18	; 0x33
     e60:	3c ab       	std	Y+52, r19	; 0x34
     e62:	14 c0       	rjmp	.+40     	; 0xe8c <__stack+0x62d>
     e64:	66 24       	eor	r6, r6
     e66:	77 24       	eor	r7, r7
     e68:	43 01       	movw	r8, r6
     e6a:	21 e0       	ldi	r18, 0x01	; 1
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	40 e0       	ldi	r20, 0x00	; 0
     e70:	50 e0       	ldi	r21, 0x00	; 0
     e72:	29 ab       	std	Y+49, r18	; 0x31
     e74:	3a ab       	std	Y+50, r19	; 0x32
     e76:	4b ab       	std	Y+51, r20	; 0x33
     e78:	5c ab       	std	Y+52, r21	; 0x34
     e7a:	0b c0       	rjmp	.+22     	; 0xe92 <__stack+0x633>
     e7c:	66 24       	eor	r6, r6
     e7e:	77 24       	eor	r7, r7
     e80:	43 01       	movw	r8, r6
     e82:	19 aa       	std	Y+49, r1	; 0x31
     e84:	1a aa       	std	Y+50, r1	; 0x32
     e86:	1b aa       	std	Y+51, r1	; 0x33
     e88:	1c aa       	std	Y+52, r1	; 0x34
     e8a:	03 c0       	rjmp	.+6      	; 0xe92 <__stack+0x633>
     e8c:	66 24       	eor	r6, r6
     e8e:	77 24       	eor	r7, r7
     e90:	43 01       	movw	r8, r6
     e92:	fe 01       	movw	r30, r28
     e94:	71 96       	adiw	r30, 0x11	; 17
     e96:	88 e0       	ldi	r24, 0x08	; 8
     e98:	df 01       	movw	r26, r30
     e9a:	1d 92       	st	X+, r1
     e9c:	8a 95       	dec	r24
     e9e:	e9 f7       	brne	.-6      	; 0xe9a <__stack+0x63b>
     ea0:	a9 a8       	ldd	r10, Y+49	; 0x31
     ea2:	ba a8       	ldd	r11, Y+50	; 0x32
     ea4:	cb a8       	ldd	r12, Y+51	; 0x33
     ea6:	dc a8       	ldd	r13, Y+52	; 0x34
     ea8:	a9 8a       	std	Y+17, r10	; 0x11
     eaa:	ba 8a       	std	Y+18, r11	; 0x12
     eac:	cb 8a       	std	Y+19, r12	; 0x13
     eae:	dc 8a       	std	Y+20, r13	; 0x14
     eb0:	6d 8a       	std	Y+21, r6	; 0x15
     eb2:	7e 8a       	std	Y+22, r7	; 0x16
     eb4:	8f 8a       	std	Y+23, r8	; 0x17
     eb6:	98 8e       	std	Y+24, r9	; 0x18
     eb8:	29 a9       	ldd	r18, Y+49	; 0x31
     eba:	3a 89       	ldd	r19, Y+18	; 0x12
     ebc:	4b 89       	ldd	r20, Y+19	; 0x13
     ebe:	5c 89       	ldd	r21, Y+20	; 0x14
     ec0:	66 2d       	mov	r22, r6
     ec2:	7e 89       	ldd	r23, Y+22	; 0x16
     ec4:	8f 89       	ldd	r24, Y+23	; 0x17
     ec6:	98 8d       	ldd	r25, Y+24	; 0x18
     ec8:	c2 5a       	subi	r28, 0xA2	; 162
     eca:	df 4f       	sbci	r29, 0xFF	; 255
     ecc:	e2 e1       	ldi	r30, 0x12	; 18
     ece:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

00000ed2 <_fpadd_parts>:
     ed2:	a0 e0       	ldi	r26, 0x00	; 0
     ed4:	b0 e0       	ldi	r27, 0x00	; 0
     ed6:	ef e6       	ldi	r30, 0x6F	; 111
     ed8:	f7 e0       	ldi	r31, 0x07	; 7
     eda:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
     ede:	dc 01       	movw	r26, r24
     ee0:	2b 01       	movw	r4, r22
     ee2:	fa 01       	movw	r30, r20
     ee4:	9c 91       	ld	r25, X
     ee6:	92 30       	cpi	r25, 0x02	; 2
     ee8:	08 f4       	brcc	.+2      	; 0xeec <_fpadd_parts+0x1a>
     eea:	39 c1       	rjmp	.+626    	; 0x115e <_fpadd_parts+0x28c>
     eec:	eb 01       	movw	r28, r22
     eee:	88 81       	ld	r24, Y
     ef0:	82 30       	cpi	r24, 0x02	; 2
     ef2:	08 f4       	brcc	.+2      	; 0xef6 <_fpadd_parts+0x24>
     ef4:	33 c1       	rjmp	.+614    	; 0x115c <_fpadd_parts+0x28a>
     ef6:	94 30       	cpi	r25, 0x04	; 4
     ef8:	69 f4       	brne	.+26     	; 0xf14 <_fpadd_parts+0x42>
     efa:	84 30       	cpi	r24, 0x04	; 4
     efc:	09 f0       	breq	.+2      	; 0xf00 <_fpadd_parts+0x2e>
     efe:	2f c1       	rjmp	.+606    	; 0x115e <_fpadd_parts+0x28c>
     f00:	11 96       	adiw	r26, 0x01	; 1
     f02:	9c 91       	ld	r25, X
     f04:	11 97       	sbiw	r26, 0x01	; 1
     f06:	89 81       	ldd	r24, Y+1	; 0x01
     f08:	98 17       	cp	r25, r24
     f0a:	09 f4       	brne	.+2      	; 0xf0e <_fpadd_parts+0x3c>
     f0c:	28 c1       	rjmp	.+592    	; 0x115e <_fpadd_parts+0x28c>
     f0e:	a0 e6       	ldi	r26, 0x60	; 96
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	25 c1       	rjmp	.+586    	; 0x115e <_fpadd_parts+0x28c>
     f14:	84 30       	cpi	r24, 0x04	; 4
     f16:	09 f4       	brne	.+2      	; 0xf1a <_fpadd_parts+0x48>
     f18:	21 c1       	rjmp	.+578    	; 0x115c <_fpadd_parts+0x28a>
     f1a:	82 30       	cpi	r24, 0x02	; 2
     f1c:	a9 f4       	brne	.+42     	; 0xf48 <_fpadd_parts+0x76>
     f1e:	92 30       	cpi	r25, 0x02	; 2
     f20:	09 f0       	breq	.+2      	; 0xf24 <_fpadd_parts+0x52>
     f22:	1d c1       	rjmp	.+570    	; 0x115e <_fpadd_parts+0x28c>
     f24:	9a 01       	movw	r18, r20
     f26:	ad 01       	movw	r20, r26
     f28:	88 e0       	ldi	r24, 0x08	; 8
     f2a:	ea 01       	movw	r28, r20
     f2c:	09 90       	ld	r0, Y+
     f2e:	ae 01       	movw	r20, r28
     f30:	e9 01       	movw	r28, r18
     f32:	09 92       	st	Y+, r0
     f34:	9e 01       	movw	r18, r28
     f36:	81 50       	subi	r24, 0x01	; 1
     f38:	c1 f7       	brne	.-16     	; 0xf2a <_fpadd_parts+0x58>
     f3a:	e2 01       	movw	r28, r4
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	11 96       	adiw	r26, 0x01	; 1
     f40:	9c 91       	ld	r25, X
     f42:	89 23       	and	r24, r25
     f44:	81 83       	std	Z+1, r24	; 0x01
     f46:	08 c1       	rjmp	.+528    	; 0x1158 <_fpadd_parts+0x286>
     f48:	92 30       	cpi	r25, 0x02	; 2
     f4a:	09 f4       	brne	.+2      	; 0xf4e <_fpadd_parts+0x7c>
     f4c:	07 c1       	rjmp	.+526    	; 0x115c <_fpadd_parts+0x28a>
     f4e:	12 96       	adiw	r26, 0x02	; 2
     f50:	2d 90       	ld	r2, X+
     f52:	3c 90       	ld	r3, X
     f54:	13 97       	sbiw	r26, 0x03	; 3
     f56:	eb 01       	movw	r28, r22
     f58:	8a 81       	ldd	r24, Y+2	; 0x02
     f5a:	9b 81       	ldd	r25, Y+3	; 0x03
     f5c:	14 96       	adiw	r26, 0x04	; 4
     f5e:	ad 90       	ld	r10, X+
     f60:	bd 90       	ld	r11, X+
     f62:	cd 90       	ld	r12, X+
     f64:	dc 90       	ld	r13, X
     f66:	17 97       	sbiw	r26, 0x07	; 7
     f68:	ec 80       	ldd	r14, Y+4	; 0x04
     f6a:	fd 80       	ldd	r15, Y+5	; 0x05
     f6c:	0e 81       	ldd	r16, Y+6	; 0x06
     f6e:	1f 81       	ldd	r17, Y+7	; 0x07
     f70:	91 01       	movw	r18, r2
     f72:	28 1b       	sub	r18, r24
     f74:	39 0b       	sbc	r19, r25
     f76:	b9 01       	movw	r22, r18
     f78:	37 ff       	sbrs	r19, 7
     f7a:	04 c0       	rjmp	.+8      	; 0xf84 <_fpadd_parts+0xb2>
     f7c:	66 27       	eor	r22, r22
     f7e:	77 27       	eor	r23, r23
     f80:	62 1b       	sub	r22, r18
     f82:	73 0b       	sbc	r23, r19
     f84:	60 32       	cpi	r22, 0x20	; 32
     f86:	71 05       	cpc	r23, r1
     f88:	0c f0       	brlt	.+2      	; 0xf8c <_fpadd_parts+0xba>
     f8a:	61 c0       	rjmp	.+194    	; 0x104e <_fpadd_parts+0x17c>
     f8c:	12 16       	cp	r1, r18
     f8e:	13 06       	cpc	r1, r19
     f90:	6c f5       	brge	.+90     	; 0xfec <_fpadd_parts+0x11a>
     f92:	37 01       	movw	r6, r14
     f94:	48 01       	movw	r8, r16
     f96:	06 2e       	mov	r0, r22
     f98:	04 c0       	rjmp	.+8      	; 0xfa2 <_fpadd_parts+0xd0>
     f9a:	96 94       	lsr	r9
     f9c:	87 94       	ror	r8
     f9e:	77 94       	ror	r7
     fa0:	67 94       	ror	r6
     fa2:	0a 94       	dec	r0
     fa4:	d2 f7       	brpl	.-12     	; 0xf9a <_fpadd_parts+0xc8>
     fa6:	21 e0       	ldi	r18, 0x01	; 1
     fa8:	30 e0       	ldi	r19, 0x00	; 0
     faa:	40 e0       	ldi	r20, 0x00	; 0
     fac:	50 e0       	ldi	r21, 0x00	; 0
     fae:	04 c0       	rjmp	.+8      	; 0xfb8 <_fpadd_parts+0xe6>
     fb0:	22 0f       	add	r18, r18
     fb2:	33 1f       	adc	r19, r19
     fb4:	44 1f       	adc	r20, r20
     fb6:	55 1f       	adc	r21, r21
     fb8:	6a 95       	dec	r22
     fba:	d2 f7       	brpl	.-12     	; 0xfb0 <_fpadd_parts+0xde>
     fbc:	21 50       	subi	r18, 0x01	; 1
     fbe:	30 40       	sbci	r19, 0x00	; 0
     fc0:	40 40       	sbci	r20, 0x00	; 0
     fc2:	50 40       	sbci	r21, 0x00	; 0
     fc4:	2e 21       	and	r18, r14
     fc6:	3f 21       	and	r19, r15
     fc8:	40 23       	and	r20, r16
     fca:	51 23       	and	r21, r17
     fcc:	21 15       	cp	r18, r1
     fce:	31 05       	cpc	r19, r1
     fd0:	41 05       	cpc	r20, r1
     fd2:	51 05       	cpc	r21, r1
     fd4:	21 f0       	breq	.+8      	; 0xfde <_fpadd_parts+0x10c>
     fd6:	21 e0       	ldi	r18, 0x01	; 1
     fd8:	30 e0       	ldi	r19, 0x00	; 0
     fda:	40 e0       	ldi	r20, 0x00	; 0
     fdc:	50 e0       	ldi	r21, 0x00	; 0
     fde:	79 01       	movw	r14, r18
     fe0:	8a 01       	movw	r16, r20
     fe2:	e6 28       	or	r14, r6
     fe4:	f7 28       	or	r15, r7
     fe6:	08 29       	or	r16, r8
     fe8:	19 29       	or	r17, r9
     fea:	3c c0       	rjmp	.+120    	; 0x1064 <_fpadd_parts+0x192>
     fec:	23 2b       	or	r18, r19
     fee:	d1 f1       	breq	.+116    	; 0x1064 <_fpadd_parts+0x192>
     ff0:	26 0e       	add	r2, r22
     ff2:	37 1e       	adc	r3, r23
     ff4:	35 01       	movw	r6, r10
     ff6:	46 01       	movw	r8, r12
     ff8:	06 2e       	mov	r0, r22
     ffa:	04 c0       	rjmp	.+8      	; 0x1004 <_fpadd_parts+0x132>
     ffc:	96 94       	lsr	r9
     ffe:	87 94       	ror	r8
    1000:	77 94       	ror	r7
    1002:	67 94       	ror	r6
    1004:	0a 94       	dec	r0
    1006:	d2 f7       	brpl	.-12     	; 0xffc <_fpadd_parts+0x12a>
    1008:	21 e0       	ldi	r18, 0x01	; 1
    100a:	30 e0       	ldi	r19, 0x00	; 0
    100c:	40 e0       	ldi	r20, 0x00	; 0
    100e:	50 e0       	ldi	r21, 0x00	; 0
    1010:	04 c0       	rjmp	.+8      	; 0x101a <_fpadd_parts+0x148>
    1012:	22 0f       	add	r18, r18
    1014:	33 1f       	adc	r19, r19
    1016:	44 1f       	adc	r20, r20
    1018:	55 1f       	adc	r21, r21
    101a:	6a 95       	dec	r22
    101c:	d2 f7       	brpl	.-12     	; 0x1012 <_fpadd_parts+0x140>
    101e:	21 50       	subi	r18, 0x01	; 1
    1020:	30 40       	sbci	r19, 0x00	; 0
    1022:	40 40       	sbci	r20, 0x00	; 0
    1024:	50 40       	sbci	r21, 0x00	; 0
    1026:	2a 21       	and	r18, r10
    1028:	3b 21       	and	r19, r11
    102a:	4c 21       	and	r20, r12
    102c:	5d 21       	and	r21, r13
    102e:	21 15       	cp	r18, r1
    1030:	31 05       	cpc	r19, r1
    1032:	41 05       	cpc	r20, r1
    1034:	51 05       	cpc	r21, r1
    1036:	21 f0       	breq	.+8      	; 0x1040 <_fpadd_parts+0x16e>
    1038:	21 e0       	ldi	r18, 0x01	; 1
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	40 e0       	ldi	r20, 0x00	; 0
    103e:	50 e0       	ldi	r21, 0x00	; 0
    1040:	59 01       	movw	r10, r18
    1042:	6a 01       	movw	r12, r20
    1044:	a6 28       	or	r10, r6
    1046:	b7 28       	or	r11, r7
    1048:	c8 28       	or	r12, r8
    104a:	d9 28       	or	r13, r9
    104c:	0b c0       	rjmp	.+22     	; 0x1064 <_fpadd_parts+0x192>
    104e:	82 15       	cp	r24, r2
    1050:	93 05       	cpc	r25, r3
    1052:	2c f0       	brlt	.+10     	; 0x105e <_fpadd_parts+0x18c>
    1054:	1c 01       	movw	r2, r24
    1056:	aa 24       	eor	r10, r10
    1058:	bb 24       	eor	r11, r11
    105a:	65 01       	movw	r12, r10
    105c:	03 c0       	rjmp	.+6      	; 0x1064 <_fpadd_parts+0x192>
    105e:	ee 24       	eor	r14, r14
    1060:	ff 24       	eor	r15, r15
    1062:	87 01       	movw	r16, r14
    1064:	11 96       	adiw	r26, 0x01	; 1
    1066:	9c 91       	ld	r25, X
    1068:	d2 01       	movw	r26, r4
    106a:	11 96       	adiw	r26, 0x01	; 1
    106c:	8c 91       	ld	r24, X
    106e:	98 17       	cp	r25, r24
    1070:	09 f4       	brne	.+2      	; 0x1074 <_fpadd_parts+0x1a2>
    1072:	45 c0       	rjmp	.+138    	; 0x10fe <_fpadd_parts+0x22c>
    1074:	99 23       	and	r25, r25
    1076:	39 f0       	breq	.+14     	; 0x1086 <_fpadd_parts+0x1b4>
    1078:	a8 01       	movw	r20, r16
    107a:	97 01       	movw	r18, r14
    107c:	2a 19       	sub	r18, r10
    107e:	3b 09       	sbc	r19, r11
    1080:	4c 09       	sbc	r20, r12
    1082:	5d 09       	sbc	r21, r13
    1084:	06 c0       	rjmp	.+12     	; 0x1092 <_fpadd_parts+0x1c0>
    1086:	a6 01       	movw	r20, r12
    1088:	95 01       	movw	r18, r10
    108a:	2e 19       	sub	r18, r14
    108c:	3f 09       	sbc	r19, r15
    108e:	40 0b       	sbc	r20, r16
    1090:	51 0b       	sbc	r21, r17
    1092:	57 fd       	sbrc	r21, 7
    1094:	08 c0       	rjmp	.+16     	; 0x10a6 <_fpadd_parts+0x1d4>
    1096:	11 82       	std	Z+1, r1	; 0x01
    1098:	33 82       	std	Z+3, r3	; 0x03
    109a:	22 82       	std	Z+2, r2	; 0x02
    109c:	24 83       	std	Z+4, r18	; 0x04
    109e:	35 83       	std	Z+5, r19	; 0x05
    10a0:	46 83       	std	Z+6, r20	; 0x06
    10a2:	57 83       	std	Z+7, r21	; 0x07
    10a4:	1d c0       	rjmp	.+58     	; 0x10e0 <_fpadd_parts+0x20e>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	81 83       	std	Z+1, r24	; 0x01
    10aa:	33 82       	std	Z+3, r3	; 0x03
    10ac:	22 82       	std	Z+2, r2	; 0x02
    10ae:	88 27       	eor	r24, r24
    10b0:	99 27       	eor	r25, r25
    10b2:	dc 01       	movw	r26, r24
    10b4:	82 1b       	sub	r24, r18
    10b6:	93 0b       	sbc	r25, r19
    10b8:	a4 0b       	sbc	r26, r20
    10ba:	b5 0b       	sbc	r27, r21
    10bc:	84 83       	std	Z+4, r24	; 0x04
    10be:	95 83       	std	Z+5, r25	; 0x05
    10c0:	a6 83       	std	Z+6, r26	; 0x06
    10c2:	b7 83       	std	Z+7, r27	; 0x07
    10c4:	0d c0       	rjmp	.+26     	; 0x10e0 <_fpadd_parts+0x20e>
    10c6:	22 0f       	add	r18, r18
    10c8:	33 1f       	adc	r19, r19
    10ca:	44 1f       	adc	r20, r20
    10cc:	55 1f       	adc	r21, r21
    10ce:	24 83       	std	Z+4, r18	; 0x04
    10d0:	35 83       	std	Z+5, r19	; 0x05
    10d2:	46 83       	std	Z+6, r20	; 0x06
    10d4:	57 83       	std	Z+7, r21	; 0x07
    10d6:	82 81       	ldd	r24, Z+2	; 0x02
    10d8:	93 81       	ldd	r25, Z+3	; 0x03
    10da:	01 97       	sbiw	r24, 0x01	; 1
    10dc:	93 83       	std	Z+3, r25	; 0x03
    10de:	82 83       	std	Z+2, r24	; 0x02
    10e0:	24 81       	ldd	r18, Z+4	; 0x04
    10e2:	35 81       	ldd	r19, Z+5	; 0x05
    10e4:	46 81       	ldd	r20, Z+6	; 0x06
    10e6:	57 81       	ldd	r21, Z+7	; 0x07
    10e8:	da 01       	movw	r26, r20
    10ea:	c9 01       	movw	r24, r18
    10ec:	01 97       	sbiw	r24, 0x01	; 1
    10ee:	a1 09       	sbc	r26, r1
    10f0:	b1 09       	sbc	r27, r1
    10f2:	8f 5f       	subi	r24, 0xFF	; 255
    10f4:	9f 4f       	sbci	r25, 0xFF	; 255
    10f6:	af 4f       	sbci	r26, 0xFF	; 255
    10f8:	bf 43       	sbci	r27, 0x3F	; 63
    10fa:	28 f3       	brcs	.-54     	; 0x10c6 <_fpadd_parts+0x1f4>
    10fc:	0b c0       	rjmp	.+22     	; 0x1114 <_fpadd_parts+0x242>
    10fe:	91 83       	std	Z+1, r25	; 0x01
    1100:	33 82       	std	Z+3, r3	; 0x03
    1102:	22 82       	std	Z+2, r2	; 0x02
    1104:	ea 0c       	add	r14, r10
    1106:	fb 1c       	adc	r15, r11
    1108:	0c 1d       	adc	r16, r12
    110a:	1d 1d       	adc	r17, r13
    110c:	e4 82       	std	Z+4, r14	; 0x04
    110e:	f5 82       	std	Z+5, r15	; 0x05
    1110:	06 83       	std	Z+6, r16	; 0x06
    1112:	17 83       	std	Z+7, r17	; 0x07
    1114:	83 e0       	ldi	r24, 0x03	; 3
    1116:	80 83       	st	Z, r24
    1118:	24 81       	ldd	r18, Z+4	; 0x04
    111a:	35 81       	ldd	r19, Z+5	; 0x05
    111c:	46 81       	ldd	r20, Z+6	; 0x06
    111e:	57 81       	ldd	r21, Z+7	; 0x07
    1120:	57 ff       	sbrs	r21, 7
    1122:	1a c0       	rjmp	.+52     	; 0x1158 <_fpadd_parts+0x286>
    1124:	c9 01       	movw	r24, r18
    1126:	aa 27       	eor	r26, r26
    1128:	97 fd       	sbrc	r25, 7
    112a:	a0 95       	com	r26
    112c:	ba 2f       	mov	r27, r26
    112e:	81 70       	andi	r24, 0x01	; 1
    1130:	90 70       	andi	r25, 0x00	; 0
    1132:	a0 70       	andi	r26, 0x00	; 0
    1134:	b0 70       	andi	r27, 0x00	; 0
    1136:	56 95       	lsr	r21
    1138:	47 95       	ror	r20
    113a:	37 95       	ror	r19
    113c:	27 95       	ror	r18
    113e:	82 2b       	or	r24, r18
    1140:	93 2b       	or	r25, r19
    1142:	a4 2b       	or	r26, r20
    1144:	b5 2b       	or	r27, r21
    1146:	84 83       	std	Z+4, r24	; 0x04
    1148:	95 83       	std	Z+5, r25	; 0x05
    114a:	a6 83       	std	Z+6, r26	; 0x06
    114c:	b7 83       	std	Z+7, r27	; 0x07
    114e:	82 81       	ldd	r24, Z+2	; 0x02
    1150:	93 81       	ldd	r25, Z+3	; 0x03
    1152:	01 96       	adiw	r24, 0x01	; 1
    1154:	93 83       	std	Z+3, r25	; 0x03
    1156:	82 83       	std	Z+2, r24	; 0x02
    1158:	df 01       	movw	r26, r30
    115a:	01 c0       	rjmp	.+2      	; 0x115e <_fpadd_parts+0x28c>
    115c:	d2 01       	movw	r26, r4
    115e:	cd 01       	movw	r24, r26
    1160:	cd b7       	in	r28, 0x3d	; 61
    1162:	de b7       	in	r29, 0x3e	; 62
    1164:	e2 e1       	ldi	r30, 0x12	; 18
    1166:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

0000116a <__subsf3>:
    116a:	a0 e2       	ldi	r26, 0x20	; 32
    116c:	b0 e0       	ldi	r27, 0x00	; 0
    116e:	eb eb       	ldi	r30, 0xBB	; 187
    1170:	f8 e0       	ldi	r31, 0x08	; 8
    1172:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    1176:	69 83       	std	Y+1, r22	; 0x01
    1178:	7a 83       	std	Y+2, r23	; 0x02
    117a:	8b 83       	std	Y+3, r24	; 0x03
    117c:	9c 83       	std	Y+4, r25	; 0x04
    117e:	2d 83       	std	Y+5, r18	; 0x05
    1180:	3e 83       	std	Y+6, r19	; 0x06
    1182:	4f 83       	std	Y+7, r20	; 0x07
    1184:	58 87       	std	Y+8, r21	; 0x08
    1186:	e9 e0       	ldi	r30, 0x09	; 9
    1188:	ee 2e       	mov	r14, r30
    118a:	f1 2c       	mov	r15, r1
    118c:	ec 0e       	add	r14, r28
    118e:	fd 1e       	adc	r15, r29
    1190:	ce 01       	movw	r24, r28
    1192:	01 96       	adiw	r24, 0x01	; 1
    1194:	b7 01       	movw	r22, r14
    1196:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    119a:	8e 01       	movw	r16, r28
    119c:	0f 5e       	subi	r16, 0xEF	; 239
    119e:	1f 4f       	sbci	r17, 0xFF	; 255
    11a0:	ce 01       	movw	r24, r28
    11a2:	05 96       	adiw	r24, 0x05	; 5
    11a4:	b8 01       	movw	r22, r16
    11a6:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    11aa:	8a 89       	ldd	r24, Y+18	; 0x12
    11ac:	91 e0       	ldi	r25, 0x01	; 1
    11ae:	89 27       	eor	r24, r25
    11b0:	8a 8b       	std	Y+18, r24	; 0x12
    11b2:	c7 01       	movw	r24, r14
    11b4:	b8 01       	movw	r22, r16
    11b6:	ae 01       	movw	r20, r28
    11b8:	47 5e       	subi	r20, 0xE7	; 231
    11ba:	5f 4f       	sbci	r21, 0xFF	; 255
    11bc:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    11c0:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    11c4:	a0 96       	adiw	r28, 0x20	; 32
    11c6:	e6 e0       	ldi	r30, 0x06	; 6
    11c8:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

000011cc <__addsf3>:
    11cc:	a0 e2       	ldi	r26, 0x20	; 32
    11ce:	b0 e0       	ldi	r27, 0x00	; 0
    11d0:	ec ee       	ldi	r30, 0xEC	; 236
    11d2:	f8 e0       	ldi	r31, 0x08	; 8
    11d4:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    11d8:	69 83       	std	Y+1, r22	; 0x01
    11da:	7a 83       	std	Y+2, r23	; 0x02
    11dc:	8b 83       	std	Y+3, r24	; 0x03
    11de:	9c 83       	std	Y+4, r25	; 0x04
    11e0:	2d 83       	std	Y+5, r18	; 0x05
    11e2:	3e 83       	std	Y+6, r19	; 0x06
    11e4:	4f 83       	std	Y+7, r20	; 0x07
    11e6:	58 87       	std	Y+8, r21	; 0x08
    11e8:	f9 e0       	ldi	r31, 0x09	; 9
    11ea:	ef 2e       	mov	r14, r31
    11ec:	f1 2c       	mov	r15, r1
    11ee:	ec 0e       	add	r14, r28
    11f0:	fd 1e       	adc	r15, r29
    11f2:	ce 01       	movw	r24, r28
    11f4:	01 96       	adiw	r24, 0x01	; 1
    11f6:	b7 01       	movw	r22, r14
    11f8:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    11fc:	8e 01       	movw	r16, r28
    11fe:	0f 5e       	subi	r16, 0xEF	; 239
    1200:	1f 4f       	sbci	r17, 0xFF	; 255
    1202:	ce 01       	movw	r24, r28
    1204:	05 96       	adiw	r24, 0x05	; 5
    1206:	b8 01       	movw	r22, r16
    1208:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    120c:	c7 01       	movw	r24, r14
    120e:	b8 01       	movw	r22, r16
    1210:	ae 01       	movw	r20, r28
    1212:	47 5e       	subi	r20, 0xE7	; 231
    1214:	5f 4f       	sbci	r21, 0xFF	; 255
    1216:	0e 94 69 07 	call	0xed2	; 0xed2 <_fpadd_parts>
    121a:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    121e:	a0 96       	adiw	r28, 0x20	; 32
    1220:	e6 e0       	ldi	r30, 0x06	; 6
    1222:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00001226 <__mulsf3>:
    1226:	a0 e2       	ldi	r26, 0x20	; 32
    1228:	b0 e0       	ldi	r27, 0x00	; 0
    122a:	e9 e1       	ldi	r30, 0x19	; 25
    122c:	f9 e0       	ldi	r31, 0x09	; 9
    122e:	0c 94 07 24 	jmp	0x480e	; 0x480e <__prologue_saves__>
    1232:	69 83       	std	Y+1, r22	; 0x01
    1234:	7a 83       	std	Y+2, r23	; 0x02
    1236:	8b 83       	std	Y+3, r24	; 0x03
    1238:	9c 83       	std	Y+4, r25	; 0x04
    123a:	2d 83       	std	Y+5, r18	; 0x05
    123c:	3e 83       	std	Y+6, r19	; 0x06
    123e:	4f 83       	std	Y+7, r20	; 0x07
    1240:	58 87       	std	Y+8, r21	; 0x08
    1242:	ce 01       	movw	r24, r28
    1244:	01 96       	adiw	r24, 0x01	; 1
    1246:	be 01       	movw	r22, r28
    1248:	67 5f       	subi	r22, 0xF7	; 247
    124a:	7f 4f       	sbci	r23, 0xFF	; 255
    124c:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1250:	ce 01       	movw	r24, r28
    1252:	05 96       	adiw	r24, 0x05	; 5
    1254:	be 01       	movw	r22, r28
    1256:	6f 5e       	subi	r22, 0xEF	; 239
    1258:	7f 4f       	sbci	r23, 0xFF	; 255
    125a:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    125e:	99 85       	ldd	r25, Y+9	; 0x09
    1260:	92 30       	cpi	r25, 0x02	; 2
    1262:	88 f0       	brcs	.+34     	; 0x1286 <__mulsf3+0x60>
    1264:	89 89       	ldd	r24, Y+17	; 0x11
    1266:	82 30       	cpi	r24, 0x02	; 2
    1268:	c8 f0       	brcs	.+50     	; 0x129c <__mulsf3+0x76>
    126a:	94 30       	cpi	r25, 0x04	; 4
    126c:	19 f4       	brne	.+6      	; 0x1274 <__mulsf3+0x4e>
    126e:	82 30       	cpi	r24, 0x02	; 2
    1270:	51 f4       	brne	.+20     	; 0x1286 <__mulsf3+0x60>
    1272:	04 c0       	rjmp	.+8      	; 0x127c <__mulsf3+0x56>
    1274:	84 30       	cpi	r24, 0x04	; 4
    1276:	29 f4       	brne	.+10     	; 0x1282 <__mulsf3+0x5c>
    1278:	92 30       	cpi	r25, 0x02	; 2
    127a:	81 f4       	brne	.+32     	; 0x129c <__mulsf3+0x76>
    127c:	80 e6       	ldi	r24, 0x60	; 96
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	c6 c0       	rjmp	.+396    	; 0x140e <__mulsf3+0x1e8>
    1282:	92 30       	cpi	r25, 0x02	; 2
    1284:	49 f4       	brne	.+18     	; 0x1298 <__mulsf3+0x72>
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	9a 85       	ldd	r25, Y+10	; 0x0a
    128a:	8a 89       	ldd	r24, Y+18	; 0x12
    128c:	98 13       	cpse	r25, r24
    128e:	21 e0       	ldi	r18, 0x01	; 1
    1290:	2a 87       	std	Y+10, r18	; 0x0a
    1292:	ce 01       	movw	r24, r28
    1294:	09 96       	adiw	r24, 0x09	; 9
    1296:	bb c0       	rjmp	.+374    	; 0x140e <__mulsf3+0x1e8>
    1298:	82 30       	cpi	r24, 0x02	; 2
    129a:	49 f4       	brne	.+18     	; 0x12ae <__mulsf3+0x88>
    129c:	20 e0       	ldi	r18, 0x00	; 0
    129e:	9a 85       	ldd	r25, Y+10	; 0x0a
    12a0:	8a 89       	ldd	r24, Y+18	; 0x12
    12a2:	98 13       	cpse	r25, r24
    12a4:	21 e0       	ldi	r18, 0x01	; 1
    12a6:	2a 8b       	std	Y+18, r18	; 0x12
    12a8:	ce 01       	movw	r24, r28
    12aa:	41 96       	adiw	r24, 0x11	; 17
    12ac:	b0 c0       	rjmp	.+352    	; 0x140e <__mulsf3+0x1e8>
    12ae:	2d 84       	ldd	r2, Y+13	; 0x0d
    12b0:	3e 84       	ldd	r3, Y+14	; 0x0e
    12b2:	4f 84       	ldd	r4, Y+15	; 0x0f
    12b4:	58 88       	ldd	r5, Y+16	; 0x10
    12b6:	6d 88       	ldd	r6, Y+21	; 0x15
    12b8:	7e 88       	ldd	r7, Y+22	; 0x16
    12ba:	8f 88       	ldd	r8, Y+23	; 0x17
    12bc:	98 8c       	ldd	r9, Y+24	; 0x18
    12be:	ee 24       	eor	r14, r14
    12c0:	ff 24       	eor	r15, r15
    12c2:	87 01       	movw	r16, r14
    12c4:	aa 24       	eor	r10, r10
    12c6:	bb 24       	eor	r11, r11
    12c8:	65 01       	movw	r12, r10
    12ca:	40 e0       	ldi	r20, 0x00	; 0
    12cc:	50 e0       	ldi	r21, 0x00	; 0
    12ce:	60 e0       	ldi	r22, 0x00	; 0
    12d0:	70 e0       	ldi	r23, 0x00	; 0
    12d2:	e0 e0       	ldi	r30, 0x00	; 0
    12d4:	f0 e0       	ldi	r31, 0x00	; 0
    12d6:	c1 01       	movw	r24, r2
    12d8:	81 70       	andi	r24, 0x01	; 1
    12da:	90 70       	andi	r25, 0x00	; 0
    12dc:	89 2b       	or	r24, r25
    12de:	e9 f0       	breq	.+58     	; 0x131a <__mulsf3+0xf4>
    12e0:	e6 0c       	add	r14, r6
    12e2:	f7 1c       	adc	r15, r7
    12e4:	08 1d       	adc	r16, r8
    12e6:	19 1d       	adc	r17, r9
    12e8:	9a 01       	movw	r18, r20
    12ea:	ab 01       	movw	r20, r22
    12ec:	2a 0d       	add	r18, r10
    12ee:	3b 1d       	adc	r19, r11
    12f0:	4c 1d       	adc	r20, r12
    12f2:	5d 1d       	adc	r21, r13
    12f4:	80 e0       	ldi	r24, 0x00	; 0
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	a0 e0       	ldi	r26, 0x00	; 0
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e6 14       	cp	r14, r6
    12fe:	f7 04       	cpc	r15, r7
    1300:	08 05       	cpc	r16, r8
    1302:	19 05       	cpc	r17, r9
    1304:	20 f4       	brcc	.+8      	; 0x130e <__mulsf3+0xe8>
    1306:	81 e0       	ldi	r24, 0x01	; 1
    1308:	90 e0       	ldi	r25, 0x00	; 0
    130a:	a0 e0       	ldi	r26, 0x00	; 0
    130c:	b0 e0       	ldi	r27, 0x00	; 0
    130e:	ba 01       	movw	r22, r20
    1310:	a9 01       	movw	r20, r18
    1312:	48 0f       	add	r20, r24
    1314:	59 1f       	adc	r21, r25
    1316:	6a 1f       	adc	r22, r26
    1318:	7b 1f       	adc	r23, r27
    131a:	aa 0c       	add	r10, r10
    131c:	bb 1c       	adc	r11, r11
    131e:	cc 1c       	adc	r12, r12
    1320:	dd 1c       	adc	r13, r13
    1322:	97 fe       	sbrs	r9, 7
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <__mulsf3+0x110>
    1326:	81 e0       	ldi	r24, 0x01	; 1
    1328:	90 e0       	ldi	r25, 0x00	; 0
    132a:	a0 e0       	ldi	r26, 0x00	; 0
    132c:	b0 e0       	ldi	r27, 0x00	; 0
    132e:	a8 2a       	or	r10, r24
    1330:	b9 2a       	or	r11, r25
    1332:	ca 2a       	or	r12, r26
    1334:	db 2a       	or	r13, r27
    1336:	31 96       	adiw	r30, 0x01	; 1
    1338:	e0 32       	cpi	r30, 0x20	; 32
    133a:	f1 05       	cpc	r31, r1
    133c:	49 f0       	breq	.+18     	; 0x1350 <__mulsf3+0x12a>
    133e:	66 0c       	add	r6, r6
    1340:	77 1c       	adc	r7, r7
    1342:	88 1c       	adc	r8, r8
    1344:	99 1c       	adc	r9, r9
    1346:	56 94       	lsr	r5
    1348:	47 94       	ror	r4
    134a:	37 94       	ror	r3
    134c:	27 94       	ror	r2
    134e:	c3 cf       	rjmp	.-122    	; 0x12d6 <__mulsf3+0xb0>
    1350:	fa 85       	ldd	r31, Y+10	; 0x0a
    1352:	ea 89       	ldd	r30, Y+18	; 0x12
    1354:	2b 89       	ldd	r18, Y+19	; 0x13
    1356:	3c 89       	ldd	r19, Y+20	; 0x14
    1358:	8b 85       	ldd	r24, Y+11	; 0x0b
    135a:	9c 85       	ldd	r25, Y+12	; 0x0c
    135c:	28 0f       	add	r18, r24
    135e:	39 1f       	adc	r19, r25
    1360:	2e 5f       	subi	r18, 0xFE	; 254
    1362:	3f 4f       	sbci	r19, 0xFF	; 255
    1364:	17 c0       	rjmp	.+46     	; 0x1394 <__mulsf3+0x16e>
    1366:	ca 01       	movw	r24, r20
    1368:	81 70       	andi	r24, 0x01	; 1
    136a:	90 70       	andi	r25, 0x00	; 0
    136c:	89 2b       	or	r24, r25
    136e:	61 f0       	breq	.+24     	; 0x1388 <__mulsf3+0x162>
    1370:	16 95       	lsr	r17
    1372:	07 95       	ror	r16
    1374:	f7 94       	ror	r15
    1376:	e7 94       	ror	r14
    1378:	80 e0       	ldi	r24, 0x00	; 0
    137a:	90 e0       	ldi	r25, 0x00	; 0
    137c:	a0 e0       	ldi	r26, 0x00	; 0
    137e:	b0 e8       	ldi	r27, 0x80	; 128
    1380:	e8 2a       	or	r14, r24
    1382:	f9 2a       	or	r15, r25
    1384:	0a 2b       	or	r16, r26
    1386:	1b 2b       	or	r17, r27
    1388:	76 95       	lsr	r23
    138a:	67 95       	ror	r22
    138c:	57 95       	ror	r21
    138e:	47 95       	ror	r20
    1390:	2f 5f       	subi	r18, 0xFF	; 255
    1392:	3f 4f       	sbci	r19, 0xFF	; 255
    1394:	77 fd       	sbrc	r23, 7
    1396:	e7 cf       	rjmp	.-50     	; 0x1366 <__mulsf3+0x140>
    1398:	0c c0       	rjmp	.+24     	; 0x13b2 <__mulsf3+0x18c>
    139a:	44 0f       	add	r20, r20
    139c:	55 1f       	adc	r21, r21
    139e:	66 1f       	adc	r22, r22
    13a0:	77 1f       	adc	r23, r23
    13a2:	17 fd       	sbrc	r17, 7
    13a4:	41 60       	ori	r20, 0x01	; 1
    13a6:	ee 0c       	add	r14, r14
    13a8:	ff 1c       	adc	r15, r15
    13aa:	00 1f       	adc	r16, r16
    13ac:	11 1f       	adc	r17, r17
    13ae:	21 50       	subi	r18, 0x01	; 1
    13b0:	30 40       	sbci	r19, 0x00	; 0
    13b2:	40 30       	cpi	r20, 0x00	; 0
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	59 07       	cpc	r21, r25
    13b8:	90 e0       	ldi	r25, 0x00	; 0
    13ba:	69 07       	cpc	r22, r25
    13bc:	90 e4       	ldi	r25, 0x40	; 64
    13be:	79 07       	cpc	r23, r25
    13c0:	60 f3       	brcs	.-40     	; 0x139a <__mulsf3+0x174>
    13c2:	2b 8f       	std	Y+27, r18	; 0x1b
    13c4:	3c 8f       	std	Y+28, r19	; 0x1c
    13c6:	db 01       	movw	r26, r22
    13c8:	ca 01       	movw	r24, r20
    13ca:	8f 77       	andi	r24, 0x7F	; 127
    13cc:	90 70       	andi	r25, 0x00	; 0
    13ce:	a0 70       	andi	r26, 0x00	; 0
    13d0:	b0 70       	andi	r27, 0x00	; 0
    13d2:	80 34       	cpi	r24, 0x40	; 64
    13d4:	91 05       	cpc	r25, r1
    13d6:	a1 05       	cpc	r26, r1
    13d8:	b1 05       	cpc	r27, r1
    13da:	61 f4       	brne	.+24     	; 0x13f4 <__mulsf3+0x1ce>
    13dc:	47 fd       	sbrc	r20, 7
    13de:	0a c0       	rjmp	.+20     	; 0x13f4 <__mulsf3+0x1ce>
    13e0:	e1 14       	cp	r14, r1
    13e2:	f1 04       	cpc	r15, r1
    13e4:	01 05       	cpc	r16, r1
    13e6:	11 05       	cpc	r17, r1
    13e8:	29 f0       	breq	.+10     	; 0x13f4 <__mulsf3+0x1ce>
    13ea:	40 5c       	subi	r20, 0xC0	; 192
    13ec:	5f 4f       	sbci	r21, 0xFF	; 255
    13ee:	6f 4f       	sbci	r22, 0xFF	; 255
    13f0:	7f 4f       	sbci	r23, 0xFF	; 255
    13f2:	40 78       	andi	r20, 0x80	; 128
    13f4:	1a 8e       	std	Y+26, r1	; 0x1a
    13f6:	fe 17       	cp	r31, r30
    13f8:	11 f0       	breq	.+4      	; 0x13fe <__mulsf3+0x1d8>
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	8a 8f       	std	Y+26, r24	; 0x1a
    13fe:	4d 8f       	std	Y+29, r20	; 0x1d
    1400:	5e 8f       	std	Y+30, r21	; 0x1e
    1402:	6f 8f       	std	Y+31, r22	; 0x1f
    1404:	78 a3       	std	Y+32, r23	; 0x20
    1406:	83 e0       	ldi	r24, 0x03	; 3
    1408:	89 8f       	std	Y+25, r24	; 0x19
    140a:	ce 01       	movw	r24, r28
    140c:	49 96       	adiw	r24, 0x19	; 25
    140e:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    1412:	a0 96       	adiw	r28, 0x20	; 32
    1414:	e2 e1       	ldi	r30, 0x12	; 18
    1416:	0c 94 23 24 	jmp	0x4846	; 0x4846 <__epilogue_restores__>

0000141a <__divsf3>:
    141a:	a8 e1       	ldi	r26, 0x18	; 24
    141c:	b0 e0       	ldi	r27, 0x00	; 0
    141e:	e3 e1       	ldi	r30, 0x13	; 19
    1420:	fa e0       	ldi	r31, 0x0A	; 10
    1422:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__prologue_saves__+0x10>
    1426:	69 83       	std	Y+1, r22	; 0x01
    1428:	7a 83       	std	Y+2, r23	; 0x02
    142a:	8b 83       	std	Y+3, r24	; 0x03
    142c:	9c 83       	std	Y+4, r25	; 0x04
    142e:	2d 83       	std	Y+5, r18	; 0x05
    1430:	3e 83       	std	Y+6, r19	; 0x06
    1432:	4f 83       	std	Y+7, r20	; 0x07
    1434:	58 87       	std	Y+8, r21	; 0x08
    1436:	b9 e0       	ldi	r27, 0x09	; 9
    1438:	eb 2e       	mov	r14, r27
    143a:	f1 2c       	mov	r15, r1
    143c:	ec 0e       	add	r14, r28
    143e:	fd 1e       	adc	r15, r29
    1440:	ce 01       	movw	r24, r28
    1442:	01 96       	adiw	r24, 0x01	; 1
    1444:	b7 01       	movw	r22, r14
    1446:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    144a:	8e 01       	movw	r16, r28
    144c:	0f 5e       	subi	r16, 0xEF	; 239
    144e:	1f 4f       	sbci	r17, 0xFF	; 255
    1450:	ce 01       	movw	r24, r28
    1452:	05 96       	adiw	r24, 0x05	; 5
    1454:	b8 01       	movw	r22, r16
    1456:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    145a:	29 85       	ldd	r18, Y+9	; 0x09
    145c:	22 30       	cpi	r18, 0x02	; 2
    145e:	08 f4       	brcc	.+2      	; 0x1462 <__divsf3+0x48>
    1460:	7e c0       	rjmp	.+252    	; 0x155e <__divsf3+0x144>
    1462:	39 89       	ldd	r19, Y+17	; 0x11
    1464:	32 30       	cpi	r19, 0x02	; 2
    1466:	10 f4       	brcc	.+4      	; 0x146c <__divsf3+0x52>
    1468:	b8 01       	movw	r22, r16
    146a:	7c c0       	rjmp	.+248    	; 0x1564 <__divsf3+0x14a>
    146c:	8a 85       	ldd	r24, Y+10	; 0x0a
    146e:	9a 89       	ldd	r25, Y+18	; 0x12
    1470:	89 27       	eor	r24, r25
    1472:	8a 87       	std	Y+10, r24	; 0x0a
    1474:	24 30       	cpi	r18, 0x04	; 4
    1476:	11 f0       	breq	.+4      	; 0x147c <__divsf3+0x62>
    1478:	22 30       	cpi	r18, 0x02	; 2
    147a:	31 f4       	brne	.+12     	; 0x1488 <__divsf3+0x6e>
    147c:	23 17       	cp	r18, r19
    147e:	09 f0       	breq	.+2      	; 0x1482 <__divsf3+0x68>
    1480:	6e c0       	rjmp	.+220    	; 0x155e <__divsf3+0x144>
    1482:	60 e6       	ldi	r22, 0x60	; 96
    1484:	70 e0       	ldi	r23, 0x00	; 0
    1486:	6e c0       	rjmp	.+220    	; 0x1564 <__divsf3+0x14a>
    1488:	34 30       	cpi	r19, 0x04	; 4
    148a:	39 f4       	brne	.+14     	; 0x149a <__divsf3+0x80>
    148c:	1d 86       	std	Y+13, r1	; 0x0d
    148e:	1e 86       	std	Y+14, r1	; 0x0e
    1490:	1f 86       	std	Y+15, r1	; 0x0f
    1492:	18 8a       	std	Y+16, r1	; 0x10
    1494:	1c 86       	std	Y+12, r1	; 0x0c
    1496:	1b 86       	std	Y+11, r1	; 0x0b
    1498:	04 c0       	rjmp	.+8      	; 0x14a2 <__divsf3+0x88>
    149a:	32 30       	cpi	r19, 0x02	; 2
    149c:	21 f4       	brne	.+8      	; 0x14a6 <__divsf3+0x8c>
    149e:	84 e0       	ldi	r24, 0x04	; 4
    14a0:	89 87       	std	Y+9, r24	; 0x09
    14a2:	b7 01       	movw	r22, r14
    14a4:	5f c0       	rjmp	.+190    	; 0x1564 <__divsf3+0x14a>
    14a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    14a8:	3c 85       	ldd	r19, Y+12	; 0x0c
    14aa:	8b 89       	ldd	r24, Y+19	; 0x13
    14ac:	9c 89       	ldd	r25, Y+20	; 0x14
    14ae:	28 1b       	sub	r18, r24
    14b0:	39 0b       	sbc	r19, r25
    14b2:	3c 87       	std	Y+12, r19	; 0x0c
    14b4:	2b 87       	std	Y+11, r18	; 0x0b
    14b6:	ed 84       	ldd	r14, Y+13	; 0x0d
    14b8:	fe 84       	ldd	r15, Y+14	; 0x0e
    14ba:	0f 85       	ldd	r16, Y+15	; 0x0f
    14bc:	18 89       	ldd	r17, Y+16	; 0x10
    14be:	ad 88       	ldd	r10, Y+21	; 0x15
    14c0:	be 88       	ldd	r11, Y+22	; 0x16
    14c2:	cf 88       	ldd	r12, Y+23	; 0x17
    14c4:	d8 8c       	ldd	r13, Y+24	; 0x18
    14c6:	ea 14       	cp	r14, r10
    14c8:	fb 04       	cpc	r15, r11
    14ca:	0c 05       	cpc	r16, r12
    14cc:	1d 05       	cpc	r17, r13
    14ce:	40 f4       	brcc	.+16     	; 0x14e0 <__divsf3+0xc6>
    14d0:	ee 0c       	add	r14, r14
    14d2:	ff 1c       	adc	r15, r15
    14d4:	00 1f       	adc	r16, r16
    14d6:	11 1f       	adc	r17, r17
    14d8:	21 50       	subi	r18, 0x01	; 1
    14da:	30 40       	sbci	r19, 0x00	; 0
    14dc:	3c 87       	std	Y+12, r19	; 0x0c
    14de:	2b 87       	std	Y+11, r18	; 0x0b
    14e0:	20 e0       	ldi	r18, 0x00	; 0
    14e2:	30 e0       	ldi	r19, 0x00	; 0
    14e4:	40 e0       	ldi	r20, 0x00	; 0
    14e6:	50 e0       	ldi	r21, 0x00	; 0
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	a0 e0       	ldi	r26, 0x00	; 0
    14ee:	b0 e4       	ldi	r27, 0x40	; 64
    14f0:	60 e0       	ldi	r22, 0x00	; 0
    14f2:	70 e0       	ldi	r23, 0x00	; 0
    14f4:	ea 14       	cp	r14, r10
    14f6:	fb 04       	cpc	r15, r11
    14f8:	0c 05       	cpc	r16, r12
    14fa:	1d 05       	cpc	r17, r13
    14fc:	40 f0       	brcs	.+16     	; 0x150e <__divsf3+0xf4>
    14fe:	28 2b       	or	r18, r24
    1500:	39 2b       	or	r19, r25
    1502:	4a 2b       	or	r20, r26
    1504:	5b 2b       	or	r21, r27
    1506:	ea 18       	sub	r14, r10
    1508:	fb 08       	sbc	r15, r11
    150a:	0c 09       	sbc	r16, r12
    150c:	1d 09       	sbc	r17, r13
    150e:	b6 95       	lsr	r27
    1510:	a7 95       	ror	r26
    1512:	97 95       	ror	r25
    1514:	87 95       	ror	r24
    1516:	ee 0c       	add	r14, r14
    1518:	ff 1c       	adc	r15, r15
    151a:	00 1f       	adc	r16, r16
    151c:	11 1f       	adc	r17, r17
    151e:	6f 5f       	subi	r22, 0xFF	; 255
    1520:	7f 4f       	sbci	r23, 0xFF	; 255
    1522:	6f 31       	cpi	r22, 0x1F	; 31
    1524:	71 05       	cpc	r23, r1
    1526:	31 f7       	brne	.-52     	; 0x14f4 <__divsf3+0xda>
    1528:	da 01       	movw	r26, r20
    152a:	c9 01       	movw	r24, r18
    152c:	8f 77       	andi	r24, 0x7F	; 127
    152e:	90 70       	andi	r25, 0x00	; 0
    1530:	a0 70       	andi	r26, 0x00	; 0
    1532:	b0 70       	andi	r27, 0x00	; 0
    1534:	80 34       	cpi	r24, 0x40	; 64
    1536:	91 05       	cpc	r25, r1
    1538:	a1 05       	cpc	r26, r1
    153a:	b1 05       	cpc	r27, r1
    153c:	61 f4       	brne	.+24     	; 0x1556 <__divsf3+0x13c>
    153e:	27 fd       	sbrc	r18, 7
    1540:	0a c0       	rjmp	.+20     	; 0x1556 <__divsf3+0x13c>
    1542:	e1 14       	cp	r14, r1
    1544:	f1 04       	cpc	r15, r1
    1546:	01 05       	cpc	r16, r1
    1548:	11 05       	cpc	r17, r1
    154a:	29 f0       	breq	.+10     	; 0x1556 <__divsf3+0x13c>
    154c:	20 5c       	subi	r18, 0xC0	; 192
    154e:	3f 4f       	sbci	r19, 0xFF	; 255
    1550:	4f 4f       	sbci	r20, 0xFF	; 255
    1552:	5f 4f       	sbci	r21, 0xFF	; 255
    1554:	20 78       	andi	r18, 0x80	; 128
    1556:	2d 87       	std	Y+13, r18	; 0x0d
    1558:	3e 87       	std	Y+14, r19	; 0x0e
    155a:	4f 87       	std	Y+15, r20	; 0x0f
    155c:	58 8b       	std	Y+16, r21	; 0x10
    155e:	be 01       	movw	r22, r28
    1560:	67 5f       	subi	r22, 0xF7	; 247
    1562:	7f 4f       	sbci	r23, 0xFF	; 255
    1564:	cb 01       	movw	r24, r22
    1566:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    156a:	68 96       	adiw	r28, 0x18	; 24
    156c:	ea e0       	ldi	r30, 0x0A	; 10
    156e:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__epilogue_restores__+0x10>

00001572 <__gtsf2>:
    1572:	a8 e1       	ldi	r26, 0x18	; 24
    1574:	b0 e0       	ldi	r27, 0x00	; 0
    1576:	ef eb       	ldi	r30, 0xBF	; 191
    1578:	fa e0       	ldi	r31, 0x0A	; 10
    157a:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    157e:	69 83       	std	Y+1, r22	; 0x01
    1580:	7a 83       	std	Y+2, r23	; 0x02
    1582:	8b 83       	std	Y+3, r24	; 0x03
    1584:	9c 83       	std	Y+4, r25	; 0x04
    1586:	2d 83       	std	Y+5, r18	; 0x05
    1588:	3e 83       	std	Y+6, r19	; 0x06
    158a:	4f 83       	std	Y+7, r20	; 0x07
    158c:	58 87       	std	Y+8, r21	; 0x08
    158e:	89 e0       	ldi	r24, 0x09	; 9
    1590:	e8 2e       	mov	r14, r24
    1592:	f1 2c       	mov	r15, r1
    1594:	ec 0e       	add	r14, r28
    1596:	fd 1e       	adc	r15, r29
    1598:	ce 01       	movw	r24, r28
    159a:	01 96       	adiw	r24, 0x01	; 1
    159c:	b7 01       	movw	r22, r14
    159e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    15a2:	8e 01       	movw	r16, r28
    15a4:	0f 5e       	subi	r16, 0xEF	; 239
    15a6:	1f 4f       	sbci	r17, 0xFF	; 255
    15a8:	ce 01       	movw	r24, r28
    15aa:	05 96       	adiw	r24, 0x05	; 5
    15ac:	b8 01       	movw	r22, r16
    15ae:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    15b2:	89 85       	ldd	r24, Y+9	; 0x09
    15b4:	82 30       	cpi	r24, 0x02	; 2
    15b6:	40 f0       	brcs	.+16     	; 0x15c8 <__gtsf2+0x56>
    15b8:	89 89       	ldd	r24, Y+17	; 0x11
    15ba:	82 30       	cpi	r24, 0x02	; 2
    15bc:	28 f0       	brcs	.+10     	; 0x15c8 <__gtsf2+0x56>
    15be:	c7 01       	movw	r24, r14
    15c0:	b8 01       	movw	r22, r16
    15c2:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    15c6:	01 c0       	rjmp	.+2      	; 0x15ca <__gtsf2+0x58>
    15c8:	8f ef       	ldi	r24, 0xFF	; 255
    15ca:	68 96       	adiw	r28, 0x18	; 24
    15cc:	e6 e0       	ldi	r30, 0x06	; 6
    15ce:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

000015d2 <__gesf2>:
    15d2:	a8 e1       	ldi	r26, 0x18	; 24
    15d4:	b0 e0       	ldi	r27, 0x00	; 0
    15d6:	ef ee       	ldi	r30, 0xEF	; 239
    15d8:	fa e0       	ldi	r31, 0x0A	; 10
    15da:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    15de:	69 83       	std	Y+1, r22	; 0x01
    15e0:	7a 83       	std	Y+2, r23	; 0x02
    15e2:	8b 83       	std	Y+3, r24	; 0x03
    15e4:	9c 83       	std	Y+4, r25	; 0x04
    15e6:	2d 83       	std	Y+5, r18	; 0x05
    15e8:	3e 83       	std	Y+6, r19	; 0x06
    15ea:	4f 83       	std	Y+7, r20	; 0x07
    15ec:	58 87       	std	Y+8, r21	; 0x08
    15ee:	89 e0       	ldi	r24, 0x09	; 9
    15f0:	e8 2e       	mov	r14, r24
    15f2:	f1 2c       	mov	r15, r1
    15f4:	ec 0e       	add	r14, r28
    15f6:	fd 1e       	adc	r15, r29
    15f8:	ce 01       	movw	r24, r28
    15fa:	01 96       	adiw	r24, 0x01	; 1
    15fc:	b7 01       	movw	r22, r14
    15fe:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1602:	8e 01       	movw	r16, r28
    1604:	0f 5e       	subi	r16, 0xEF	; 239
    1606:	1f 4f       	sbci	r17, 0xFF	; 255
    1608:	ce 01       	movw	r24, r28
    160a:	05 96       	adiw	r24, 0x05	; 5
    160c:	b8 01       	movw	r22, r16
    160e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1612:	89 85       	ldd	r24, Y+9	; 0x09
    1614:	82 30       	cpi	r24, 0x02	; 2
    1616:	40 f0       	brcs	.+16     	; 0x1628 <__gesf2+0x56>
    1618:	89 89       	ldd	r24, Y+17	; 0x11
    161a:	82 30       	cpi	r24, 0x02	; 2
    161c:	28 f0       	brcs	.+10     	; 0x1628 <__gesf2+0x56>
    161e:	c7 01       	movw	r24, r14
    1620:	b8 01       	movw	r22, r16
    1622:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    1626:	01 c0       	rjmp	.+2      	; 0x162a <__gesf2+0x58>
    1628:	8f ef       	ldi	r24, 0xFF	; 255
    162a:	68 96       	adiw	r28, 0x18	; 24
    162c:	e6 e0       	ldi	r30, 0x06	; 6
    162e:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00001632 <__ltsf2>:
    1632:	a8 e1       	ldi	r26, 0x18	; 24
    1634:	b0 e0       	ldi	r27, 0x00	; 0
    1636:	ef e1       	ldi	r30, 0x1F	; 31
    1638:	fb e0       	ldi	r31, 0x0B	; 11
    163a:	0c 94 13 24 	jmp	0x4826	; 0x4826 <__prologue_saves__+0x18>
    163e:	69 83       	std	Y+1, r22	; 0x01
    1640:	7a 83       	std	Y+2, r23	; 0x02
    1642:	8b 83       	std	Y+3, r24	; 0x03
    1644:	9c 83       	std	Y+4, r25	; 0x04
    1646:	2d 83       	std	Y+5, r18	; 0x05
    1648:	3e 83       	std	Y+6, r19	; 0x06
    164a:	4f 83       	std	Y+7, r20	; 0x07
    164c:	58 87       	std	Y+8, r21	; 0x08
    164e:	89 e0       	ldi	r24, 0x09	; 9
    1650:	e8 2e       	mov	r14, r24
    1652:	f1 2c       	mov	r15, r1
    1654:	ec 0e       	add	r14, r28
    1656:	fd 1e       	adc	r15, r29
    1658:	ce 01       	movw	r24, r28
    165a:	01 96       	adiw	r24, 0x01	; 1
    165c:	b7 01       	movw	r22, r14
    165e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1662:	8e 01       	movw	r16, r28
    1664:	0f 5e       	subi	r16, 0xEF	; 239
    1666:	1f 4f       	sbci	r17, 0xFF	; 255
    1668:	ce 01       	movw	r24, r28
    166a:	05 96       	adiw	r24, 0x05	; 5
    166c:	b8 01       	movw	r22, r16
    166e:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    1672:	89 85       	ldd	r24, Y+9	; 0x09
    1674:	82 30       	cpi	r24, 0x02	; 2
    1676:	40 f0       	brcs	.+16     	; 0x1688 <__ltsf2+0x56>
    1678:	89 89       	ldd	r24, Y+17	; 0x11
    167a:	82 30       	cpi	r24, 0x02	; 2
    167c:	28 f0       	brcs	.+10     	; 0x1688 <__ltsf2+0x56>
    167e:	c7 01       	movw	r24, r14
    1680:	b8 01       	movw	r22, r16
    1682:	0e 94 b2 0d 	call	0x1b64	; 0x1b64 <__fpcmp_parts_f>
    1686:	01 c0       	rjmp	.+2      	; 0x168a <__ltsf2+0x58>
    1688:	81 e0       	ldi	r24, 0x01	; 1
    168a:	68 96       	adiw	r28, 0x18	; 24
    168c:	e6 e0       	ldi	r30, 0x06	; 6
    168e:	0c 94 2f 24 	jmp	0x485e	; 0x485e <__epilogue_restores__+0x18>

00001692 <__fixsfsi>:
    1692:	ac e0       	ldi	r26, 0x0C	; 12
    1694:	b0 e0       	ldi	r27, 0x00	; 0
    1696:	ef e4       	ldi	r30, 0x4F	; 79
    1698:	fb e0       	ldi	r31, 0x0B	; 11
    169a:	0c 94 17 24 	jmp	0x482e	; 0x482e <__prologue_saves__+0x20>
    169e:	69 83       	std	Y+1, r22	; 0x01
    16a0:	7a 83       	std	Y+2, r23	; 0x02
    16a2:	8b 83       	std	Y+3, r24	; 0x03
    16a4:	9c 83       	std	Y+4, r25	; 0x04
    16a6:	ce 01       	movw	r24, r28
    16a8:	01 96       	adiw	r24, 0x01	; 1
    16aa:	be 01       	movw	r22, r28
    16ac:	6b 5f       	subi	r22, 0xFB	; 251
    16ae:	7f 4f       	sbci	r23, 0xFF	; 255
    16b0:	0e 94 3a 0d 	call	0x1a74	; 0x1a74 <__unpack_f>
    16b4:	8d 81       	ldd	r24, Y+5	; 0x05
    16b6:	82 30       	cpi	r24, 0x02	; 2
    16b8:	61 f1       	breq	.+88     	; 0x1712 <__fixsfsi+0x80>
    16ba:	82 30       	cpi	r24, 0x02	; 2
    16bc:	50 f1       	brcs	.+84     	; 0x1712 <__fixsfsi+0x80>
    16be:	84 30       	cpi	r24, 0x04	; 4
    16c0:	21 f4       	brne	.+8      	; 0x16ca <__fixsfsi+0x38>
    16c2:	8e 81       	ldd	r24, Y+6	; 0x06
    16c4:	88 23       	and	r24, r24
    16c6:	51 f1       	breq	.+84     	; 0x171c <__fixsfsi+0x8a>
    16c8:	2e c0       	rjmp	.+92     	; 0x1726 <__fixsfsi+0x94>
    16ca:	2f 81       	ldd	r18, Y+7	; 0x07
    16cc:	38 85       	ldd	r19, Y+8	; 0x08
    16ce:	37 fd       	sbrc	r19, 7
    16d0:	20 c0       	rjmp	.+64     	; 0x1712 <__fixsfsi+0x80>
    16d2:	6e 81       	ldd	r22, Y+6	; 0x06
    16d4:	2f 31       	cpi	r18, 0x1F	; 31
    16d6:	31 05       	cpc	r19, r1
    16d8:	1c f0       	brlt	.+6      	; 0x16e0 <__fixsfsi+0x4e>
    16da:	66 23       	and	r22, r22
    16dc:	f9 f0       	breq	.+62     	; 0x171c <__fixsfsi+0x8a>
    16de:	23 c0       	rjmp	.+70     	; 0x1726 <__fixsfsi+0x94>
    16e0:	8e e1       	ldi	r24, 0x1E	; 30
    16e2:	90 e0       	ldi	r25, 0x00	; 0
    16e4:	82 1b       	sub	r24, r18
    16e6:	93 0b       	sbc	r25, r19
    16e8:	29 85       	ldd	r18, Y+9	; 0x09
    16ea:	3a 85       	ldd	r19, Y+10	; 0x0a
    16ec:	4b 85       	ldd	r20, Y+11	; 0x0b
    16ee:	5c 85       	ldd	r21, Y+12	; 0x0c
    16f0:	04 c0       	rjmp	.+8      	; 0x16fa <__fixsfsi+0x68>
    16f2:	56 95       	lsr	r21
    16f4:	47 95       	ror	r20
    16f6:	37 95       	ror	r19
    16f8:	27 95       	ror	r18
    16fa:	8a 95       	dec	r24
    16fc:	d2 f7       	brpl	.-12     	; 0x16f2 <__fixsfsi+0x60>
    16fe:	66 23       	and	r22, r22
    1700:	b1 f0       	breq	.+44     	; 0x172e <__fixsfsi+0x9c>
    1702:	50 95       	com	r21
    1704:	40 95       	com	r20
    1706:	30 95       	com	r19
    1708:	21 95       	neg	r18
    170a:	3f 4f       	sbci	r19, 0xFF	; 255
    170c:	4f 4f       	sbci	r20, 0xFF	; 255
    170e:	5f 4f       	sbci	r21, 0xFF	; 255
    1710:	0e c0       	rjmp	.+28     	; 0x172e <__fixsfsi+0x9c>
    1712:	20 e0       	ldi	r18, 0x00	; 0
    1714:	30 e0       	ldi	r19, 0x00	; 0
    1716:	40 e0       	ldi	r20, 0x00	; 0
    1718:	50 e0       	ldi	r21, 0x00	; 0
    171a:	09 c0       	rjmp	.+18     	; 0x172e <__fixsfsi+0x9c>
    171c:	2f ef       	ldi	r18, 0xFF	; 255
    171e:	3f ef       	ldi	r19, 0xFF	; 255
    1720:	4f ef       	ldi	r20, 0xFF	; 255
    1722:	5f e7       	ldi	r21, 0x7F	; 127
    1724:	04 c0       	rjmp	.+8      	; 0x172e <__fixsfsi+0x9c>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	30 e0       	ldi	r19, 0x00	; 0
    172a:	40 e0       	ldi	r20, 0x00	; 0
    172c:	50 e8       	ldi	r21, 0x80	; 128
    172e:	b9 01       	movw	r22, r18
    1730:	ca 01       	movw	r24, r20
    1732:	2c 96       	adiw	r28, 0x0c	; 12
    1734:	e2 e0       	ldi	r30, 0x02	; 2
    1736:	0c 94 33 24 	jmp	0x4866	; 0x4866 <__epilogue_restores__+0x20>

0000173a <__floatunsisf>:
    173a:	a8 e0       	ldi	r26, 0x08	; 8
    173c:	b0 e0       	ldi	r27, 0x00	; 0
    173e:	e3 ea       	ldi	r30, 0xA3	; 163
    1740:	fb e0       	ldi	r31, 0x0B	; 11
    1742:	0c 94 0f 24 	jmp	0x481e	; 0x481e <__prologue_saves__+0x10>
    1746:	7b 01       	movw	r14, r22
    1748:	8c 01       	movw	r16, r24
    174a:	61 15       	cp	r22, r1
    174c:	71 05       	cpc	r23, r1
    174e:	81 05       	cpc	r24, r1
    1750:	91 05       	cpc	r25, r1
    1752:	19 f4       	brne	.+6      	; 0x175a <__floatunsisf+0x20>
    1754:	82 e0       	ldi	r24, 0x02	; 2
    1756:	89 83       	std	Y+1, r24	; 0x01
    1758:	60 c0       	rjmp	.+192    	; 0x181a <__floatunsisf+0xe0>
    175a:	83 e0       	ldi	r24, 0x03	; 3
    175c:	89 83       	std	Y+1, r24	; 0x01
    175e:	8e e1       	ldi	r24, 0x1E	; 30
    1760:	c8 2e       	mov	r12, r24
    1762:	d1 2c       	mov	r13, r1
    1764:	dc 82       	std	Y+4, r13	; 0x04
    1766:	cb 82       	std	Y+3, r12	; 0x03
    1768:	ed 82       	std	Y+5, r14	; 0x05
    176a:	fe 82       	std	Y+6, r15	; 0x06
    176c:	0f 83       	std	Y+7, r16	; 0x07
    176e:	18 87       	std	Y+8, r17	; 0x08
    1770:	c8 01       	movw	r24, r16
    1772:	b7 01       	movw	r22, r14
    1774:	0e 94 16 0c 	call	0x182c	; 0x182c <__clzsi2>
    1778:	fc 01       	movw	r30, r24
    177a:	31 97       	sbiw	r30, 0x01	; 1
    177c:	f7 ff       	sbrs	r31, 7
    177e:	3b c0       	rjmp	.+118    	; 0x17f6 <__floatunsisf+0xbc>
    1780:	22 27       	eor	r18, r18
    1782:	33 27       	eor	r19, r19
    1784:	2e 1b       	sub	r18, r30
    1786:	3f 0b       	sbc	r19, r31
    1788:	57 01       	movw	r10, r14
    178a:	68 01       	movw	r12, r16
    178c:	02 2e       	mov	r0, r18
    178e:	04 c0       	rjmp	.+8      	; 0x1798 <__floatunsisf+0x5e>
    1790:	d6 94       	lsr	r13
    1792:	c7 94       	ror	r12
    1794:	b7 94       	ror	r11
    1796:	a7 94       	ror	r10
    1798:	0a 94       	dec	r0
    179a:	d2 f7       	brpl	.-12     	; 0x1790 <__floatunsisf+0x56>
    179c:	40 e0       	ldi	r20, 0x00	; 0
    179e:	50 e0       	ldi	r21, 0x00	; 0
    17a0:	60 e0       	ldi	r22, 0x00	; 0
    17a2:	70 e0       	ldi	r23, 0x00	; 0
    17a4:	81 e0       	ldi	r24, 0x01	; 1
    17a6:	90 e0       	ldi	r25, 0x00	; 0
    17a8:	a0 e0       	ldi	r26, 0x00	; 0
    17aa:	b0 e0       	ldi	r27, 0x00	; 0
    17ac:	04 c0       	rjmp	.+8      	; 0x17b6 <__floatunsisf+0x7c>
    17ae:	88 0f       	add	r24, r24
    17b0:	99 1f       	adc	r25, r25
    17b2:	aa 1f       	adc	r26, r26
    17b4:	bb 1f       	adc	r27, r27
    17b6:	2a 95       	dec	r18
    17b8:	d2 f7       	brpl	.-12     	; 0x17ae <__floatunsisf+0x74>
    17ba:	01 97       	sbiw	r24, 0x01	; 1
    17bc:	a1 09       	sbc	r26, r1
    17be:	b1 09       	sbc	r27, r1
    17c0:	8e 21       	and	r24, r14
    17c2:	9f 21       	and	r25, r15
    17c4:	a0 23       	and	r26, r16
    17c6:	b1 23       	and	r27, r17
    17c8:	00 97       	sbiw	r24, 0x00	; 0
    17ca:	a1 05       	cpc	r26, r1
    17cc:	b1 05       	cpc	r27, r1
    17ce:	21 f0       	breq	.+8      	; 0x17d8 <__floatunsisf+0x9e>
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	50 e0       	ldi	r21, 0x00	; 0
    17d4:	60 e0       	ldi	r22, 0x00	; 0
    17d6:	70 e0       	ldi	r23, 0x00	; 0
    17d8:	4a 29       	or	r20, r10
    17da:	5b 29       	or	r21, r11
    17dc:	6c 29       	or	r22, r12
    17de:	7d 29       	or	r23, r13
    17e0:	4d 83       	std	Y+5, r20	; 0x05
    17e2:	5e 83       	std	Y+6, r21	; 0x06
    17e4:	6f 83       	std	Y+7, r22	; 0x07
    17e6:	78 87       	std	Y+8, r23	; 0x08
    17e8:	8e e1       	ldi	r24, 0x1E	; 30
    17ea:	90 e0       	ldi	r25, 0x00	; 0
    17ec:	8e 1b       	sub	r24, r30
    17ee:	9f 0b       	sbc	r25, r31
    17f0:	9c 83       	std	Y+4, r25	; 0x04
    17f2:	8b 83       	std	Y+3, r24	; 0x03
    17f4:	12 c0       	rjmp	.+36     	; 0x181a <__floatunsisf+0xe0>
    17f6:	30 97       	sbiw	r30, 0x00	; 0
    17f8:	81 f0       	breq	.+32     	; 0x181a <__floatunsisf+0xe0>
    17fa:	0e 2e       	mov	r0, r30
    17fc:	04 c0       	rjmp	.+8      	; 0x1806 <__floatunsisf+0xcc>
    17fe:	ee 0c       	add	r14, r14
    1800:	ff 1c       	adc	r15, r15
    1802:	00 1f       	adc	r16, r16
    1804:	11 1f       	adc	r17, r17
    1806:	0a 94       	dec	r0
    1808:	d2 f7       	brpl	.-12     	; 0x17fe <__floatunsisf+0xc4>
    180a:	ed 82       	std	Y+5, r14	; 0x05
    180c:	fe 82       	std	Y+6, r15	; 0x06
    180e:	0f 83       	std	Y+7, r16	; 0x07
    1810:	18 87       	std	Y+8, r17	; 0x08
    1812:	ce 1a       	sub	r12, r30
    1814:	df 0a       	sbc	r13, r31
    1816:	dc 82       	std	Y+4, r13	; 0x04
    1818:	cb 82       	std	Y+3, r12	; 0x03
    181a:	1a 82       	std	Y+2, r1	; 0x02
    181c:	ce 01       	movw	r24, r28
    181e:	01 96       	adiw	r24, 0x01	; 1
    1820:	0e 94 65 0c 	call	0x18ca	; 0x18ca <__pack_f>
    1824:	28 96       	adiw	r28, 0x08	; 8
    1826:	ea e0       	ldi	r30, 0x0A	; 10
    1828:	0c 94 2b 24 	jmp	0x4856	; 0x4856 <__epilogue_restores__+0x10>

0000182c <__clzsi2>:
    182c:	ef 92       	push	r14
    182e:	ff 92       	push	r15
    1830:	0f 93       	push	r16
    1832:	1f 93       	push	r17
    1834:	7b 01       	movw	r14, r22
    1836:	8c 01       	movw	r16, r24
    1838:	80 e0       	ldi	r24, 0x00	; 0
    183a:	e8 16       	cp	r14, r24
    183c:	80 e0       	ldi	r24, 0x00	; 0
    183e:	f8 06       	cpc	r15, r24
    1840:	81 e0       	ldi	r24, 0x01	; 1
    1842:	08 07       	cpc	r16, r24
    1844:	80 e0       	ldi	r24, 0x00	; 0
    1846:	18 07       	cpc	r17, r24
    1848:	88 f4       	brcc	.+34     	; 0x186c <__clzsi2+0x40>
    184a:	8f ef       	ldi	r24, 0xFF	; 255
    184c:	e8 16       	cp	r14, r24
    184e:	f1 04       	cpc	r15, r1
    1850:	01 05       	cpc	r16, r1
    1852:	11 05       	cpc	r17, r1
    1854:	31 f0       	breq	.+12     	; 0x1862 <__clzsi2+0x36>
    1856:	28 f0       	brcs	.+10     	; 0x1862 <__clzsi2+0x36>
    1858:	88 e0       	ldi	r24, 0x08	; 8
    185a:	90 e0       	ldi	r25, 0x00	; 0
    185c:	a0 e0       	ldi	r26, 0x00	; 0
    185e:	b0 e0       	ldi	r27, 0x00	; 0
    1860:	17 c0       	rjmp	.+46     	; 0x1890 <__clzsi2+0x64>
    1862:	80 e0       	ldi	r24, 0x00	; 0
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	a0 e0       	ldi	r26, 0x00	; 0
    1868:	b0 e0       	ldi	r27, 0x00	; 0
    186a:	12 c0       	rjmp	.+36     	; 0x1890 <__clzsi2+0x64>
    186c:	80 e0       	ldi	r24, 0x00	; 0
    186e:	e8 16       	cp	r14, r24
    1870:	80 e0       	ldi	r24, 0x00	; 0
    1872:	f8 06       	cpc	r15, r24
    1874:	80 e0       	ldi	r24, 0x00	; 0
    1876:	08 07       	cpc	r16, r24
    1878:	81 e0       	ldi	r24, 0x01	; 1
    187a:	18 07       	cpc	r17, r24
    187c:	28 f0       	brcs	.+10     	; 0x1888 <__clzsi2+0x5c>
    187e:	88 e1       	ldi	r24, 0x18	; 24
    1880:	90 e0       	ldi	r25, 0x00	; 0
    1882:	a0 e0       	ldi	r26, 0x00	; 0
    1884:	b0 e0       	ldi	r27, 0x00	; 0
    1886:	04 c0       	rjmp	.+8      	; 0x1890 <__clzsi2+0x64>
    1888:	80 e1       	ldi	r24, 0x10	; 16
    188a:	90 e0       	ldi	r25, 0x00	; 0
    188c:	a0 e0       	ldi	r26, 0x00	; 0
    188e:	b0 e0       	ldi	r27, 0x00	; 0
    1890:	20 e2       	ldi	r18, 0x20	; 32
    1892:	30 e0       	ldi	r19, 0x00	; 0
    1894:	40 e0       	ldi	r20, 0x00	; 0
    1896:	50 e0       	ldi	r21, 0x00	; 0
    1898:	28 1b       	sub	r18, r24
    189a:	39 0b       	sbc	r19, r25
    189c:	4a 0b       	sbc	r20, r26
    189e:	5b 0b       	sbc	r21, r27
    18a0:	04 c0       	rjmp	.+8      	; 0x18aa <__clzsi2+0x7e>
    18a2:	16 95       	lsr	r17
    18a4:	07 95       	ror	r16
    18a6:	f7 94       	ror	r15
    18a8:	e7 94       	ror	r14
    18aa:	8a 95       	dec	r24
    18ac:	d2 f7       	brpl	.-12     	; 0x18a2 <__clzsi2+0x76>
    18ae:	f7 01       	movw	r30, r14
    18b0:	e8 59       	subi	r30, 0x98	; 152
    18b2:	ff 4f       	sbci	r31, 0xFF	; 255
    18b4:	80 81       	ld	r24, Z
    18b6:	28 1b       	sub	r18, r24
    18b8:	31 09       	sbc	r19, r1
    18ba:	41 09       	sbc	r20, r1
    18bc:	51 09       	sbc	r21, r1
    18be:	c9 01       	movw	r24, r18
    18c0:	1f 91       	pop	r17
    18c2:	0f 91       	pop	r16
    18c4:	ff 90       	pop	r15
    18c6:	ef 90       	pop	r14
    18c8:	08 95       	ret

000018ca <__pack_f>:
    18ca:	df 92       	push	r13
    18cc:	ef 92       	push	r14
    18ce:	ff 92       	push	r15
    18d0:	0f 93       	push	r16
    18d2:	1f 93       	push	r17
    18d4:	fc 01       	movw	r30, r24
    18d6:	e4 80       	ldd	r14, Z+4	; 0x04
    18d8:	f5 80       	ldd	r15, Z+5	; 0x05
    18da:	06 81       	ldd	r16, Z+6	; 0x06
    18dc:	17 81       	ldd	r17, Z+7	; 0x07
    18de:	d1 80       	ldd	r13, Z+1	; 0x01
    18e0:	80 81       	ld	r24, Z
    18e2:	82 30       	cpi	r24, 0x02	; 2
    18e4:	48 f4       	brcc	.+18     	; 0x18f8 <__pack_f+0x2e>
    18e6:	80 e0       	ldi	r24, 0x00	; 0
    18e8:	90 e0       	ldi	r25, 0x00	; 0
    18ea:	a0 e1       	ldi	r26, 0x10	; 16
    18ec:	b0 e0       	ldi	r27, 0x00	; 0
    18ee:	e8 2a       	or	r14, r24
    18f0:	f9 2a       	or	r15, r25
    18f2:	0a 2b       	or	r16, r26
    18f4:	1b 2b       	or	r17, r27
    18f6:	a5 c0       	rjmp	.+330    	; 0x1a42 <__pack_f+0x178>
    18f8:	84 30       	cpi	r24, 0x04	; 4
    18fa:	09 f4       	brne	.+2      	; 0x18fe <__pack_f+0x34>
    18fc:	9f c0       	rjmp	.+318    	; 0x1a3c <__pack_f+0x172>
    18fe:	82 30       	cpi	r24, 0x02	; 2
    1900:	21 f4       	brne	.+8      	; 0x190a <__pack_f+0x40>
    1902:	ee 24       	eor	r14, r14
    1904:	ff 24       	eor	r15, r15
    1906:	87 01       	movw	r16, r14
    1908:	05 c0       	rjmp	.+10     	; 0x1914 <__pack_f+0x4a>
    190a:	e1 14       	cp	r14, r1
    190c:	f1 04       	cpc	r15, r1
    190e:	01 05       	cpc	r16, r1
    1910:	11 05       	cpc	r17, r1
    1912:	19 f4       	brne	.+6      	; 0x191a <__pack_f+0x50>
    1914:	e0 e0       	ldi	r30, 0x00	; 0
    1916:	f0 e0       	ldi	r31, 0x00	; 0
    1918:	96 c0       	rjmp	.+300    	; 0x1a46 <__pack_f+0x17c>
    191a:	62 81       	ldd	r22, Z+2	; 0x02
    191c:	73 81       	ldd	r23, Z+3	; 0x03
    191e:	9f ef       	ldi	r25, 0xFF	; 255
    1920:	62 38       	cpi	r22, 0x82	; 130
    1922:	79 07       	cpc	r23, r25
    1924:	0c f0       	brlt	.+2      	; 0x1928 <__pack_f+0x5e>
    1926:	5b c0       	rjmp	.+182    	; 0x19de <__pack_f+0x114>
    1928:	22 e8       	ldi	r18, 0x82	; 130
    192a:	3f ef       	ldi	r19, 0xFF	; 255
    192c:	26 1b       	sub	r18, r22
    192e:	37 0b       	sbc	r19, r23
    1930:	2a 31       	cpi	r18, 0x1A	; 26
    1932:	31 05       	cpc	r19, r1
    1934:	2c f0       	brlt	.+10     	; 0x1940 <__pack_f+0x76>
    1936:	20 e0       	ldi	r18, 0x00	; 0
    1938:	30 e0       	ldi	r19, 0x00	; 0
    193a:	40 e0       	ldi	r20, 0x00	; 0
    193c:	50 e0       	ldi	r21, 0x00	; 0
    193e:	2a c0       	rjmp	.+84     	; 0x1994 <__pack_f+0xca>
    1940:	b8 01       	movw	r22, r16
    1942:	a7 01       	movw	r20, r14
    1944:	02 2e       	mov	r0, r18
    1946:	04 c0       	rjmp	.+8      	; 0x1950 <__pack_f+0x86>
    1948:	76 95       	lsr	r23
    194a:	67 95       	ror	r22
    194c:	57 95       	ror	r21
    194e:	47 95       	ror	r20
    1950:	0a 94       	dec	r0
    1952:	d2 f7       	brpl	.-12     	; 0x1948 <__pack_f+0x7e>
    1954:	81 e0       	ldi	r24, 0x01	; 1
    1956:	90 e0       	ldi	r25, 0x00	; 0
    1958:	a0 e0       	ldi	r26, 0x00	; 0
    195a:	b0 e0       	ldi	r27, 0x00	; 0
    195c:	04 c0       	rjmp	.+8      	; 0x1966 <__pack_f+0x9c>
    195e:	88 0f       	add	r24, r24
    1960:	99 1f       	adc	r25, r25
    1962:	aa 1f       	adc	r26, r26
    1964:	bb 1f       	adc	r27, r27
    1966:	2a 95       	dec	r18
    1968:	d2 f7       	brpl	.-12     	; 0x195e <__pack_f+0x94>
    196a:	01 97       	sbiw	r24, 0x01	; 1
    196c:	a1 09       	sbc	r26, r1
    196e:	b1 09       	sbc	r27, r1
    1970:	8e 21       	and	r24, r14
    1972:	9f 21       	and	r25, r15
    1974:	a0 23       	and	r26, r16
    1976:	b1 23       	and	r27, r17
    1978:	00 97       	sbiw	r24, 0x00	; 0
    197a:	a1 05       	cpc	r26, r1
    197c:	b1 05       	cpc	r27, r1
    197e:	21 f0       	breq	.+8      	; 0x1988 <__pack_f+0xbe>
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	a0 e0       	ldi	r26, 0x00	; 0
    1986:	b0 e0       	ldi	r27, 0x00	; 0
    1988:	9a 01       	movw	r18, r20
    198a:	ab 01       	movw	r20, r22
    198c:	28 2b       	or	r18, r24
    198e:	39 2b       	or	r19, r25
    1990:	4a 2b       	or	r20, r26
    1992:	5b 2b       	or	r21, r27
    1994:	da 01       	movw	r26, r20
    1996:	c9 01       	movw	r24, r18
    1998:	8f 77       	andi	r24, 0x7F	; 127
    199a:	90 70       	andi	r25, 0x00	; 0
    199c:	a0 70       	andi	r26, 0x00	; 0
    199e:	b0 70       	andi	r27, 0x00	; 0
    19a0:	80 34       	cpi	r24, 0x40	; 64
    19a2:	91 05       	cpc	r25, r1
    19a4:	a1 05       	cpc	r26, r1
    19a6:	b1 05       	cpc	r27, r1
    19a8:	39 f4       	brne	.+14     	; 0x19b8 <__pack_f+0xee>
    19aa:	27 ff       	sbrs	r18, 7
    19ac:	09 c0       	rjmp	.+18     	; 0x19c0 <__pack_f+0xf6>
    19ae:	20 5c       	subi	r18, 0xC0	; 192
    19b0:	3f 4f       	sbci	r19, 0xFF	; 255
    19b2:	4f 4f       	sbci	r20, 0xFF	; 255
    19b4:	5f 4f       	sbci	r21, 0xFF	; 255
    19b6:	04 c0       	rjmp	.+8      	; 0x19c0 <__pack_f+0xf6>
    19b8:	21 5c       	subi	r18, 0xC1	; 193
    19ba:	3f 4f       	sbci	r19, 0xFF	; 255
    19bc:	4f 4f       	sbci	r20, 0xFF	; 255
    19be:	5f 4f       	sbci	r21, 0xFF	; 255
    19c0:	e0 e0       	ldi	r30, 0x00	; 0
    19c2:	f0 e0       	ldi	r31, 0x00	; 0
    19c4:	20 30       	cpi	r18, 0x00	; 0
    19c6:	a0 e0       	ldi	r26, 0x00	; 0
    19c8:	3a 07       	cpc	r19, r26
    19ca:	a0 e0       	ldi	r26, 0x00	; 0
    19cc:	4a 07       	cpc	r20, r26
    19ce:	a0 e4       	ldi	r26, 0x40	; 64
    19d0:	5a 07       	cpc	r21, r26
    19d2:	10 f0       	brcs	.+4      	; 0x19d8 <__pack_f+0x10e>
    19d4:	e1 e0       	ldi	r30, 0x01	; 1
    19d6:	f0 e0       	ldi	r31, 0x00	; 0
    19d8:	79 01       	movw	r14, r18
    19da:	8a 01       	movw	r16, r20
    19dc:	27 c0       	rjmp	.+78     	; 0x1a2c <__pack_f+0x162>
    19de:	60 38       	cpi	r22, 0x80	; 128
    19e0:	71 05       	cpc	r23, r1
    19e2:	64 f5       	brge	.+88     	; 0x1a3c <__pack_f+0x172>
    19e4:	fb 01       	movw	r30, r22
    19e6:	e1 58       	subi	r30, 0x81	; 129
    19e8:	ff 4f       	sbci	r31, 0xFF	; 255
    19ea:	d8 01       	movw	r26, r16
    19ec:	c7 01       	movw	r24, r14
    19ee:	8f 77       	andi	r24, 0x7F	; 127
    19f0:	90 70       	andi	r25, 0x00	; 0
    19f2:	a0 70       	andi	r26, 0x00	; 0
    19f4:	b0 70       	andi	r27, 0x00	; 0
    19f6:	80 34       	cpi	r24, 0x40	; 64
    19f8:	91 05       	cpc	r25, r1
    19fa:	a1 05       	cpc	r26, r1
    19fc:	b1 05       	cpc	r27, r1
    19fe:	39 f4       	brne	.+14     	; 0x1a0e <__pack_f+0x144>
    1a00:	e7 fe       	sbrs	r14, 7
    1a02:	0d c0       	rjmp	.+26     	; 0x1a1e <__pack_f+0x154>
    1a04:	80 e4       	ldi	r24, 0x40	; 64
    1a06:	90 e0       	ldi	r25, 0x00	; 0
    1a08:	a0 e0       	ldi	r26, 0x00	; 0
    1a0a:	b0 e0       	ldi	r27, 0x00	; 0
    1a0c:	04 c0       	rjmp	.+8      	; 0x1a16 <__pack_f+0x14c>
    1a0e:	8f e3       	ldi	r24, 0x3F	; 63
    1a10:	90 e0       	ldi	r25, 0x00	; 0
    1a12:	a0 e0       	ldi	r26, 0x00	; 0
    1a14:	b0 e0       	ldi	r27, 0x00	; 0
    1a16:	e8 0e       	add	r14, r24
    1a18:	f9 1e       	adc	r15, r25
    1a1a:	0a 1f       	adc	r16, r26
    1a1c:	1b 1f       	adc	r17, r27
    1a1e:	17 ff       	sbrs	r17, 7
    1a20:	05 c0       	rjmp	.+10     	; 0x1a2c <__pack_f+0x162>
    1a22:	16 95       	lsr	r17
    1a24:	07 95       	ror	r16
    1a26:	f7 94       	ror	r15
    1a28:	e7 94       	ror	r14
    1a2a:	31 96       	adiw	r30, 0x01	; 1
    1a2c:	87 e0       	ldi	r24, 0x07	; 7
    1a2e:	16 95       	lsr	r17
    1a30:	07 95       	ror	r16
    1a32:	f7 94       	ror	r15
    1a34:	e7 94       	ror	r14
    1a36:	8a 95       	dec	r24
    1a38:	d1 f7       	brne	.-12     	; 0x1a2e <__pack_f+0x164>
    1a3a:	05 c0       	rjmp	.+10     	; 0x1a46 <__pack_f+0x17c>
    1a3c:	ee 24       	eor	r14, r14
    1a3e:	ff 24       	eor	r15, r15
    1a40:	87 01       	movw	r16, r14
    1a42:	ef ef       	ldi	r30, 0xFF	; 255
    1a44:	f0 e0       	ldi	r31, 0x00	; 0
    1a46:	6e 2f       	mov	r22, r30
    1a48:	67 95       	ror	r22
    1a4a:	66 27       	eor	r22, r22
    1a4c:	67 95       	ror	r22
    1a4e:	90 2f       	mov	r25, r16
    1a50:	9f 77       	andi	r25, 0x7F	; 127
    1a52:	d7 94       	ror	r13
    1a54:	dd 24       	eor	r13, r13
    1a56:	d7 94       	ror	r13
    1a58:	8e 2f       	mov	r24, r30
    1a5a:	86 95       	lsr	r24
    1a5c:	49 2f       	mov	r20, r25
    1a5e:	46 2b       	or	r20, r22
    1a60:	58 2f       	mov	r21, r24
    1a62:	5d 29       	or	r21, r13
    1a64:	b7 01       	movw	r22, r14
    1a66:	ca 01       	movw	r24, r20
    1a68:	1f 91       	pop	r17
    1a6a:	0f 91       	pop	r16
    1a6c:	ff 90       	pop	r15
    1a6e:	ef 90       	pop	r14
    1a70:	df 90       	pop	r13
    1a72:	08 95       	ret

00001a74 <__unpack_f>:
    1a74:	fc 01       	movw	r30, r24
    1a76:	db 01       	movw	r26, r22
    1a78:	40 81       	ld	r20, Z
    1a7a:	51 81       	ldd	r21, Z+1	; 0x01
    1a7c:	22 81       	ldd	r18, Z+2	; 0x02
    1a7e:	62 2f       	mov	r22, r18
    1a80:	6f 77       	andi	r22, 0x7F	; 127
    1a82:	70 e0       	ldi	r23, 0x00	; 0
    1a84:	22 1f       	adc	r18, r18
    1a86:	22 27       	eor	r18, r18
    1a88:	22 1f       	adc	r18, r18
    1a8a:	93 81       	ldd	r25, Z+3	; 0x03
    1a8c:	89 2f       	mov	r24, r25
    1a8e:	88 0f       	add	r24, r24
    1a90:	82 2b       	or	r24, r18
    1a92:	28 2f       	mov	r18, r24
    1a94:	30 e0       	ldi	r19, 0x00	; 0
    1a96:	99 1f       	adc	r25, r25
    1a98:	99 27       	eor	r25, r25
    1a9a:	99 1f       	adc	r25, r25
    1a9c:	11 96       	adiw	r26, 0x01	; 1
    1a9e:	9c 93       	st	X, r25
    1aa0:	11 97       	sbiw	r26, 0x01	; 1
    1aa2:	21 15       	cp	r18, r1
    1aa4:	31 05       	cpc	r19, r1
    1aa6:	a9 f5       	brne	.+106    	; 0x1b12 <__unpack_f+0x9e>
    1aa8:	41 15       	cp	r20, r1
    1aaa:	51 05       	cpc	r21, r1
    1aac:	61 05       	cpc	r22, r1
    1aae:	71 05       	cpc	r23, r1
    1ab0:	11 f4       	brne	.+4      	; 0x1ab6 <__unpack_f+0x42>
    1ab2:	82 e0       	ldi	r24, 0x02	; 2
    1ab4:	37 c0       	rjmp	.+110    	; 0x1b24 <__unpack_f+0xb0>
    1ab6:	82 e8       	ldi	r24, 0x82	; 130
    1ab8:	9f ef       	ldi	r25, 0xFF	; 255
    1aba:	13 96       	adiw	r26, 0x03	; 3
    1abc:	9c 93       	st	X, r25
    1abe:	8e 93       	st	-X, r24
    1ac0:	12 97       	sbiw	r26, 0x02	; 2
    1ac2:	9a 01       	movw	r18, r20
    1ac4:	ab 01       	movw	r20, r22
    1ac6:	67 e0       	ldi	r22, 0x07	; 7
    1ac8:	22 0f       	add	r18, r18
    1aca:	33 1f       	adc	r19, r19
    1acc:	44 1f       	adc	r20, r20
    1ace:	55 1f       	adc	r21, r21
    1ad0:	6a 95       	dec	r22
    1ad2:	d1 f7       	brne	.-12     	; 0x1ac8 <__unpack_f+0x54>
    1ad4:	83 e0       	ldi	r24, 0x03	; 3
    1ad6:	8c 93       	st	X, r24
    1ad8:	0d c0       	rjmp	.+26     	; 0x1af4 <__unpack_f+0x80>
    1ada:	22 0f       	add	r18, r18
    1adc:	33 1f       	adc	r19, r19
    1ade:	44 1f       	adc	r20, r20
    1ae0:	55 1f       	adc	r21, r21
    1ae2:	12 96       	adiw	r26, 0x02	; 2
    1ae4:	8d 91       	ld	r24, X+
    1ae6:	9c 91       	ld	r25, X
    1ae8:	13 97       	sbiw	r26, 0x03	; 3
    1aea:	01 97       	sbiw	r24, 0x01	; 1
    1aec:	13 96       	adiw	r26, 0x03	; 3
    1aee:	9c 93       	st	X, r25
    1af0:	8e 93       	st	-X, r24
    1af2:	12 97       	sbiw	r26, 0x02	; 2
    1af4:	20 30       	cpi	r18, 0x00	; 0
    1af6:	80 e0       	ldi	r24, 0x00	; 0
    1af8:	38 07       	cpc	r19, r24
    1afa:	80 e0       	ldi	r24, 0x00	; 0
    1afc:	48 07       	cpc	r20, r24
    1afe:	80 e4       	ldi	r24, 0x40	; 64
    1b00:	58 07       	cpc	r21, r24
    1b02:	58 f3       	brcs	.-42     	; 0x1ada <__unpack_f+0x66>
    1b04:	14 96       	adiw	r26, 0x04	; 4
    1b06:	2d 93       	st	X+, r18
    1b08:	3d 93       	st	X+, r19
    1b0a:	4d 93       	st	X+, r20
    1b0c:	5c 93       	st	X, r21
    1b0e:	17 97       	sbiw	r26, 0x07	; 7
    1b10:	08 95       	ret
    1b12:	2f 3f       	cpi	r18, 0xFF	; 255
    1b14:	31 05       	cpc	r19, r1
    1b16:	79 f4       	brne	.+30     	; 0x1b36 <__unpack_f+0xc2>
    1b18:	41 15       	cp	r20, r1
    1b1a:	51 05       	cpc	r21, r1
    1b1c:	61 05       	cpc	r22, r1
    1b1e:	71 05       	cpc	r23, r1
    1b20:	19 f4       	brne	.+6      	; 0x1b28 <__unpack_f+0xb4>
    1b22:	84 e0       	ldi	r24, 0x04	; 4
    1b24:	8c 93       	st	X, r24
    1b26:	08 95       	ret
    1b28:	64 ff       	sbrs	r22, 4
    1b2a:	03 c0       	rjmp	.+6      	; 0x1b32 <__unpack_f+0xbe>
    1b2c:	81 e0       	ldi	r24, 0x01	; 1
    1b2e:	8c 93       	st	X, r24
    1b30:	12 c0       	rjmp	.+36     	; 0x1b56 <__unpack_f+0xe2>
    1b32:	1c 92       	st	X, r1
    1b34:	10 c0       	rjmp	.+32     	; 0x1b56 <__unpack_f+0xe2>
    1b36:	2f 57       	subi	r18, 0x7F	; 127
    1b38:	30 40       	sbci	r19, 0x00	; 0
    1b3a:	13 96       	adiw	r26, 0x03	; 3
    1b3c:	3c 93       	st	X, r19
    1b3e:	2e 93       	st	-X, r18
    1b40:	12 97       	sbiw	r26, 0x02	; 2
    1b42:	83 e0       	ldi	r24, 0x03	; 3
    1b44:	8c 93       	st	X, r24
    1b46:	87 e0       	ldi	r24, 0x07	; 7
    1b48:	44 0f       	add	r20, r20
    1b4a:	55 1f       	adc	r21, r21
    1b4c:	66 1f       	adc	r22, r22
    1b4e:	77 1f       	adc	r23, r23
    1b50:	8a 95       	dec	r24
    1b52:	d1 f7       	brne	.-12     	; 0x1b48 <__unpack_f+0xd4>
    1b54:	70 64       	ori	r23, 0x40	; 64
    1b56:	14 96       	adiw	r26, 0x04	; 4
    1b58:	4d 93       	st	X+, r20
    1b5a:	5d 93       	st	X+, r21
    1b5c:	6d 93       	st	X+, r22
    1b5e:	7c 93       	st	X, r23
    1b60:	17 97       	sbiw	r26, 0x07	; 7
    1b62:	08 95       	ret

00001b64 <__fpcmp_parts_f>:
    1b64:	1f 93       	push	r17
    1b66:	dc 01       	movw	r26, r24
    1b68:	fb 01       	movw	r30, r22
    1b6a:	9c 91       	ld	r25, X
    1b6c:	92 30       	cpi	r25, 0x02	; 2
    1b6e:	08 f4       	brcc	.+2      	; 0x1b72 <__fpcmp_parts_f+0xe>
    1b70:	47 c0       	rjmp	.+142    	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1b72:	80 81       	ld	r24, Z
    1b74:	82 30       	cpi	r24, 0x02	; 2
    1b76:	08 f4       	brcc	.+2      	; 0x1b7a <__fpcmp_parts_f+0x16>
    1b78:	43 c0       	rjmp	.+134    	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1b7a:	94 30       	cpi	r25, 0x04	; 4
    1b7c:	51 f4       	brne	.+20     	; 0x1b92 <__fpcmp_parts_f+0x2e>
    1b7e:	11 96       	adiw	r26, 0x01	; 1
    1b80:	1c 91       	ld	r17, X
    1b82:	84 30       	cpi	r24, 0x04	; 4
    1b84:	99 f5       	brne	.+102    	; 0x1bec <__fpcmp_parts_f+0x88>
    1b86:	81 81       	ldd	r24, Z+1	; 0x01
    1b88:	68 2f       	mov	r22, r24
    1b8a:	70 e0       	ldi	r23, 0x00	; 0
    1b8c:	61 1b       	sub	r22, r17
    1b8e:	71 09       	sbc	r23, r1
    1b90:	3f c0       	rjmp	.+126    	; 0x1c10 <__fpcmp_parts_f+0xac>
    1b92:	84 30       	cpi	r24, 0x04	; 4
    1b94:	21 f0       	breq	.+8      	; 0x1b9e <__fpcmp_parts_f+0x3a>
    1b96:	92 30       	cpi	r25, 0x02	; 2
    1b98:	31 f4       	brne	.+12     	; 0x1ba6 <__fpcmp_parts_f+0x42>
    1b9a:	82 30       	cpi	r24, 0x02	; 2
    1b9c:	b9 f1       	breq	.+110    	; 0x1c0c <__fpcmp_parts_f+0xa8>
    1b9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ba0:	88 23       	and	r24, r24
    1ba2:	89 f1       	breq	.+98     	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1ba4:	2d c0       	rjmp	.+90     	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1ba6:	11 96       	adiw	r26, 0x01	; 1
    1ba8:	1c 91       	ld	r17, X
    1baa:	11 97       	sbiw	r26, 0x01	; 1
    1bac:	82 30       	cpi	r24, 0x02	; 2
    1bae:	f1 f0       	breq	.+60     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bb0:	81 81       	ldd	r24, Z+1	; 0x01
    1bb2:	18 17       	cp	r17, r24
    1bb4:	d9 f4       	brne	.+54     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bb6:	12 96       	adiw	r26, 0x02	; 2
    1bb8:	2d 91       	ld	r18, X+
    1bba:	3c 91       	ld	r19, X
    1bbc:	13 97       	sbiw	r26, 0x03	; 3
    1bbe:	82 81       	ldd	r24, Z+2	; 0x02
    1bc0:	93 81       	ldd	r25, Z+3	; 0x03
    1bc2:	82 17       	cp	r24, r18
    1bc4:	93 07       	cpc	r25, r19
    1bc6:	94 f0       	brlt	.+36     	; 0x1bec <__fpcmp_parts_f+0x88>
    1bc8:	28 17       	cp	r18, r24
    1bca:	39 07       	cpc	r19, r25
    1bcc:	bc f0       	brlt	.+46     	; 0x1bfc <__fpcmp_parts_f+0x98>
    1bce:	14 96       	adiw	r26, 0x04	; 4
    1bd0:	8d 91       	ld	r24, X+
    1bd2:	9d 91       	ld	r25, X+
    1bd4:	0d 90       	ld	r0, X+
    1bd6:	bc 91       	ld	r27, X
    1bd8:	a0 2d       	mov	r26, r0
    1bda:	24 81       	ldd	r18, Z+4	; 0x04
    1bdc:	35 81       	ldd	r19, Z+5	; 0x05
    1bde:	46 81       	ldd	r20, Z+6	; 0x06
    1be0:	57 81       	ldd	r21, Z+7	; 0x07
    1be2:	28 17       	cp	r18, r24
    1be4:	39 07       	cpc	r19, r25
    1be6:	4a 07       	cpc	r20, r26
    1be8:	5b 07       	cpc	r21, r27
    1bea:	18 f4       	brcc	.+6      	; 0x1bf2 <__fpcmp_parts_f+0x8e>
    1bec:	11 23       	and	r17, r17
    1bee:	41 f0       	breq	.+16     	; 0x1c00 <__fpcmp_parts_f+0x9c>
    1bf0:	0a c0       	rjmp	.+20     	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1bf2:	82 17       	cp	r24, r18
    1bf4:	93 07       	cpc	r25, r19
    1bf6:	a4 07       	cpc	r26, r20
    1bf8:	b5 07       	cpc	r27, r21
    1bfa:	40 f4       	brcc	.+16     	; 0x1c0c <__fpcmp_parts_f+0xa8>
    1bfc:	11 23       	and	r17, r17
    1bfe:	19 f0       	breq	.+6      	; 0x1c06 <__fpcmp_parts_f+0xa2>
    1c00:	61 e0       	ldi	r22, 0x01	; 1
    1c02:	70 e0       	ldi	r23, 0x00	; 0
    1c04:	05 c0       	rjmp	.+10     	; 0x1c10 <__fpcmp_parts_f+0xac>
    1c06:	6f ef       	ldi	r22, 0xFF	; 255
    1c08:	7f ef       	ldi	r23, 0xFF	; 255
    1c0a:	02 c0       	rjmp	.+4      	; 0x1c10 <__fpcmp_parts_f+0xac>
    1c0c:	60 e0       	ldi	r22, 0x00	; 0
    1c0e:	70 e0       	ldi	r23, 0x00	; 0
    1c10:	cb 01       	movw	r24, r22
    1c12:	1f 91       	pop	r17
    1c14:	08 95       	ret

00001c16 <USART_voidInit>:

#define F_CPU 8000000UL


void USART_voidInit(u32 copy_uint8BaudRate)
{
    1c16:	2f 92       	push	r2
    1c18:	3f 92       	push	r3
    1c1a:	4f 92       	push	r4
    1c1c:	5f 92       	push	r5
    1c1e:	6f 92       	push	r6
    1c20:	7f 92       	push	r7
    1c22:	8f 92       	push	r8
    1c24:	9f 92       	push	r9
    1c26:	af 92       	push	r10
    1c28:	bf 92       	push	r11
    1c2a:	cf 92       	push	r12
    1c2c:	df 92       	push	r13
    1c2e:	ef 92       	push	r14
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	00 d0       	rcall	.+0      	; 0x1c3c <USART_voidInit+0x26>
    1c3c:	00 d0       	rcall	.+0      	; 0x1c3e <USART_voidInit+0x28>
    1c3e:	00 d0       	rcall	.+0      	; 0x1c40 <USART_voidInit+0x2a>
    1c40:	cd b7       	in	r28, 0x3d	; 61
    1c42:	de b7       	in	r29, 0x3e	; 62
    1c44:	6b 83       	std	Y+3, r22	; 0x03
    1c46:	7c 83       	std	Y+4, r23	; 0x04
    1c48:	8d 83       	std	Y+5, r24	; 0x05
    1c4a:	9e 83       	std	Y+6, r25	; 0x06
	//BaudRate  9600
	u16 Local_UBRR;
	//adjust mode
		CLR_BIT(USCRC,URSEL);
    1c4c:	a0 e4       	ldi	r26, 0x40	; 64
    1c4e:	b0 e0       	ldi	r27, 0x00	; 0
    1c50:	e0 e4       	ldi	r30, 0x40	; 64
    1c52:	f0 e0       	ldi	r31, 0x00	; 0
    1c54:	80 81       	ld	r24, Z
    1c56:	8f 77       	andi	r24, 0x7F	; 127
    1c58:	8c 93       	st	X, r24
		#if    USART_MODE == 0
		SET_BIT(USCRC,URSEL);
    1c5a:	a0 e4       	ldi	r26, 0x40	; 64
    1c5c:	b0 e0       	ldi	r27, 0x00	; 0
    1c5e:	e0 e4       	ldi	r30, 0x40	; 64
    1c60:	f0 e0       	ldi	r31, 0x00	; 0
    1c62:	80 81       	ld	r24, Z
    1c64:	80 68       	ori	r24, 0x80	; 128
    1c66:	8c 93       	st	X, r24
		CLR_BIT(USCRC,UMSEL);
    1c68:	a0 e4       	ldi	r26, 0x40	; 64
    1c6a:	b0 e0       	ldi	r27, 0x00	; 0
    1c6c:	e0 e4       	ldi	r30, 0x40	; 64
    1c6e:	f0 e0       	ldi	r31, 0x00	; 0
    1c70:	80 81       	ld	r24, Z
    1c72:	8f 7b       	andi	r24, 0xBF	; 191
    1c74:	8c 93       	st	X, r24
		Local_UBRR = (F_CPU/((u64)16*copy_uint8BaudRate))-1;
    1c76:	8b 81       	ldd	r24, Y+3	; 0x03
    1c78:	9c 81       	ldd	r25, Y+4	; 0x04
    1c7a:	ad 81       	ldd	r26, Y+5	; 0x05
    1c7c:	be 81       	ldd	r27, Y+6	; 0x06
    1c7e:	5c 01       	movw	r10, r24
    1c80:	6d 01       	movw	r12, r26
    1c82:	ee 24       	eor	r14, r14
    1c84:	ff 24       	eor	r15, r15
    1c86:	87 01       	movw	r16, r14
    1c88:	2a 2d       	mov	r18, r10
    1c8a:	3b 2d       	mov	r19, r11
    1c8c:	4c 2d       	mov	r20, r12
    1c8e:	5d 2d       	mov	r21, r13
    1c90:	6e 2d       	mov	r22, r14
    1c92:	7f 2d       	mov	r23, r15
    1c94:	80 2f       	mov	r24, r16
    1c96:	91 2f       	mov	r25, r17
    1c98:	04 e0       	ldi	r16, 0x04	; 4
    1c9a:	0e 94 49 00 	call	0x92	; 0x92 <__ashldi3>
    1c9e:	a2 2e       	mov	r10, r18
    1ca0:	b3 2e       	mov	r11, r19
    1ca2:	c4 2e       	mov	r12, r20
    1ca4:	d5 2e       	mov	r13, r21
    1ca6:	e6 2e       	mov	r14, r22
    1ca8:	f7 2e       	mov	r15, r23
    1caa:	08 2f       	mov	r16, r24
    1cac:	19 2f       	mov	r17, r25
    1cae:	2a 2c       	mov	r2, r10
    1cb0:	3b 2c       	mov	r3, r11
    1cb2:	4c 2c       	mov	r4, r12
    1cb4:	5d 2c       	mov	r5, r13
    1cb6:	6e 2c       	mov	r6, r14
    1cb8:	7f 2c       	mov	r7, r15
    1cba:	80 2e       	mov	r8, r16
    1cbc:	91 2e       	mov	r9, r17
    1cbe:	20 e0       	ldi	r18, 0x00	; 0
    1cc0:	32 e1       	ldi	r19, 0x12	; 18
    1cc2:	4a e7       	ldi	r20, 0x7A	; 122
    1cc4:	50 e0       	ldi	r21, 0x00	; 0
    1cc6:	60 e0       	ldi	r22, 0x00	; 0
    1cc8:	70 e0       	ldi	r23, 0x00	; 0
    1cca:	80 e0       	ldi	r24, 0x00	; 0
    1ccc:	90 e0       	ldi	r25, 0x00	; 0
    1cce:	a2 2c       	mov	r10, r2
    1cd0:	b3 2c       	mov	r11, r3
    1cd2:	c4 2c       	mov	r12, r4
    1cd4:	d5 2c       	mov	r13, r5
    1cd6:	e6 2c       	mov	r14, r6
    1cd8:	f7 2c       	mov	r15, r7
    1cda:	08 2d       	mov	r16, r8
    1cdc:	19 2d       	mov	r17, r9
    1cde:	0e 94 f4 00 	call	0x1e8	; 0x1e8 <__udivdi3>
    1ce2:	a2 2e       	mov	r10, r18
    1ce4:	b3 2e       	mov	r11, r19
    1ce6:	c4 2e       	mov	r12, r20
    1ce8:	d5 2e       	mov	r13, r21
    1cea:	e6 2e       	mov	r14, r22
    1cec:	f7 2e       	mov	r15, r23
    1cee:	08 2f       	mov	r16, r24
    1cf0:	19 2f       	mov	r17, r25
    1cf2:	2a 2d       	mov	r18, r10
    1cf4:	3b 2d       	mov	r19, r11
    1cf6:	4c 2d       	mov	r20, r12
    1cf8:	5d 2d       	mov	r21, r13
    1cfa:	6e 2d       	mov	r22, r14
    1cfc:	7f 2d       	mov	r23, r15
    1cfe:	80 2f       	mov	r24, r16
    1d00:	91 2f       	mov	r25, r17
    1d02:	c9 01       	movw	r24, r18
    1d04:	01 97       	sbiw	r24, 0x01	; 1
    1d06:	9a 83       	std	Y+2, r25	; 0x02
    1d08:	89 83       	std	Y+1, r24	; 0x01
		SET_BIT(USCRC,UMSEL);
		Local_UBRR = (F_CPU/((u64)2*copy_uint8BaudRate))-1;
		#endif
		
		/* Adjust UBRR */
		SET_BIT(USCRC,URSEL);
    1d0a:	a0 e4       	ldi	r26, 0x40	; 64
    1d0c:	b0 e0       	ldi	r27, 0x00	; 0
    1d0e:	e0 e4       	ldi	r30, 0x40	; 64
    1d10:	f0 e0       	ldi	r31, 0x00	; 0
    1d12:	80 81       	ld	r24, Z
    1d14:	80 68       	ori	r24, 0x80	; 128
    1d16:	8c 93       	st	X, r24
		UBRRH = (u8)(Local_UBRR >> 8);
    1d18:	e0 e4       	ldi	r30, 0x40	; 64
    1d1a:	f0 e0       	ldi	r31, 0x00	; 0
    1d1c:	89 81       	ldd	r24, Y+1	; 0x01
    1d1e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d20:	89 2f       	mov	r24, r25
    1d22:	99 27       	eor	r25, r25
    1d24:	80 83       	st	Z, r24
		UBRRL = (u8)(Local_UBRR);
    1d26:	e9 e2       	ldi	r30, 0x29	; 41
    1d28:	f0 e0       	ldi	r31, 0x00	; 0
    1d2a:	89 81       	ldd	r24, Y+1	; 0x01
    1d2c:	80 83       	st	Z, r24
		#elif USART_WORDSIZE == 2
		CLR_BIT(USCRC,UCSZ0);
		SET_BIT(USCRC,UCSZ1);
		CLR_BIT(USCRB,UCSZ2);
		#elif USART_WORDSIZE == 3
		SET_BIT(USCRC,UCSZ0);
    1d2e:	a0 e4       	ldi	r26, 0x40	; 64
    1d30:	b0 e0       	ldi	r27, 0x00	; 0
    1d32:	e0 e4       	ldi	r30, 0x40	; 64
    1d34:	f0 e0       	ldi	r31, 0x00	; 0
    1d36:	80 81       	ld	r24, Z
    1d38:	82 60       	ori	r24, 0x02	; 2
    1d3a:	8c 93       	st	X, r24
		SET_BIT(USCRC,UCSZ1);
    1d3c:	a0 e4       	ldi	r26, 0x40	; 64
    1d3e:	b0 e0       	ldi	r27, 0x00	; 0
    1d40:	e0 e4       	ldi	r30, 0x40	; 64
    1d42:	f0 e0       	ldi	r31, 0x00	; 0
    1d44:	80 81       	ld	r24, Z
    1d46:	84 60       	ori	r24, 0x04	; 4
    1d48:	8c 93       	st	X, r24
		CLR_BIT(USCRB,UCSZ2);
    1d4a:	aa e2       	ldi	r26, 0x2A	; 42
    1d4c:	b0 e0       	ldi	r27, 0x00	; 0
    1d4e:	ea e2       	ldi	r30, 0x2A	; 42
    1d50:	f0 e0       	ldi	r31, 0x00	; 0
    1d52:	80 81       	ld	r24, Z
    1d54:	8b 7f       	andi	r24, 0xFB	; 251
    1d56:	8c 93       	st	X, r24
		SET_BIT(USCRB,UCSZ2);
		#endif
		
		/* Adjust Parity */
		#if   USART_PARITY  == 0
		CLR_BIT(USCRC,UPM0);
    1d58:	a0 e4       	ldi	r26, 0x40	; 64
    1d5a:	b0 e0       	ldi	r27, 0x00	; 0
    1d5c:	e0 e4       	ldi	r30, 0x40	; 64
    1d5e:	f0 e0       	ldi	r31, 0x00	; 0
    1d60:	80 81       	ld	r24, Z
    1d62:	8f 7e       	andi	r24, 0xEF	; 239
    1d64:	8c 93       	st	X, r24
		CLR_BIT(USCRC,UPM1);
    1d66:	a0 e4       	ldi	r26, 0x40	; 64
    1d68:	b0 e0       	ldi	r27, 0x00	; 0
    1d6a:	e0 e4       	ldi	r30, 0x40	; 64
    1d6c:	f0 e0       	ldi	r31, 0x00	; 0
    1d6e:	80 81       	ld	r24, Z
    1d70:	8f 7d       	andi	r24, 0xDF	; 223
    1d72:	8c 93       	st	X, r24
		
		/* Adjust Stop bit */
		#if  USART_STOPBIT == 0
		CLR_BIT(USCRC,USBS);
		#else
		SET_BIT(USCRC,USBS);
    1d74:	a0 e4       	ldi	r26, 0x40	; 64
    1d76:	b0 e0       	ldi	r27, 0x00	; 0
    1d78:	e0 e4       	ldi	r30, 0x40	; 64
    1d7a:	f0 e0       	ldi	r31, 0x00	; 0
    1d7c:	80 81       	ld	r24, Z
    1d7e:	88 60       	ori	r24, 0x08	; 8
    1d80:	8c 93       	st	X, r24
		#endif
		
		/* Enable TX and RX */
		SET_BIT(USCRB,TXEN);
    1d82:	aa e2       	ldi	r26, 0x2A	; 42
    1d84:	b0 e0       	ldi	r27, 0x00	; 0
    1d86:	ea e2       	ldi	r30, 0x2A	; 42
    1d88:	f0 e0       	ldi	r31, 0x00	; 0
    1d8a:	80 81       	ld	r24, Z
    1d8c:	88 60       	ori	r24, 0x08	; 8
    1d8e:	8c 93       	st	X, r24
		SET_BIT(USCRB,RXEN);
    1d90:	aa e2       	ldi	r26, 0x2A	; 42
    1d92:	b0 e0       	ldi	r27, 0x00	; 0
    1d94:	ea e2       	ldi	r30, 0x2A	; 42
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	80 81       	ld	r24, Z
    1d9a:	80 61       	ori	r24, 0x10	; 16
    1d9c:	8c 93       	st	X, r24
	
}
    1d9e:	26 96       	adiw	r28, 0x06	; 6
    1da0:	0f b6       	in	r0, 0x3f	; 63
    1da2:	f8 94       	cli
    1da4:	de bf       	out	0x3e, r29	; 62
    1da6:	0f be       	out	0x3f, r0	; 63
    1da8:	cd bf       	out	0x3d, r28	; 61
    1daa:	cf 91       	pop	r28
    1dac:	df 91       	pop	r29
    1dae:	1f 91       	pop	r17
    1db0:	0f 91       	pop	r16
    1db2:	ff 90       	pop	r15
    1db4:	ef 90       	pop	r14
    1db6:	df 90       	pop	r13
    1db8:	cf 90       	pop	r12
    1dba:	bf 90       	pop	r11
    1dbc:	af 90       	pop	r10
    1dbe:	9f 90       	pop	r9
    1dc0:	8f 90       	pop	r8
    1dc2:	7f 90       	pop	r7
    1dc4:	6f 90       	pop	r6
    1dc6:	5f 90       	pop	r5
    1dc8:	4f 90       	pop	r4
    1dca:	3f 90       	pop	r3
    1dcc:	2f 90       	pop	r2
    1dce:	08 95       	ret

00001dd0 <USART_voidSend>:

void USART_voidSend(u8 copy_uint8DataSend)
{
    1dd0:	df 93       	push	r29
    1dd2:	cf 93       	push	r28
    1dd4:	0f 92       	push	r0
    1dd6:	cd b7       	in	r28, 0x3d	; 61
    1dd8:	de b7       	in	r29, 0x3e	; 62
    1dda:	89 83       	std	Y+1, r24	; 0x01
	//Wait for UDR transmit buffer to be empty
	while(GET_BIT(USCRA,UDRE)==0);
    1ddc:	eb e2       	ldi	r30, 0x2B	; 43
    1dde:	f0 e0       	ldi	r31, 0x00	; 0
    1de0:	80 81       	ld	r24, Z
    1de2:	82 95       	swap	r24
    1de4:	86 95       	lsr	r24
    1de6:	87 70       	andi	r24, 0x07	; 7
    1de8:	88 2f       	mov	r24, r24
    1dea:	90 e0       	ldi	r25, 0x00	; 0
    1dec:	81 70       	andi	r24, 0x01	; 1
    1dee:	90 70       	andi	r25, 0x00	; 0
    1df0:	00 97       	sbiw	r24, 0x00	; 0
    1df2:	a1 f3       	breq	.-24     	; 0x1ddc <USART_voidSend+0xc>
	//Put data to UDR transmit buffer transmit
	UDR = copy_uint8DataSend ;
    1df4:	ec e2       	ldi	r30, 0x2C	; 44
    1df6:	f0 e0       	ldi	r31, 0x00	; 0
    1df8:	89 81       	ldd	r24, Y+1	; 0x01
    1dfa:	80 83       	st	Z, r24
}
    1dfc:	0f 90       	pop	r0
    1dfe:	cf 91       	pop	r28
    1e00:	df 91       	pop	r29
    1e02:	08 95       	ret

00001e04 <USART_u8Recieve>:

u8 USART_u8Recieve(void)
{
    1e04:	df 93       	push	r29
    1e06:	cf 93       	push	r28
    1e08:	cd b7       	in	r28, 0x3d	; 61
    1e0a:	de b7       	in	r29, 0x3e	; 62
	//Wait for UDR receive buffer to be filled with data
	while(GET_BIT(USCRA,RXC)==0);
    1e0c:	eb e2       	ldi	r30, 0x2B	; 43
    1e0e:	f0 e0       	ldi	r31, 0x00	; 0
    1e10:	80 81       	ld	r24, Z
    1e12:	88 23       	and	r24, r24
    1e14:	dc f7       	brge	.-10     	; 0x1e0c <USART_u8Recieve+0x8>
	//Receive data from UDR receive buffer
	return UDR;
    1e16:	ec e2       	ldi	r30, 0x2C	; 44
    1e18:	f0 e0       	ldi	r31, 0x00	; 0
    1e1a:	80 81       	ld	r24, Z
}
    1e1c:	cf 91       	pop	r28
    1e1e:	df 91       	pop	r29
    1e20:	08 95       	ret

00001e22 <USART_voidSendNumberu32>:

void USART_voidSendNumberu32(u32 copy_uint32DataSend)
{
    1e22:	df 93       	push	r29
    1e24:	cf 93       	push	r28
    1e26:	00 d0       	rcall	.+0      	; 0x1e28 <USART_voidSendNumberu32+0x6>
    1e28:	00 d0       	rcall	.+0      	; 0x1e2a <USART_voidSendNumberu32+0x8>
    1e2a:	00 d0       	rcall	.+0      	; 0x1e2c <USART_voidSendNumberu32+0xa>
    1e2c:	cd b7       	in	r28, 0x3d	; 61
    1e2e:	de b7       	in	r29, 0x3e	; 62
    1e30:	6b 83       	std	Y+3, r22	; 0x03
    1e32:	7c 83       	std	Y+4, r23	; 0x04
    1e34:	8d 83       	std	Y+5, r24	; 0x05
    1e36:	9e 83       	std	Y+6, r25	; 0x06
	u8 Data;
	//USART_voidSend ((u8)num);
	//USART_voidSend ((u8)(num>>8));
	//USART_voidSend ((u8)(num>>16));
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    1e38:	19 82       	std	Y+1, r1	; 0x01
    1e3a:	1c c0       	rjmp	.+56     	; 0x1e74 <USART_voidSendNumberu32+0x52>
	{
		Data = (u8)(copy_uint32DataSend >> (8*counter));
    1e3c:	89 81       	ldd	r24, Y+1	; 0x01
    1e3e:	88 2f       	mov	r24, r24
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	9c 01       	movw	r18, r24
    1e44:	22 0f       	add	r18, r18
    1e46:	33 1f       	adc	r19, r19
    1e48:	22 0f       	add	r18, r18
    1e4a:	33 1f       	adc	r19, r19
    1e4c:	22 0f       	add	r18, r18
    1e4e:	33 1f       	adc	r19, r19
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	ad 81       	ldd	r26, Y+5	; 0x05
    1e56:	be 81       	ldd	r27, Y+6	; 0x06
    1e58:	04 c0       	rjmp	.+8      	; 0x1e62 <USART_voidSendNumberu32+0x40>
    1e5a:	b6 95       	lsr	r27
    1e5c:	a7 95       	ror	r26
    1e5e:	97 95       	ror	r25
    1e60:	87 95       	ror	r24
    1e62:	2a 95       	dec	r18
    1e64:	d2 f7       	brpl	.-12     	; 0x1e5a <USART_voidSendNumberu32+0x38>
    1e66:	8a 83       	std	Y+2, r24	; 0x02
		USART_voidSend(Data);
    1e68:	8a 81       	ldd	r24, Y+2	; 0x02
    1e6a:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <USART_voidSend>
	u8 Data;
	//USART_voidSend ((u8)num);
	//USART_voidSend ((u8)(num>>8));
	//USART_voidSend ((u8)(num>>16));
	u8 counter;
	for(counter = 0; counter <=3 ; counter ++)
    1e6e:	89 81       	ldd	r24, Y+1	; 0x01
    1e70:	8f 5f       	subi	r24, 0xFF	; 255
    1e72:	89 83       	std	Y+1, r24	; 0x01
    1e74:	89 81       	ldd	r24, Y+1	; 0x01
    1e76:	84 30       	cpi	r24, 0x04	; 4
    1e78:	08 f3       	brcs	.-62     	; 0x1e3c <USART_voidSendNumberu32+0x1a>
	{
		Data = (u8)(copy_uint32DataSend >> (8*counter));
		USART_voidSend(Data);
	}
}
    1e7a:	26 96       	adiw	r28, 0x06	; 6
    1e7c:	0f b6       	in	r0, 0x3f	; 63
    1e7e:	f8 94       	cli
    1e80:	de bf       	out	0x3e, r29	; 62
    1e82:	0f be       	out	0x3f, r0	; 63
    1e84:	cd bf       	out	0x3d, r28	; 61
    1e86:	cf 91       	pop	r28
    1e88:	df 91       	pop	r29
    1e8a:	08 95       	ret

00001e8c <USART_u32RecieveNumberu32>:

u32 USART_u32RecieveNumberu32(void)
{
    1e8c:	df 93       	push	r29
    1e8e:	cf 93       	push	r28
    1e90:	00 d0       	rcall	.+0      	; 0x1e92 <USART_u32RecieveNumberu32+0x6>
    1e92:	00 d0       	rcall	.+0      	; 0x1e94 <USART_u32RecieveNumberu32+0x8>
    1e94:	0f 92       	push	r0
    1e96:	cd b7       	in	r28, 0x3d	; 61
    1e98:	de b7       	in	r29, 0x3e	; 62
		u32 Data = 0 ;
    1e9a:	1a 82       	std	Y+2, r1	; 0x02
    1e9c:	1b 82       	std	Y+3, r1	; 0x03
    1e9e:	1c 82       	std	Y+4, r1	; 0x04
    1ea0:	1d 82       	std	Y+5, r1	; 0x05
		u8 counter;
		for(counter = 0; counter <=3 ; counter ++)
    1ea2:	19 82       	std	Y+1, r1	; 0x01
    1ea4:	28 c0       	rjmp	.+80     	; 0x1ef6 <USART_u32RecieveNumberu32+0x6a>
		{
			Data |=(USART_u8Recieve() << (8* counter));
    1ea6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    1eaa:	28 2f       	mov	r18, r24
    1eac:	30 e0       	ldi	r19, 0x00	; 0
    1eae:	89 81       	ldd	r24, Y+1	; 0x01
    1eb0:	88 2f       	mov	r24, r24
    1eb2:	90 e0       	ldi	r25, 0x00	; 0
    1eb4:	88 0f       	add	r24, r24
    1eb6:	99 1f       	adc	r25, r25
    1eb8:	88 0f       	add	r24, r24
    1eba:	99 1f       	adc	r25, r25
    1ebc:	88 0f       	add	r24, r24
    1ebe:	99 1f       	adc	r25, r25
    1ec0:	a9 01       	movw	r20, r18
    1ec2:	02 c0       	rjmp	.+4      	; 0x1ec8 <USART_u32RecieveNumberu32+0x3c>
    1ec4:	44 0f       	add	r20, r20
    1ec6:	55 1f       	adc	r21, r21
    1ec8:	8a 95       	dec	r24
    1eca:	e2 f7       	brpl	.-8      	; 0x1ec4 <USART_u32RecieveNumberu32+0x38>
    1ecc:	ca 01       	movw	r24, r20
    1ece:	9c 01       	movw	r18, r24
    1ed0:	44 27       	eor	r20, r20
    1ed2:	37 fd       	sbrc	r19, 7
    1ed4:	40 95       	com	r20
    1ed6:	54 2f       	mov	r21, r20
    1ed8:	8a 81       	ldd	r24, Y+2	; 0x02
    1eda:	9b 81       	ldd	r25, Y+3	; 0x03
    1edc:	ac 81       	ldd	r26, Y+4	; 0x04
    1ede:	bd 81       	ldd	r27, Y+5	; 0x05
    1ee0:	82 2b       	or	r24, r18
    1ee2:	93 2b       	or	r25, r19
    1ee4:	a4 2b       	or	r26, r20
    1ee6:	b5 2b       	or	r27, r21
    1ee8:	8a 83       	std	Y+2, r24	; 0x02
    1eea:	9b 83       	std	Y+3, r25	; 0x03
    1eec:	ac 83       	std	Y+4, r26	; 0x04
    1eee:	bd 83       	std	Y+5, r27	; 0x05

u32 USART_u32RecieveNumberu32(void)
{
		u32 Data = 0 ;
		u8 counter;
		for(counter = 0; counter <=3 ; counter ++)
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	8f 5f       	subi	r24, 0xFF	; 255
    1ef4:	89 83       	std	Y+1, r24	; 0x01
    1ef6:	89 81       	ldd	r24, Y+1	; 0x01
    1ef8:	84 30       	cpi	r24, 0x04	; 4
    1efa:	a8 f2       	brcs	.-86     	; 0x1ea6 <USART_u32RecieveNumberu32+0x1a>
		{
			Data |=(USART_u8Recieve() << (8* counter));
		}
		return Data;
    1efc:	8a 81       	ldd	r24, Y+2	; 0x02
    1efe:	9b 81       	ldd	r25, Y+3	; 0x03
    1f00:	ac 81       	ldd	r26, Y+4	; 0x04
    1f02:	bd 81       	ldd	r27, Y+5	; 0x05
}
    1f04:	bc 01       	movw	r22, r24
    1f06:	cd 01       	movw	r24, r26
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
    1f0c:	0f 90       	pop	r0
    1f0e:	0f 90       	pop	r0
    1f10:	0f 90       	pop	r0
    1f12:	cf 91       	pop	r28
    1f14:	df 91       	pop	r29
    1f16:	08 95       	ret

00001f18 <USART_SendString>:

/*****
added by : ahmed nasser to be compatable with esp8266 driver
******/
void USART_SendString(char *str)					/* Send string of USART data function */
{
    1f18:	df 93       	push	r29
    1f1a:	cf 93       	push	r28
    1f1c:	00 d0       	rcall	.+0      	; 0x1f1e <USART_SendString+0x6>
    1f1e:	00 d0       	rcall	.+0      	; 0x1f20 <USART_SendString+0x8>
    1f20:	cd b7       	in	r28, 0x3d	; 61
    1f22:	de b7       	in	r29, 0x3e	; 62
    1f24:	9c 83       	std	Y+4, r25	; 0x04
    1f26:	8b 83       	std	Y+3, r24	; 0x03
	int i=0;
    1f28:	1a 82       	std	Y+2, r1	; 0x02
    1f2a:	19 82       	std	Y+1, r1	; 0x01
    1f2c:	0f c0       	rjmp	.+30     	; 0x1f4c <USART_SendString+0x34>
	while (str[i]!='\0')
	{
		USART_voidSend(str[i]);						/* Send each char of string till the NULL */
    1f2e:	29 81       	ldd	r18, Y+1	; 0x01
    1f30:	3a 81       	ldd	r19, Y+2	; 0x02
    1f32:	8b 81       	ldd	r24, Y+3	; 0x03
    1f34:	9c 81       	ldd	r25, Y+4	; 0x04
    1f36:	fc 01       	movw	r30, r24
    1f38:	e2 0f       	add	r30, r18
    1f3a:	f3 1f       	adc	r31, r19
    1f3c:	80 81       	ld	r24, Z
    1f3e:	0e 94 e8 0e 	call	0x1dd0	; 0x1dd0 <USART_voidSend>
		i++;
    1f42:	89 81       	ldd	r24, Y+1	; 0x01
    1f44:	9a 81       	ldd	r25, Y+2	; 0x02
    1f46:	01 96       	adiw	r24, 0x01	; 1
    1f48:	9a 83       	std	Y+2, r25	; 0x02
    1f4a:	89 83       	std	Y+1, r24	; 0x01
added by : ahmed nasser to be compatable with esp8266 driver
******/
void USART_SendString(char *str)					/* Send string of USART data function */
{
	int i=0;
	while (str[i]!='\0')
    1f4c:	29 81       	ldd	r18, Y+1	; 0x01
    1f4e:	3a 81       	ldd	r19, Y+2	; 0x02
    1f50:	8b 81       	ldd	r24, Y+3	; 0x03
    1f52:	9c 81       	ldd	r25, Y+4	; 0x04
    1f54:	fc 01       	movw	r30, r24
    1f56:	e2 0f       	add	r30, r18
    1f58:	f3 1f       	adc	r31, r19
    1f5a:	80 81       	ld	r24, Z
    1f5c:	88 23       	and	r24, r24
    1f5e:	39 f7       	brne	.-50     	; 0x1f2e <USART_SendString+0x16>
	{
		USART_voidSend(str[i]);						/* Send each char of string till the NULL */
		i++;
	}
    1f60:	0f 90       	pop	r0
    1f62:	0f 90       	pop	r0
    1f64:	0f 90       	pop	r0
    1f66:	0f 90       	pop	r0
    1f68:	cf 91       	pop	r28
    1f6a:	df 91       	pop	r29
    1f6c:	08 95       	ret

00001f6e <T0_FastPwm>:
#include"PWM_private.h"



void T0_FastPwm(f32 duty, u8 pulse)
{
    1f6e:	0f 93       	push	r16
    1f70:	1f 93       	push	r17
    1f72:	df 93       	push	r29
    1f74:	cf 93       	push	r28
    1f76:	cd b7       	in	r28, 0x3d	; 61
    1f78:	de b7       	in	r29, 0x3e	; 62
    1f7a:	27 97       	sbiw	r28, 0x07	; 7
    1f7c:	0f b6       	in	r0, 0x3f	; 63
    1f7e:	f8 94       	cli
    1f80:	de bf       	out	0x3e, r29	; 62
    1f82:	0f be       	out	0x3f, r0	; 63
    1f84:	cd bf       	out	0x3d, r28	; 61
    1f86:	69 83       	std	Y+1, r22	; 0x01
    1f88:	7a 83       	std	Y+2, r23	; 0x02
    1f8a:	8b 83       	std	Y+3, r24	; 0x03
    1f8c:	9c 83       	std	Y+4, r25	; 0x04
    1f8e:	4d 83       	std	Y+5, r20	; 0x05
	//OCR0 as output
	DDRB_REG=(1<<3);
    1f90:	e7 e3       	ldi	r30, 0x37	; 55
    1f92:	f0 e0       	ldi	r31, 0x00	; 0
    1f94:	88 e0       	ldi	r24, 0x08	; 8
    1f96:	80 83       	st	Z, r24

	switch(pulse)
    1f98:	8d 81       	ldd	r24, Y+5	; 0x05
    1f9a:	28 2f       	mov	r18, r24
    1f9c:	30 e0       	ldi	r19, 0x00	; 0
    1f9e:	3f 83       	std	Y+7, r19	; 0x07
    1fa0:	2e 83       	std	Y+6, r18	; 0x06
    1fa2:	8e 81       	ldd	r24, Y+6	; 0x06
    1fa4:	9f 81       	ldd	r25, Y+7	; 0x07
    1fa6:	81 30       	cpi	r24, 0x01	; 1
    1fa8:	91 05       	cpc	r25, r1
    1faa:	31 f0       	breq	.+12     	; 0x1fb8 <T0_FastPwm+0x4a>
    1fac:	ee 81       	ldd	r30, Y+6	; 0x06
    1fae:	ff 81       	ldd	r31, Y+7	; 0x07
    1fb0:	e2 30       	cpi	r30, 0x02	; 2
    1fb2:	f1 05       	cpc	r31, r1
    1fb4:	d1 f1       	breq	.+116    	; 0x202a <T0_FastPwm+0xbc>
    1fb6:	67 c0       	rjmp	.+206    	; 0x2086 <T0_FastPwm+0x118>
	{
	case INVERTED:
		OCR0 = TOP-(TOP* (duty/100))-1;
    1fb8:	0c e5       	ldi	r16, 0x5C	; 92
    1fba:	10 e0       	ldi	r17, 0x00	; 0
    1fbc:	69 81       	ldd	r22, Y+1	; 0x01
    1fbe:	7a 81       	ldd	r23, Y+2	; 0x02
    1fc0:	8b 81       	ldd	r24, Y+3	; 0x03
    1fc2:	9c 81       	ldd	r25, Y+4	; 0x04
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	30 e0       	ldi	r19, 0x00	; 0
    1fc8:	48 ec       	ldi	r20, 0xC8	; 200
    1fca:	52 e4       	ldi	r21, 0x42	; 66
    1fcc:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    1fd0:	dc 01       	movw	r26, r24
    1fd2:	cb 01       	movw	r24, r22
    1fd4:	bc 01       	movw	r22, r24
    1fd6:	cd 01       	movw	r24, r26
    1fd8:	20 e0       	ldi	r18, 0x00	; 0
    1fda:	30 e0       	ldi	r19, 0x00	; 0
    1fdc:	40 e8       	ldi	r20, 0x80	; 128
    1fde:	53 ec       	ldi	r21, 0xC3	; 195
    1fe0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    1fe4:	dc 01       	movw	r26, r24
    1fe6:	cb 01       	movw	r24, r22
    1fe8:	bc 01       	movw	r22, r24
    1fea:	cd 01       	movw	r24, r26
    1fec:	20 e0       	ldi	r18, 0x00	; 0
    1fee:	30 e0       	ldi	r19, 0x00	; 0
    1ff0:	40 e8       	ldi	r20, 0x80	; 128
    1ff2:	53 e4       	ldi	r21, 0x43	; 67
    1ff4:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__addsf3>
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	cb 01       	movw	r24, r22
    1ffc:	bc 01       	movw	r22, r24
    1ffe:	cd 01       	movw	r24, r26
    2000:	20 e0       	ldi	r18, 0x00	; 0
    2002:	30 e0       	ldi	r19, 0x00	; 0
    2004:	40 e8       	ldi	r20, 0x80	; 128
    2006:	5f e3       	ldi	r21, 0x3F	; 63
    2008:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
    200c:	dc 01       	movw	r26, r24
    200e:	cb 01       	movw	r24, r22
    2010:	bc 01       	movw	r22, r24
    2012:	cd 01       	movw	r24, r26
    2014:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2018:	dc 01       	movw	r26, r24
    201a:	cb 01       	movw	r24, r22
    201c:	f8 01       	movw	r30, r16
    201e:	80 83       	st	Z, r24
		TCCR0= (1<<COM00) | (1<<COM01) | (1<<WGM00) | (1<<WGM01) | PWM_prescaller;
    2020:	e3 e5       	ldi	r30, 0x53	; 83
    2022:	f0 e0       	ldi	r31, 0x00	; 0
    2024:	89 e7       	ldi	r24, 0x79	; 121
    2026:	80 83       	st	Z, r24
    2028:	2e c0       	rjmp	.+92     	; 0x2086 <T0_FastPwm+0x118>
		break;

	case NON_INVERTED:
		OCR0 = (TOP-duty*TOP)-1;
    202a:	0c e5       	ldi	r16, 0x5C	; 92
    202c:	10 e0       	ldi	r17, 0x00	; 0
    202e:	69 81       	ldd	r22, Y+1	; 0x01
    2030:	7a 81       	ldd	r23, Y+2	; 0x02
    2032:	8b 81       	ldd	r24, Y+3	; 0x03
    2034:	9c 81       	ldd	r25, Y+4	; 0x04
    2036:	20 e0       	ldi	r18, 0x00	; 0
    2038:	30 e0       	ldi	r19, 0x00	; 0
    203a:	40 e8       	ldi	r20, 0x80	; 128
    203c:	53 ec       	ldi	r21, 0xC3	; 195
    203e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    2042:	dc 01       	movw	r26, r24
    2044:	cb 01       	movw	r24, r22
    2046:	bc 01       	movw	r22, r24
    2048:	cd 01       	movw	r24, r26
    204a:	20 e0       	ldi	r18, 0x00	; 0
    204c:	30 e0       	ldi	r19, 0x00	; 0
    204e:	40 e8       	ldi	r20, 0x80	; 128
    2050:	53 e4       	ldi	r21, 0x43	; 67
    2052:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__addsf3>
    2056:	dc 01       	movw	r26, r24
    2058:	cb 01       	movw	r24, r22
    205a:	bc 01       	movw	r22, r24
    205c:	cd 01       	movw	r24, r26
    205e:	20 e0       	ldi	r18, 0x00	; 0
    2060:	30 e0       	ldi	r19, 0x00	; 0
    2062:	40 e8       	ldi	r20, 0x80	; 128
    2064:	5f e3       	ldi	r21, 0x3F	; 63
    2066:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
    206a:	dc 01       	movw	r26, r24
    206c:	cb 01       	movw	r24, r22
    206e:	bc 01       	movw	r22, r24
    2070:	cd 01       	movw	r24, r26
    2072:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2076:	dc 01       	movw	r26, r24
    2078:	cb 01       	movw	r24, r22
    207a:	f8 01       	movw	r30, r16
    207c:	80 83       	st	Z, r24
		TCCR0=  (1<<COM01) | (1<<WGM00) | (1<<WGM01) | PWM_prescaller;
    207e:	e3 e5       	ldi	r30, 0x53	; 83
    2080:	f0 e0       	ldi	r31, 0x00	; 0
    2082:	89 e6       	ldi	r24, 0x69	; 105
    2084:	80 83       	st	Z, r24
	default :
		break;

	}

}
    2086:	27 96       	adiw	r28, 0x07	; 7
    2088:	0f b6       	in	r0, 0x3f	; 63
    208a:	f8 94       	cli
    208c:	de bf       	out	0x3e, r29	; 62
    208e:	0f be       	out	0x3f, r0	; 63
    2090:	cd bf       	out	0x3d, r28	; 61
    2092:	cf 91       	pop	r28
    2094:	df 91       	pop	r29
    2096:	1f 91       	pop	r17
    2098:	0f 91       	pop	r16
    209a:	08 95       	ret

0000209c <T0_PhaseCorrectPwm>:


void T0_PhaseCorrectPwm(f32 duty, u8 pulse)
{
    209c:	0f 93       	push	r16
    209e:	1f 93       	push	r17
    20a0:	df 93       	push	r29
    20a2:	cf 93       	push	r28
    20a4:	cd b7       	in	r28, 0x3d	; 61
    20a6:	de b7       	in	r29, 0x3e	; 62
    20a8:	27 97       	sbiw	r28, 0x07	; 7
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	f8 94       	cli
    20ae:	de bf       	out	0x3e, r29	; 62
    20b0:	0f be       	out	0x3f, r0	; 63
    20b2:	cd bf       	out	0x3d, r28	; 61
    20b4:	69 83       	std	Y+1, r22	; 0x01
    20b6:	7a 83       	std	Y+2, r23	; 0x02
    20b8:	8b 83       	std	Y+3, r24	; 0x03
    20ba:	9c 83       	std	Y+4, r25	; 0x04
    20bc:	4d 83       	std	Y+5, r20	; 0x05
	DDRB_REG = (1 << 3);
    20be:	e7 e3       	ldi	r30, 0x37	; 55
    20c0:	f0 e0       	ldi	r31, 0x00	; 0
    20c2:	88 e0       	ldi	r24, 0x08	; 8
    20c4:	80 83       	st	Z, r24

	switch(pulse)
    20c6:	8d 81       	ldd	r24, Y+5	; 0x05
    20c8:	28 2f       	mov	r18, r24
    20ca:	30 e0       	ldi	r19, 0x00	; 0
    20cc:	3f 83       	std	Y+7, r19	; 0x07
    20ce:	2e 83       	std	Y+6, r18	; 0x06
    20d0:	8e 81       	ldd	r24, Y+6	; 0x06
    20d2:	9f 81       	ldd	r25, Y+7	; 0x07
    20d4:	81 30       	cpi	r24, 0x01	; 1
    20d6:	91 05       	cpc	r25, r1
    20d8:	31 f0       	breq	.+12     	; 0x20e6 <T0_PhaseCorrectPwm+0x4a>
    20da:	ee 81       	ldd	r30, Y+6	; 0x06
    20dc:	ff 81       	ldd	r31, Y+7	; 0x07
    20de:	e2 30       	cpi	r30, 0x02	; 2
    20e0:	f1 05       	cpc	r31, r1
    20e2:	81 f1       	breq	.+96     	; 0x2144 <T0_PhaseCorrectPwm+0xa8>
    20e4:	53 c0       	rjmp	.+166    	; 0x218c <T0_PhaseCorrectPwm+0xf0>
	{
	case INVERTED :
		OCR0 = ((TOP-1)-(duty*(TOP-1)/100));
    20e6:	0c e5       	ldi	r16, 0x5C	; 92
    20e8:	10 e0       	ldi	r17, 0x00	; 0
    20ea:	69 81       	ldd	r22, Y+1	; 0x01
    20ec:	7a 81       	ldd	r23, Y+2	; 0x02
    20ee:	8b 81       	ldd	r24, Y+3	; 0x03
    20f0:	9c 81       	ldd	r25, Y+4	; 0x04
    20f2:	20 e0       	ldi	r18, 0x00	; 0
    20f4:	30 e0       	ldi	r19, 0x00	; 0
    20f6:	4f e7       	ldi	r20, 0x7F	; 127
    20f8:	53 e4       	ldi	r21, 0x43	; 67
    20fa:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    20fe:	dc 01       	movw	r26, r24
    2100:	cb 01       	movw	r24, r22
    2102:	bc 01       	movw	r22, r24
    2104:	cd 01       	movw	r24, r26
    2106:	20 e0       	ldi	r18, 0x00	; 0
    2108:	30 e0       	ldi	r19, 0x00	; 0
    210a:	48 ec       	ldi	r20, 0xC8	; 200
    210c:	52 ec       	ldi	r21, 0xC2	; 194
    210e:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    2112:	dc 01       	movw	r26, r24
    2114:	cb 01       	movw	r24, r22
    2116:	bc 01       	movw	r22, r24
    2118:	cd 01       	movw	r24, r26
    211a:	20 e0       	ldi	r18, 0x00	; 0
    211c:	30 e0       	ldi	r19, 0x00	; 0
    211e:	4f e7       	ldi	r20, 0x7F	; 127
    2120:	53 e4       	ldi	r21, 0x43	; 67
    2122:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__addsf3>
    2126:	dc 01       	movw	r26, r24
    2128:	cb 01       	movw	r24, r22
    212a:	bc 01       	movw	r22, r24
    212c:	cd 01       	movw	r24, r26
    212e:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    2132:	dc 01       	movw	r26, r24
    2134:	cb 01       	movw	r24, r22
    2136:	f8 01       	movw	r30, r16
    2138:	80 83       	st	Z, r24
		TCCR0 = (1 << WGM00) | (1 << COM01) | (1 << COM00) | PWM_prescaller;
    213a:	e3 e5       	ldi	r30, 0x53	; 83
    213c:	f0 e0       	ldi	r31, 0x00	; 0
    213e:	81 e7       	ldi	r24, 0x71	; 113
    2140:	80 83       	st	Z, r24
    2142:	24 c0       	rjmp	.+72     	; 0x218c <T0_PhaseCorrectPwm+0xf0>
		break;

	case NON_INVERTED :
		OCR0 = (duty*(TOP-1))/100;
    2144:	0c e5       	ldi	r16, 0x5C	; 92
    2146:	10 e0       	ldi	r17, 0x00	; 0
    2148:	69 81       	ldd	r22, Y+1	; 0x01
    214a:	7a 81       	ldd	r23, Y+2	; 0x02
    214c:	8b 81       	ldd	r24, Y+3	; 0x03
    214e:	9c 81       	ldd	r25, Y+4	; 0x04
    2150:	20 e0       	ldi	r18, 0x00	; 0
    2152:	30 e0       	ldi	r19, 0x00	; 0
    2154:	4f e7       	ldi	r20, 0x7F	; 127
    2156:	53 e4       	ldi	r21, 0x43	; 67
    2158:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    215c:	dc 01       	movw	r26, r24
    215e:	cb 01       	movw	r24, r22
    2160:	bc 01       	movw	r22, r24
    2162:	cd 01       	movw	r24, r26
    2164:	20 e0       	ldi	r18, 0x00	; 0
    2166:	30 e0       	ldi	r19, 0x00	; 0
    2168:	48 ec       	ldi	r20, 0xC8	; 200
    216a:	52 e4       	ldi	r21, 0x42	; 66
    216c:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    2170:	dc 01       	movw	r26, r24
    2172:	cb 01       	movw	r24, r22
    2174:	bc 01       	movw	r22, r24
    2176:	cd 01       	movw	r24, r26
    2178:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    217c:	dc 01       	movw	r26, r24
    217e:	cb 01       	movw	r24, r22
    2180:	f8 01       	movw	r30, r16
    2182:	80 83       	st	Z, r24
		TCCR0 = (1 << WGM00) | (1 << COM01) | PWM_prescaller;
    2184:	e3 e5       	ldi	r30, 0x53	; 83
    2186:	f0 e0       	ldi	r31, 0x00	; 0
    2188:	81 e6       	ldi	r24, 0x61	; 97
    218a:	80 83       	st	Z, r24

	default :
		break;
	}

}
    218c:	27 96       	adiw	r28, 0x07	; 7
    218e:	0f b6       	in	r0, 0x3f	; 63
    2190:	f8 94       	cli
    2192:	de bf       	out	0x3e, r29	; 62
    2194:	0f be       	out	0x3f, r0	; 63
    2196:	cd bf       	out	0x3d, r28	; 61
    2198:	cf 91       	pop	r28
    219a:	df 91       	pop	r29
    219c:	1f 91       	pop	r17
    219e:	0f 91       	pop	r16
    21a0:	08 95       	ret

000021a2 <I2C_voidInit>:
#include "I2C_interface.h"
#include "I2C_private.h"
#include "I2C_config.h"

void I2C_voidInit(void)
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
#if I2C_MODE == MASTER
	TWAR = ( NODE_ADDRESS << 1 ) | GEN_CALL ;  // Write the Node Address and State the General Call Mode
    21aa:	e2 e2       	ldi	r30, 0x22	; 34
    21ac:	f0 e0       	ldi	r31, 0x00	; 0
    21ae:	82 e0       	ldi	r24, 0x02	; 2
    21b0:	80 83       	st	Z, r24
	CLR_BIT( TWSR, 0) ; // Select the pre-scaler
    21b2:	a1 e2       	ldi	r26, 0x21	; 33
    21b4:	b0 e0       	ldi	r27, 0x00	; 0
    21b6:	e1 e2       	ldi	r30, 0x21	; 33
    21b8:	f0 e0       	ldi	r31, 0x00	; 0
    21ba:	80 81       	ld	r24, Z
    21bc:	8e 7f       	andi	r24, 0xFE	; 254
    21be:	8c 93       	st	X, r24
	CLR_BIT( TWSR, 1) ;
    21c0:	a1 e2       	ldi	r26, 0x21	; 33
    21c2:	b0 e0       	ldi	r27, 0x00	; 0
    21c4:	e1 e2       	ldi	r30, 0x21	; 33
    21c6:	f0 e0       	ldi	r31, 0x00	; 0
    21c8:	80 81       	ld	r24, Z
    21ca:	8d 7f       	andi	r24, 0xFD	; 253
    21cc:	8c 93       	st	X, r24
	TWBR = I2C_SPEED; // Select the I2C Speed as Standard speed (100KHz) the MC Clock is 8MHz
    21ce:	e0 e2       	ldi	r30, 0x20	; 32
    21d0:	f0 e0       	ldi	r31, 0x00	; 0
    21d2:	80 e2       	ldi	r24, 0x20	; 32
    21d4:	80 83       	st	Z, r24
	TWCR->Bit.TWEN = 1;  //Enable the I2C
    21d6:	e6 e5       	ldi	r30, 0x56	; 86
    21d8:	f0 e0       	ldi	r31, 0x00	; 0
    21da:	80 81       	ld	r24, Z
    21dc:	84 60       	ori	r24, 0x04	; 4
    21de:	80 83       	st	Z, r24
	TWAR = ( NODE_ADDRESS << 1 ) | GEN_CALL ; // Select the Node Status
	TWCR->Bit->TWEN = 1;  //Enable the I2C
#else
#error "Wrong I2C Mode"
#endif
}
    21e0:	cf 91       	pop	r28
    21e2:	df 91       	pop	r29
    21e4:	08 95       	ret

000021e6 <I2C_MASTER_voidSetConfigure>:
void I2C_MASTER_voidSetConfigure(I2C_MASTER_CONFIG Copy_structConfigurations)
{
    21e6:	df 93       	push	r29
    21e8:	cf 93       	push	r28
    21ea:	00 d0       	rcall	.+0      	; 0x21ec <I2C_MASTER_voidSetConfigure+0x6>
    21ec:	0f 92       	push	r0
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	69 83       	std	Y+1, r22	; 0x01
    21f4:	7a 83       	std	Y+2, r23	; 0x02
    21f6:	8b 83       	std	Y+3, r24	; 0x03
	TWAR = Copy_structConfigurations.NodeAddress | Copy_structConfigurations.G_CALL ;
    21f8:	e2 e2       	ldi	r30, 0x22	; 34
    21fa:	f0 e0       	ldi	r31, 0x00	; 0
    21fc:	9a 81       	ldd	r25, Y+2	; 0x02
    21fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2200:	89 2b       	or	r24, r25
    2202:	80 83       	st	Z, r24
	/* Pre-scaler 1 */
	CLR_BIT( TWSR , 0 );
    2204:	a1 e2       	ldi	r26, 0x21	; 33
    2206:	b0 e0       	ldi	r27, 0x00	; 0
    2208:	e1 e2       	ldi	r30, 0x21	; 33
    220a:	f0 e0       	ldi	r31, 0x00	; 0
    220c:	80 81       	ld	r24, Z
    220e:	8e 7f       	andi	r24, 0xFE	; 254
    2210:	8c 93       	st	X, r24
	CLR_BIT( TWSR , 1 );
    2212:	a1 e2       	ldi	r26, 0x21	; 33
    2214:	b0 e0       	ldi	r27, 0x00	; 0
    2216:	e1 e2       	ldi	r30, 0x21	; 33
    2218:	f0 e0       	ldi	r31, 0x00	; 0
    221a:	80 81       	ld	r24, Z
    221c:	8d 7f       	andi	r24, 0xFD	; 253
    221e:	8c 93       	st	X, r24
	/* Speed due to 8MHz Clock Frequency Crystal */
	TWBR = Copy_structConfigurations.speed;
    2220:	e0 e2       	ldi	r30, 0x20	; 32
    2222:	f0 e0       	ldi	r31, 0x00	; 0
    2224:	89 81       	ldd	r24, Y+1	; 0x01
    2226:	80 83       	st	Z, r24
	TWCR->Bit.TWEN = 1; // Enable the IIC Circuit
    2228:	e6 e5       	ldi	r30, 0x56	; 86
    222a:	f0 e0       	ldi	r31, 0x00	; 0
    222c:	80 81       	ld	r24, Z
    222e:	84 60       	ori	r24, 0x04	; 4
    2230:	80 83       	st	Z, r24
}
    2232:	0f 90       	pop	r0
    2234:	0f 90       	pop	r0
    2236:	0f 90       	pop	r0
    2238:	cf 91       	pop	r28
    223a:	df 91       	pop	r29
    223c:	08 95       	ret

0000223e <I2C_MASTER_enumSendStart>:

ERROR_STATE I2C_MASTER_enumSendStart(void)
{
    223e:	df 93       	push	r29
    2240:	cf 93       	push	r28
    2242:	0f 92       	push	r0
    2244:	cd b7       	in	r28, 0x3d	; 61
    2246:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2248:	19 82       	std	Y+1, r1	; 0x01
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
    224a:	e6 e5       	ldi	r30, 0x56	; 86
    224c:	f0 e0       	ldi	r31, 0x00	; 0
    224e:	80 81       	ld	r24, Z
    2250:	80 62       	ori	r24, 0x20	; 32
    2252:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    2254:	e6 e5       	ldi	r30, 0x56	; 86
    2256:	f0 e0       	ldi	r31, 0x00	; 0
    2258:	80 81       	ld	r24, Z
    225a:	80 68       	ori	r24, 0x80	; 128
    225c:	80 83       	st	Z, r24
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
    225e:	e6 e5       	ldi	r30, 0x56	; 86
    2260:	f0 e0       	ldi	r31, 0x00	; 0
    2262:	80 81       	ld	r24, Z
    2264:	80 78       	andi	r24, 0x80	; 128
    2266:	88 23       	and	r24, r24
    2268:	d1 f3       	breq	.-12     	; 0x225e <I2C_MASTER_enumSendStart+0x20>
	// Checking the Status Register Value With START CONDITION
	if ( (TWSR & 0xF8) == 0x08 )
    226a:	e1 e2       	ldi	r30, 0x21	; 33
    226c:	f0 e0       	ldi	r31, 0x00	; 0
    226e:	80 81       	ld	r24, Z
    2270:	88 2f       	mov	r24, r24
    2272:	90 e0       	ldi	r25, 0x00	; 0
    2274:	88 7f       	andi	r24, 0xF8	; 248
    2276:	90 70       	andi	r25, 0x00	; 0
    2278:	88 30       	cpi	r24, 0x08	; 8
    227a:	91 05       	cpc	r25, r1
    227c:	11 f4       	brne	.+4      	; 0x2282 <I2C_MASTER_enumSendStart+0x44>
	{
		State = OK;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	89 83       	std	Y+1, r24	; 0x01
	}

	return State;
    2282:	89 81       	ldd	r24, Y+1	; 0x01

}
    2284:	0f 90       	pop	r0
    2286:	cf 91       	pop	r28
    2288:	df 91       	pop	r29
    228a:	08 95       	ret

0000228c <I2C_MASTER_enumSendRepeatedStart>:
ERROR_STATE I2C_MASTER_enumSendRepeatedStart(void)
{
    228c:	df 93       	push	r29
    228e:	cf 93       	push	r28
    2290:	0f 92       	push	r0
    2292:	cd b7       	in	r28, 0x3d	; 61
    2294:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2296:	19 82       	std	Y+1, r1	; 0x01
	// Setting the Start Condition Bit
	TWCR->Bit.TWSTA = 1;
    2298:	e6 e5       	ldi	r30, 0x56	; 86
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	80 62       	ori	r24, 0x20	; 32
    22a0:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    22a2:	e6 e5       	ldi	r30, 0x56	; 86
    22a4:	f0 e0       	ldi	r31, 0x00	; 0
    22a6:	80 81       	ld	r24, Z
    22a8:	80 68       	ori	r24, 0x80	; 128
    22aa:	80 83       	st	Z, r24
	// pooling the Flag
	while( ! TWCR->Bit.TWINT );
    22ac:	e6 e5       	ldi	r30, 0x56	; 86
    22ae:	f0 e0       	ldi	r31, 0x00	; 0
    22b0:	80 81       	ld	r24, Z
    22b2:	80 78       	andi	r24, 0x80	; 128
    22b4:	88 23       	and	r24, r24
    22b6:	d1 f3       	breq	.-12     	; 0x22ac <I2C_MASTER_enumSendRepeatedStart+0x20>
	// Checking the Status Register Value with MASTER REPEATED START CONDITION
	if ( (TWSR & 0xF8) == 0x10 )
    22b8:	e1 e2       	ldi	r30, 0x21	; 33
    22ba:	f0 e0       	ldi	r31, 0x00	; 0
    22bc:	80 81       	ld	r24, Z
    22be:	88 2f       	mov	r24, r24
    22c0:	90 e0       	ldi	r25, 0x00	; 0
    22c2:	88 7f       	andi	r24, 0xF8	; 248
    22c4:	90 70       	andi	r25, 0x00	; 0
    22c6:	80 31       	cpi	r24, 0x10	; 16
    22c8:	91 05       	cpc	r25, r1
    22ca:	11 f4       	brne	.+4      	; 0x22d0 <I2C_MASTER_enumSendRepeatedStart+0x44>
	{
		State = OK;
    22cc:	81 e0       	ldi	r24, 0x01	; 1
    22ce:	89 83       	std	Y+1, r24	; 0x01
	}

	return State;
    22d0:	89 81       	ldd	r24, Y+1	; 0x01
}
    22d2:	0f 90       	pop	r0
    22d4:	cf 91       	pop	r28
    22d6:	df 91       	pop	r29
    22d8:	08 95       	ret

000022da <I2C_MASTER_voidSendSTOP>:

void I2C_MASTER_voidSendSTOP(void)
{
    22da:	df 93       	push	r29
    22dc:	cf 93       	push	r28
    22de:	cd b7       	in	r28, 0x3d	; 61
    22e0:	de b7       	in	r29, 0x3e	; 62
	// Setting the Stop Condition Bit
	TWCR->Bit.TWSTO = 1;
    22e2:	e6 e5       	ldi	r30, 0x56	; 86
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	80 61       	ori	r24, 0x10	; 16
    22ea:	80 83       	st	Z, r24
	// Clearing the Flag by Writing one
	TWCR->Bit.TWINT = 1;
    22ec:	e6 e5       	ldi	r30, 0x56	; 86
    22ee:	f0 e0       	ldi	r31, 0x00	; 0
    22f0:	80 81       	ld	r24, Z
    22f2:	80 68       	ori	r24, 0x80	; 128
    22f4:	80 83       	st	Z, r24
}
    22f6:	cf 91       	pop	r28
    22f8:	df 91       	pop	r29
    22fa:	08 95       	ret

000022fc <I2C_MASTER_enumSendSlaveAddressWithRead>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithRead(u8 Copy_u8SlaveAddress)
{
    22fc:	df 93       	push	r29
    22fe:	cf 93       	push	r28
    2300:	00 d0       	rcall	.+0      	; 0x2302 <I2C_MASTER_enumSendSlaveAddressWithRead+0x6>
    2302:	cd b7       	in	r28, 0x3d	; 61
    2304:	de b7       	in	r29, 0x3e	; 62
    2306:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    2308:	19 82       	std	Y+1, r1	; 0x01
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) | 0x01 ;
    230a:	e3 e2       	ldi	r30, 0x23	; 35
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	8a 81       	ldd	r24, Y+2	; 0x02
    2310:	88 2f       	mov	r24, r24
    2312:	90 e0       	ldi	r25, 0x00	; 0
    2314:	88 0f       	add	r24, r24
    2316:	99 1f       	adc	r25, r25
    2318:	81 60       	ori	r24, 0x01	; 1
    231a:	80 83       	st	Z, r24
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
    231c:	e6 e5       	ldi	r30, 0x56	; 86
    231e:	f0 e0       	ldi	r31, 0x00	; 0
    2320:	80 81       	ld	r24, Z
    2322:	8f 7d       	andi	r24, 0xDF	; 223
    2324:	80 83       	st	Z, r24
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2326:	e6 e5       	ldi	r30, 0x56	; 86
    2328:	f0 e0       	ldi	r31, 0x00	; 0
    232a:	80 81       	ld	r24, Z
    232c:	80 68       	ori	r24, 0x80	; 128
    232e:	80 83       	st	Z, r24
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
    2330:	e6 e5       	ldi	r30, 0x56	; 86
    2332:	f0 e0       	ldi	r31, 0x00	; 0
    2334:	80 81       	ld	r24, Z
    2336:	80 78       	andi	r24, 0x80	; 128
    2338:	88 23       	and	r24, r24
    233a:	d1 f3       	breq	.-12     	; 0x2330 <I2C_MASTER_enumSendSlaveAddressWithRead+0x34>
	if ( (TWSR & 0xF8) == 0x40)
    233c:	e1 e2       	ldi	r30, 0x21	; 33
    233e:	f0 e0       	ldi	r31, 0x00	; 0
    2340:	80 81       	ld	r24, Z
    2342:	88 2f       	mov	r24, r24
    2344:	90 e0       	ldi	r25, 0x00	; 0
    2346:	88 7f       	andi	r24, 0xF8	; 248
    2348:	90 70       	andi	r25, 0x00	; 0
    234a:	80 34       	cpi	r24, 0x40	; 64
    234c:	91 05       	cpc	r25, r1
    234e:	11 f4       	brne	.+4      	; 0x2354 <I2C_MASTER_enumSendSlaveAddressWithRead+0x58>
	{
		State = OK;
    2350:	81 e0       	ldi	r24, 0x01	; 1
    2352:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    2354:	89 81       	ldd	r24, Y+1	; 0x01
}
    2356:	0f 90       	pop	r0
    2358:	0f 90       	pop	r0
    235a:	cf 91       	pop	r28
    235c:	df 91       	pop	r29
    235e:	08 95       	ret

00002360 <I2C_MASTER_enumSendSlaveAddressWithWrite>:

ERROR_STATE I2C_MASTER_enumSendSlaveAddressWithWrite(u8 Copy_u8SlaveAddress)
{
    2360:	df 93       	push	r29
    2362:	cf 93       	push	r28
    2364:	00 d0       	rcall	.+0      	; 0x2366 <I2C_MASTER_enumSendSlaveAddressWithWrite+0x6>
    2366:	cd b7       	in	r28, 0x3d	; 61
    2368:	de b7       	in	r29, 0x3e	; 62
    236a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    236c:	19 82       	std	Y+1, r1	; 0x01
	// Writing the Address of the Slave
	TWDR =  ( Copy_u8SlaveAddress << 1 ) ;
    236e:	e3 e2       	ldi	r30, 0x23	; 35
    2370:	f0 e0       	ldi	r31, 0x00	; 0
    2372:	8a 81       	ldd	r24, Y+2	; 0x02
    2374:	88 0f       	add	r24, r24
    2376:	80 83       	st	Z, r24
	// Clearing the Start Condition
	TWCR->Bit.TWSTA = 0;
    2378:	e6 e5       	ldi	r30, 0x56	; 86
    237a:	f0 e0       	ldi	r31, 0x00	; 0
    237c:	80 81       	ld	r24, Z
    237e:	8f 7d       	andi	r24, 0xDF	; 223
    2380:	80 83       	st	Z, r24
	// Clearing the flag
	TWCR->Bit.TWINT = 1;
    2382:	e6 e5       	ldi	r30, 0x56	; 86
    2384:	f0 e0       	ldi	r31, 0x00	; 0
    2386:	80 81       	ld	r24, Z
    2388:	80 68       	ori	r24, 0x80	; 128
    238a:	80 83       	st	Z, r24
	// pooling the Flag
	while(! TWCR->Bit.TWINT);
    238c:	e6 e5       	ldi	r30, 0x56	; 86
    238e:	f0 e0       	ldi	r31, 0x00	; 0
    2390:	80 81       	ld	r24, Z
    2392:	80 78       	andi	r24, 0x80	; 128
    2394:	88 23       	and	r24, r24
    2396:	d1 f3       	breq	.-12     	; 0x238c <I2C_MASTER_enumSendSlaveAddressWithWrite+0x2c>
	if ( (TWSR & 0xF8) == 0x18)
    2398:	e1 e2       	ldi	r30, 0x21	; 33
    239a:	f0 e0       	ldi	r31, 0x00	; 0
    239c:	80 81       	ld	r24, Z
    239e:	88 2f       	mov	r24, r24
    23a0:	90 e0       	ldi	r25, 0x00	; 0
    23a2:	88 7f       	andi	r24, 0xF8	; 248
    23a4:	90 70       	andi	r25, 0x00	; 0
    23a6:	88 31       	cpi	r24, 0x18	; 24
    23a8:	91 05       	cpc	r25, r1
    23aa:	11 f4       	brne	.+4      	; 0x23b0 <I2C_MASTER_enumSendSlaveAddressWithWrite+0x50>
	{
		State = OK;
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    23b0:	89 81       	ldd	r24, Y+1	; 0x01
}
    23b2:	0f 90       	pop	r0
    23b4:	0f 90       	pop	r0
    23b6:	cf 91       	pop	r28
    23b8:	df 91       	pop	r29
    23ba:	08 95       	ret

000023bc <I2C_MASTER_enumSendByte>:

ERROR_STATE I2C_MASTER_enumSendByte(u8 Copy_u8Data)
{
    23bc:	df 93       	push	r29
    23be:	cf 93       	push	r28
    23c0:	00 d0       	rcall	.+0      	; 0x23c2 <I2C_MASTER_enumSendByte+0x6>
    23c2:	cd b7       	in	r28, 0x3d	; 61
    23c4:	de b7       	in	r29, 0x3e	; 62
    23c6:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK ;
    23c8:	19 82       	std	Y+1, r1	; 0x01
	/// Writing data to TWDR
	TWDR = Copy_u8Data;
    23ca:	e3 e2       	ldi	r30, 0x23	; 35
    23cc:	f0 e0       	ldi	r31, 0x00	; 0
    23ce:	8a 81       	ldd	r24, Y+2	; 0x02
    23d0:	80 83       	st	Z, r24
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
    23d2:	e6 e5       	ldi	r30, 0x56	; 86
    23d4:	f0 e0       	ldi	r31, 0x00	; 0
    23d6:	80 81       	ld	r24, Z
    23d8:	80 68       	ori	r24, 0x80	; 128
    23da:	80 83       	st	Z, r24
	/// pooling the flag 
	while( !TWCR->Bit.TWINT );
    23dc:	e6 e5       	ldi	r30, 0x56	; 86
    23de:	f0 e0       	ldi	r31, 0x00	; 0
    23e0:	80 81       	ld	r24, Z
    23e2:	80 78       	andi	r24, 0x80	; 128
    23e4:	88 23       	and	r24, r24
    23e6:	d1 f3       	breq	.-12     	; 0x23dc <I2C_MASTER_enumSendByte+0x20>
	if ( (TWSR&0xF8) == 0x28 )
    23e8:	e1 e2       	ldi	r30, 0x21	; 33
    23ea:	f0 e0       	ldi	r31, 0x00	; 0
    23ec:	80 81       	ld	r24, Z
    23ee:	88 2f       	mov	r24, r24
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	88 7f       	andi	r24, 0xF8	; 248
    23f4:	90 70       	andi	r25, 0x00	; 0
    23f6:	88 32       	cpi	r24, 0x28	; 40
    23f8:	91 05       	cpc	r25, r1
    23fa:	11 f4       	brne	.+4      	; 0x2400 <I2C_MASTER_enumSendByte+0x44>
	{
		State = OK;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	89 83       	std	Y+1, r24	; 0x01
	}
	return State ;
    2400:	89 81       	ldd	r24, Y+1	; 0x01
}
    2402:	0f 90       	pop	r0
    2404:	0f 90       	pop	r0
    2406:	cf 91       	pop	r28
    2408:	df 91       	pop	r29
    240a:	08 95       	ret

0000240c <I2C_MASTER_enumReadByte_With_NACK>:
ERROR_STATE I2C_MASTER_enumReadByte_With_NACK(u8 * Copy_u8Data)
{
    240c:	df 93       	push	r29
    240e:	cf 93       	push	r28
    2410:	00 d0       	rcall	.+0      	; 0x2412 <I2C_MASTER_enumReadByte_With_NACK+0x6>
    2412:	0f 92       	push	r0
    2414:	cd b7       	in	r28, 0x3d	; 61
    2416:	de b7       	in	r29, 0x3e	; 62
    2418:	9b 83       	std	Y+3, r25	; 0x03
    241a:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    241c:	19 82       	std	Y+1, r1	; 0x01
	/// Clearing the flag
	TWCR->Bit.TWINT = 1;
    241e:	e6 e5       	ldi	r30, 0x56	; 86
    2420:	f0 e0       	ldi	r31, 0x00	; 0
    2422:	80 81       	ld	r24, Z
    2424:	80 68       	ori	r24, 0x80	; 128
    2426:	80 83       	st	Z, r24
	TWCR->Bit.TWEA = 0;
    2428:	e6 e5       	ldi	r30, 0x56	; 86
    242a:	f0 e0       	ldi	r31, 0x00	; 0
    242c:	80 81       	ld	r24, Z
    242e:	8f 7b       	andi	r24, 0xBF	; 191
    2430:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT );
    2432:	e6 e5       	ldi	r30, 0x56	; 86
    2434:	f0 e0       	ldi	r31, 0x00	; 0
    2436:	80 81       	ld	r24, Z
    2438:	80 78       	andi	r24, 0x80	; 128
    243a:	88 23       	and	r24, r24
    243c:	d1 f3       	breq	.-12     	; 0x2432 <I2C_MASTER_enumReadByte_With_NACK+0x26>
	if( (TWSR&0xF8) == 0x58)
    243e:	e1 e2       	ldi	r30, 0x21	; 33
    2440:	f0 e0       	ldi	r31, 0x00	; 0
    2442:	80 81       	ld	r24, Z
    2444:	88 2f       	mov	r24, r24
    2446:	90 e0       	ldi	r25, 0x00	; 0
    2448:	88 7f       	andi	r24, 0xF8	; 248
    244a:	90 70       	andi	r25, 0x00	; 0
    244c:	88 35       	cpi	r24, 0x58	; 88
    244e:	91 05       	cpc	r25, r1
    2450:	41 f4       	brne	.+16     	; 0x2462 <I2C_MASTER_enumReadByte_With_NACK+0x56>
	{
		State = OK;
    2452:	81 e0       	ldi	r24, 0x01	; 1
    2454:	89 83       	std	Y+1, r24	; 0x01
		/// Reading the Data from TWDR
		*Copy_u8Data = TWDR ;
    2456:	e3 e2       	ldi	r30, 0x23	; 35
    2458:	f0 e0       	ldi	r31, 0x00	; 0
    245a:	80 81       	ld	r24, Z
    245c:	ea 81       	ldd	r30, Y+2	; 0x02
    245e:	fb 81       	ldd	r31, Y+3	; 0x03
    2460:	80 83       	st	Z, r24
	}
	return State;
    2462:	89 81       	ldd	r24, Y+1	; 0x01
}
    2464:	0f 90       	pop	r0
    2466:	0f 90       	pop	r0
    2468:	0f 90       	pop	r0
    246a:	cf 91       	pop	r28
    246c:	df 91       	pop	r29
    246e:	08 95       	ret

00002470 <I2C_MASTER_enumReadByte_With_ACK>:

ERROR_STATE I2C_MASTER_enumReadByte_With_ACK( u8 * Copy_u8Buffer)
{
    2470:	df 93       	push	r29
    2472:	cf 93       	push	r28
    2474:	00 d0       	rcall	.+0      	; 0x2476 <I2C_MASTER_enumReadByte_With_ACK+0x6>
    2476:	00 d0       	rcall	.+0      	; 0x2478 <I2C_MASTER_enumReadByte_With_ACK+0x8>
    2478:	cd b7       	in	r28, 0x3d	; 61
    247a:	de b7       	in	r29, 0x3e	; 62
    247c:	9c 83       	std	Y+4, r25	; 0x04
    247e:	8b 83       	std	Y+3, r24	; 0x03
	ERROR_STATE Local_enumErrorState = NOK;
    2480:	1a 82       	std	Y+2, r1	; 0x02
	u8 Local_u8Counter = 0;
    2482:	19 82       	std	Y+1, r1	; 0x01
	TWCR->Bit.TWINT = 1;  //<Clearing the flag
    2484:	e6 e5       	ldi	r30, 0x56	; 86
    2486:	f0 e0       	ldi	r31, 0x00	; 0
    2488:	80 81       	ld	r24, Z
    248a:	80 68       	ori	r24, 0x80	; 128
    248c:	80 83       	st	Z, r24
	TWCR->Bit.TWEA = 1;  //< Sending ACK to receive more than one byte
    248e:	e6 e5       	ldi	r30, 0x56	; 86
    2490:	f0 e0       	ldi	r31, 0x00	; 0
    2492:	80 81       	ld	r24, Z
    2494:	80 64       	ori	r24, 0x40	; 64
    2496:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT);
    2498:	e6 e5       	ldi	r30, 0x56	; 86
    249a:	f0 e0       	ldi	r31, 0x00	; 0
    249c:	80 81       	ld	r24, Z
    249e:	80 78       	andi	r24, 0x80	; 128
    24a0:	88 23       	and	r24, r24
    24a2:	d1 f3       	breq	.-12     	; 0x2498 <I2C_MASTER_enumReadByte_With_ACK+0x28>
	if( (TWSR & 0xF8) == 0x50)
    24a4:	e1 e2       	ldi	r30, 0x21	; 33
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	88 2f       	mov	r24, r24
    24ac:	90 e0       	ldi	r25, 0x00	; 0
    24ae:	88 7f       	andi	r24, 0xF8	; 248
    24b0:	90 70       	andi	r25, 0x00	; 0
    24b2:	80 35       	cpi	r24, 0x50	; 80
    24b4:	91 05       	cpc	r25, r1
    24b6:	71 f4       	brne	.+28     	; 0x24d4 <I2C_MASTER_enumReadByte_With_ACK+0x64>
	{
		Local_enumErrorState = OK;
    24b8:	81 e0       	ldi	r24, 0x01	; 1
    24ba:	8a 83       	std	Y+2, r24	; 0x02
		*(Copy_u8Buffer + Local_u8Counter) = TWDR;
    24bc:	89 81       	ldd	r24, Y+1	; 0x01
    24be:	28 2f       	mov	r18, r24
    24c0:	30 e0       	ldi	r19, 0x00	; 0
    24c2:	8b 81       	ldd	r24, Y+3	; 0x03
    24c4:	9c 81       	ldd	r25, Y+4	; 0x04
    24c6:	dc 01       	movw	r26, r24
    24c8:	a2 0f       	add	r26, r18
    24ca:	b3 1f       	adc	r27, r19
    24cc:	e3 e2       	ldi	r30, 0x23	; 35
    24ce:	f0 e0       	ldi	r31, 0x00	; 0
    24d0:	80 81       	ld	r24, Z
    24d2:	8c 93       	st	X, r24
	}

	return Local_enumErrorState;
    24d4:	8a 81       	ldd	r24, Y+2	; 0x02
}
    24d6:	0f 90       	pop	r0
    24d8:	0f 90       	pop	r0
    24da:	0f 90       	pop	r0
    24dc:	0f 90       	pop	r0
    24de:	cf 91       	pop	r28
    24e0:	df 91       	pop	r29
    24e2:	08 95       	ret

000024e4 <I2C_SLAVE_voidSetConfigure>:


void I2C_SLAVE_voidSetConfigure (I2C_SLAVE_CONFIG Copy_structConfigurations )
{
    24e4:	df 93       	push	r29
    24e6:	cf 93       	push	r28
    24e8:	00 d0       	rcall	.+0      	; 0x24ea <I2C_SLAVE_voidSetConfigure+0x6>
    24ea:	cd b7       	in	r28, 0x3d	; 61
    24ec:	de b7       	in	r29, 0x3e	; 62
    24ee:	9a 83       	std	Y+2, r25	; 0x02
    24f0:	89 83       	std	Y+1, r24	; 0x01
	TWAR = (Copy_structConfigurations.NodeAddress << 1) | Copy_structConfigurations.G_CALL ;
    24f2:	e2 e2       	ldi	r30, 0x22	; 34
    24f4:	f0 e0       	ldi	r31, 0x00	; 0
    24f6:	89 81       	ldd	r24, Y+1	; 0x01
    24f8:	88 2f       	mov	r24, r24
    24fa:	90 e0       	ldi	r25, 0x00	; 0
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	98 2f       	mov	r25, r24
    2502:	8a 81       	ldd	r24, Y+2	; 0x02
    2504:	89 2b       	or	r24, r25
    2506:	80 83       	st	Z, r24
	TWCR->Bit.TWEN = 1;
    2508:	e6 e5       	ldi	r30, 0x56	; 86
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	84 60       	ori	r24, 0x04	; 4
    2510:	80 83       	st	Z, r24
}
    2512:	0f 90       	pop	r0
    2514:	0f 90       	pop	r0
    2516:	cf 91       	pop	r28
    2518:	df 91       	pop	r29
    251a:	08 95       	ret

0000251c <I2C_SLAVE_Listen_Adress_MASTER_Read>:

ERROR_STATE I2C_SLAVE_Listen_Adress_MASTER_Read(void)
{
    251c:	df 93       	push	r29
    251e:	cf 93       	push	r28
    2520:	0f 92       	push	r0
    2522:	cd b7       	in	r28, 0x3d	; 61
    2524:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2526:	19 82       	std	Y+1, r1	; 0x01
	// Enable the ACK
	TWCR->Bit.TWEA = 1;
    2528:	e6 e5       	ldi	r30, 0x56	; 86
    252a:	f0 e0       	ldi	r31, 0x00	; 0
    252c:	80 81       	ld	r24, Z
    252e:	80 64       	ori	r24, 0x40	; 64
    2530:	80 83       	st	Z, r24
	// Clear the flag
	TWCR->Bit.TWINT = 1;
    2532:	e6 e5       	ldi	r30, 0x56	; 86
    2534:	f0 e0       	ldi	r31, 0x00	; 0
    2536:	80 81       	ld	r24, Z
    2538:	80 68       	ori	r24, 0x80	; 128
    253a:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    253c:	e6 e5       	ldi	r30, 0x56	; 86
    253e:	f0 e0       	ldi	r31, 0x00	; 0
    2540:	80 81       	ld	r24, Z
    2542:	80 78       	andi	r24, 0x80	; 128
    2544:	88 23       	and	r24, r24
    2546:	d1 f3       	breq	.-12     	; 0x253c <I2C_SLAVE_Listen_Adress_MASTER_Read+0x20>
	/* MAster Will Read from Slave */
	/* Check the value of status register from Slave in Transmitter mode table */
	if ( (TWSR &0xF8) == 0xA8 )
    2548:	e1 e2       	ldi	r30, 0x21	; 33
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	88 2f       	mov	r24, r24
    2550:	90 e0       	ldi	r25, 0x00	; 0
    2552:	88 7f       	andi	r24, 0xF8	; 248
    2554:	90 70       	andi	r25, 0x00	; 0
    2556:	88 3a       	cpi	r24, 0xA8	; 168
    2558:	91 05       	cpc	r25, r1
    255a:	11 f4       	brne	.+4      	; 0x2560 <I2C_SLAVE_Listen_Adress_MASTER_Read+0x44>
	{
		State = OK ;
    255c:	81 e0       	ldi	r24, 0x01	; 1
    255e:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    2560:	89 81       	ldd	r24, Y+1	; 0x01
}
    2562:	0f 90       	pop	r0
    2564:	cf 91       	pop	r28
    2566:	df 91       	pop	r29
    2568:	08 95       	ret

0000256a <I2C_SLAVE_Listen_Adress_MASTER_Write>:
ERROR_STATE I2C_SLAVE_Listen_Adress_MASTER_Write(void)
{
    256a:	df 93       	push	r29
    256c:	cf 93       	push	r28
    256e:	0f 92       	push	r0
    2570:	cd b7       	in	r28, 0x3d	; 61
    2572:	de b7       	in	r29, 0x3e	; 62
	ERROR_STATE State = NOK;
    2574:	19 82       	std	Y+1, r1	; 0x01
	///Enable the ACK
	TWCR->Bit.TWEA = 1;
    2576:	e6 e5       	ldi	r30, 0x56	; 86
    2578:	f0 e0       	ldi	r31, 0x00	; 0
    257a:	80 81       	ld	r24, Z
    257c:	80 64       	ori	r24, 0x40	; 64
    257e:	80 83       	st	Z, r24
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    2580:	e6 e5       	ldi	r30, 0x56	; 86
    2582:	f0 e0       	ldi	r31, 0x00	; 0
    2584:	80 81       	ld	r24, Z
    2586:	80 68       	ori	r24, 0x80	; 128
    2588:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    258a:	e6 e5       	ldi	r30, 0x56	; 86
    258c:	f0 e0       	ldi	r31, 0x00	; 0
    258e:	80 81       	ld	r24, Z
    2590:	80 78       	andi	r24, 0x80	; 128
    2592:	88 23       	and	r24, r24
    2594:	d1 f3       	breq	.-12     	; 0x258a <I2C_SLAVE_Listen_Adress_MASTER_Write+0x20>
	/* MAster Will Write to Slave */
	/* Check the value of status register from Slave in Reciever mode table */
	if ( (TWSR&0xF8) == 0x60 )
    2596:	e1 e2       	ldi	r30, 0x21	; 33
    2598:	f0 e0       	ldi	r31, 0x00	; 0
    259a:	80 81       	ld	r24, Z
    259c:	88 2f       	mov	r24, r24
    259e:	90 e0       	ldi	r25, 0x00	; 0
    25a0:	88 7f       	andi	r24, 0xF8	; 248
    25a2:	90 70       	andi	r25, 0x00	; 0
    25a4:	80 36       	cpi	r24, 0x60	; 96
    25a6:	91 05       	cpc	r25, r1
    25a8:	11 f4       	brne	.+4      	; 0x25ae <I2C_SLAVE_Listen_Adress_MASTER_Write+0x44>
	{
		State = OK ;
    25aa:	81 e0       	ldi	r24, 0x01	; 1
    25ac:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    25ae:	89 81       	ldd	r24, Y+1	; 0x01
}
    25b0:	0f 90       	pop	r0
    25b2:	cf 91       	pop	r28
    25b4:	df 91       	pop	r29
    25b6:	08 95       	ret

000025b8 <I2C_SLAVE_enumSendByte_NACK>:
ERROR_STATE I2C_SLAVE_enumSendByte_NACK(u8 Copy_u8Data)
{
    25b8:	df 93       	push	r29
    25ba:	cf 93       	push	r28
    25bc:	00 d0       	rcall	.+0      	; 0x25be <I2C_SLAVE_enumSendByte_NACK+0x6>
    25be:	cd b7       	in	r28, 0x3d	; 61
    25c0:	de b7       	in	r29, 0x3e	; 62
    25c2:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    25c4:	19 82       	std	Y+1, r1	; 0x01
	/// Write the data on the Bus
	TWDR = Copy_u8Data;
    25c6:	e3 e2       	ldi	r30, 0x23	; 35
    25c8:	f0 e0       	ldi	r31, 0x00	; 0
    25ca:	8a 81       	ldd	r24, Y+2	; 0x02
    25cc:	80 83       	st	Z, r24
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    25ce:	e6 e5       	ldi	r30, 0x56	; 86
    25d0:	f0 e0       	ldi	r31, 0x00	; 0
    25d2:	80 81       	ld	r24, Z
    25d4:	80 68       	ori	r24, 0x80	; 128
    25d6:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    25d8:	e6 e5       	ldi	r30, 0x56	; 86
    25da:	f0 e0       	ldi	r31, 0x00	; 0
    25dc:	80 81       	ld	r24, Z
    25de:	80 78       	andi	r24, 0x80	; 128
    25e0:	88 23       	and	r24, r24
    25e2:	d1 f3       	breq	.-12     	; 0x25d8 <I2C_SLAVE_enumSendByte_NACK+0x20>
	if ( (TWSR&0xF8) == 0xC0 )
    25e4:	e1 e2       	ldi	r30, 0x21	; 33
    25e6:	f0 e0       	ldi	r31, 0x00	; 0
    25e8:	80 81       	ld	r24, Z
    25ea:	88 2f       	mov	r24, r24
    25ec:	90 e0       	ldi	r25, 0x00	; 0
    25ee:	88 7f       	andi	r24, 0xF8	; 248
    25f0:	90 70       	andi	r25, 0x00	; 0
    25f2:	80 3c       	cpi	r24, 0xC0	; 192
    25f4:	91 05       	cpc	r25, r1
    25f6:	11 f4       	brne	.+4      	; 0x25fc <I2C_SLAVE_enumSendByte_NACK+0x44>
	{
		State = OK ;
    25f8:	81 e0       	ldi	r24, 0x01	; 1
    25fa:	89 83       	std	Y+1, r24	; 0x01
	}
	return State;
    25fc:	89 81       	ldd	r24, Y+1	; 0x01
}
    25fe:	0f 90       	pop	r0
    2600:	0f 90       	pop	r0
    2602:	cf 91       	pop	r28
    2604:	df 91       	pop	r29
    2606:	08 95       	ret

00002608 <I2C_SLAVE_enumReadByte>:
ERROR_STATE I2C_SLAVE_enumReadByte(u8 * Copy_u8Data)
{
    2608:	df 93       	push	r29
    260a:	cf 93       	push	r28
    260c:	00 d0       	rcall	.+0      	; 0x260e <I2C_SLAVE_enumReadByte+0x6>
    260e:	0f 92       	push	r0
    2610:	cd b7       	in	r28, 0x3d	; 61
    2612:	de b7       	in	r29, 0x3e	; 62
    2614:	9b 83       	std	Y+3, r25	; 0x03
    2616:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE State = NOK;
    2618:	19 82       	std	Y+1, r1	; 0x01
	///Clear the flag
	TWCR->Bit.TWINT = 1;
    261a:	e6 e5       	ldi	r30, 0x56	; 86
    261c:	f0 e0       	ldi	r31, 0x00	; 0
    261e:	80 81       	ld	r24, Z
    2620:	80 68       	ori	r24, 0x80	; 128
    2622:	80 83       	st	Z, r24
	while( !TWCR->Bit.TWINT  );
    2624:	e6 e5       	ldi	r30, 0x56	; 86
    2626:	f0 e0       	ldi	r31, 0x00	; 0
    2628:	80 81       	ld	r24, Z
    262a:	80 78       	andi	r24, 0x80	; 128
    262c:	88 23       	and	r24, r24
    262e:	d1 f3       	breq	.-12     	; 0x2624 <I2C_SLAVE_enumReadByte+0x1c>
	if ( (TWSR&0xF8) == 0x80 )
    2630:	e1 e2       	ldi	r30, 0x21	; 33
    2632:	f0 e0       	ldi	r31, 0x00	; 0
    2634:	80 81       	ld	r24, Z
    2636:	88 2f       	mov	r24, r24
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	88 7f       	andi	r24, 0xF8	; 248
    263c:	90 70       	andi	r25, 0x00	; 0
    263e:	80 38       	cpi	r24, 0x80	; 128
    2640:	91 05       	cpc	r25, r1
    2642:	41 f4       	brne	.+16     	; 0x2654 <I2C_SLAVE_enumReadByte+0x4c>
	{
		State = OK ;
    2644:	81 e0       	ldi	r24, 0x01	; 1
    2646:	89 83       	std	Y+1, r24	; 0x01
		/* Reading the Data from the Bus */
		*Copy_u8Data = TWDR ;
    2648:	e3 e2       	ldi	r30, 0x23	; 35
    264a:	f0 e0       	ldi	r31, 0x00	; 0
    264c:	80 81       	ld	r24, Z
    264e:	ea 81       	ldd	r30, Y+2	; 0x02
    2650:	fb 81       	ldd	r31, Y+3	; 0x03
    2652:	80 83       	st	Z, r24
	}
	return State;
    2654:	89 81       	ldd	r24, Y+1	; 0x01
}
    2656:	0f 90       	pop	r0
    2658:	0f 90       	pop	r0
    265a:	0f 90       	pop	r0
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <DIO_SetPinValue>:
#include"DIO_private.h"



DIO_ErrorStatus DIO_SetPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	28 97       	sbiw	r28, 0x08	; 8
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    2676:	8a 83       	std	Y+2, r24	; 0x02
    2678:	6b 83       	std	Y+3, r22	; 0x03
    267a:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    267c:	81 e0       	ldi	r24, 0x01	; 1
    267e:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    2680:	8a 81       	ldd	r24, Y+2	; 0x02
    2682:	84 30       	cpi	r24, 0x04	; 4
    2684:	08 f0       	brcs	.+2      	; 0x2688 <DIO_SetPinValue+0x26>
    2686:	f1 c0       	rjmp	.+482    	; 0x286a <DIO_SetPinValue+0x208>
    2688:	8b 81       	ldd	r24, Y+3	; 0x03
    268a:	88 30       	cpi	r24, 0x08	; 8
    268c:	08 f0       	brcs	.+2      	; 0x2690 <DIO_SetPinValue+0x2e>
    268e:	ed c0       	rjmp	.+474    	; 0x286a <DIO_SetPinValue+0x208>
		{
			if (u8PinValCopy == HIGH)
    2690:	8c 81       	ldd	r24, Y+4	; 0x04
    2692:	81 30       	cpi	r24, 0x01	; 1
    2694:	09 f0       	breq	.+2      	; 0x2698 <DIO_SetPinValue+0x36>
    2696:	6f c0       	rjmp	.+222    	; 0x2776 <DIO_SetPinValue+0x114>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    2698:	8a 81       	ldd	r24, Y+2	; 0x02
    269a:	28 2f       	mov	r18, r24
    269c:	30 e0       	ldi	r19, 0x00	; 0
    269e:	38 87       	std	Y+8, r19	; 0x08
    26a0:	2f 83       	std	Y+7, r18	; 0x07
    26a2:	8f 81       	ldd	r24, Y+7	; 0x07
    26a4:	98 85       	ldd	r25, Y+8	; 0x08
    26a6:	81 30       	cpi	r24, 0x01	; 1
    26a8:	91 05       	cpc	r25, r1
    26aa:	49 f1       	breq	.+82     	; 0x26fe <DIO_SetPinValue+0x9c>
    26ac:	2f 81       	ldd	r18, Y+7	; 0x07
    26ae:	38 85       	ldd	r19, Y+8	; 0x08
    26b0:	22 30       	cpi	r18, 0x02	; 2
    26b2:	31 05       	cpc	r19, r1
    26b4:	2c f4       	brge	.+10     	; 0x26c0 <DIO_SetPinValue+0x5e>
    26b6:	8f 81       	ldd	r24, Y+7	; 0x07
    26b8:	98 85       	ldd	r25, Y+8	; 0x08
    26ba:	00 97       	sbiw	r24, 0x00	; 0
    26bc:	61 f0       	breq	.+24     	; 0x26d6 <DIO_SetPinValue+0x74>
    26be:	d6 c0       	rjmp	.+428    	; 0x286c <DIO_SetPinValue+0x20a>
    26c0:	2f 81       	ldd	r18, Y+7	; 0x07
    26c2:	38 85       	ldd	r19, Y+8	; 0x08
    26c4:	22 30       	cpi	r18, 0x02	; 2
    26c6:	31 05       	cpc	r19, r1
    26c8:	71 f1       	breq	.+92     	; 0x2726 <DIO_SetPinValue+0xc4>
    26ca:	8f 81       	ldd	r24, Y+7	; 0x07
    26cc:	98 85       	ldd	r25, Y+8	; 0x08
    26ce:	83 30       	cpi	r24, 0x03	; 3
    26d0:	91 05       	cpc	r25, r1
    26d2:	e9 f1       	breq	.+122    	; 0x274e <DIO_SetPinValue+0xec>
    26d4:	cb c0       	rjmp	.+406    	; 0x286c <DIO_SetPinValue+0x20a>
				{
					case PORTA: SET_BIT(PORTA_REG,u8PinIdCopy); break;
    26d6:	ab e3       	ldi	r26, 0x3B	; 59
    26d8:	b0 e0       	ldi	r27, 0x00	; 0
    26da:	eb e3       	ldi	r30, 0x3B	; 59
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	80 81       	ld	r24, Z
    26e0:	48 2f       	mov	r20, r24
    26e2:	8b 81       	ldd	r24, Y+3	; 0x03
    26e4:	28 2f       	mov	r18, r24
    26e6:	30 e0       	ldi	r19, 0x00	; 0
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	02 2e       	mov	r0, r18
    26ee:	02 c0       	rjmp	.+4      	; 0x26f4 <DIO_SetPinValue+0x92>
    26f0:	88 0f       	add	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	0a 94       	dec	r0
    26f6:	e2 f7       	brpl	.-8      	; 0x26f0 <DIO_SetPinValue+0x8e>
    26f8:	84 2b       	or	r24, r20
    26fa:	8c 93       	st	X, r24
    26fc:	b7 c0       	rjmp	.+366    	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTB: SET_BIT(PORTB_REG,u8PinIdCopy); break;
    26fe:	a8 e3       	ldi	r26, 0x38	; 56
    2700:	b0 e0       	ldi	r27, 0x00	; 0
    2702:	e8 e3       	ldi	r30, 0x38	; 56
    2704:	f0 e0       	ldi	r31, 0x00	; 0
    2706:	80 81       	ld	r24, Z
    2708:	48 2f       	mov	r20, r24
    270a:	8b 81       	ldd	r24, Y+3	; 0x03
    270c:	28 2f       	mov	r18, r24
    270e:	30 e0       	ldi	r19, 0x00	; 0
    2710:	81 e0       	ldi	r24, 0x01	; 1
    2712:	90 e0       	ldi	r25, 0x00	; 0
    2714:	02 2e       	mov	r0, r18
    2716:	02 c0       	rjmp	.+4      	; 0x271c <DIO_SetPinValue+0xba>
    2718:	88 0f       	add	r24, r24
    271a:	99 1f       	adc	r25, r25
    271c:	0a 94       	dec	r0
    271e:	e2 f7       	brpl	.-8      	; 0x2718 <DIO_SetPinValue+0xb6>
    2720:	84 2b       	or	r24, r20
    2722:	8c 93       	st	X, r24
    2724:	a3 c0       	rjmp	.+326    	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTC: SET_BIT(PORTC_REG,u8PinIdCopy); break;
    2726:	a5 e3       	ldi	r26, 0x35	; 53
    2728:	b0 e0       	ldi	r27, 0x00	; 0
    272a:	e5 e3       	ldi	r30, 0x35	; 53
    272c:	f0 e0       	ldi	r31, 0x00	; 0
    272e:	80 81       	ld	r24, Z
    2730:	48 2f       	mov	r20, r24
    2732:	8b 81       	ldd	r24, Y+3	; 0x03
    2734:	28 2f       	mov	r18, r24
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	81 e0       	ldi	r24, 0x01	; 1
    273a:	90 e0       	ldi	r25, 0x00	; 0
    273c:	02 2e       	mov	r0, r18
    273e:	02 c0       	rjmp	.+4      	; 0x2744 <DIO_SetPinValue+0xe2>
    2740:	88 0f       	add	r24, r24
    2742:	99 1f       	adc	r25, r25
    2744:	0a 94       	dec	r0
    2746:	e2 f7       	brpl	.-8      	; 0x2740 <DIO_SetPinValue+0xde>
    2748:	84 2b       	or	r24, r20
    274a:	8c 93       	st	X, r24
    274c:	8f c0       	rjmp	.+286    	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTD: SET_BIT(PORTD_REG,u8PinIdCopy); break;
    274e:	a2 e3       	ldi	r26, 0x32	; 50
    2750:	b0 e0       	ldi	r27, 0x00	; 0
    2752:	e2 e3       	ldi	r30, 0x32	; 50
    2754:	f0 e0       	ldi	r31, 0x00	; 0
    2756:	80 81       	ld	r24, Z
    2758:	48 2f       	mov	r20, r24
    275a:	8b 81       	ldd	r24, Y+3	; 0x03
    275c:	28 2f       	mov	r18, r24
    275e:	30 e0       	ldi	r19, 0x00	; 0
    2760:	81 e0       	ldi	r24, 0x01	; 1
    2762:	90 e0       	ldi	r25, 0x00	; 0
    2764:	02 2e       	mov	r0, r18
    2766:	02 c0       	rjmp	.+4      	; 0x276c <DIO_SetPinValue+0x10a>
    2768:	88 0f       	add	r24, r24
    276a:	99 1f       	adc	r25, r25
    276c:	0a 94       	dec	r0
    276e:	e2 f7       	brpl	.-8      	; 0x2768 <DIO_SetPinValue+0x106>
    2770:	84 2b       	or	r24, r20
    2772:	8c 93       	st	X, r24
    2774:	7b c0       	rjmp	.+246    	; 0x286c <DIO_SetPinValue+0x20a>
				}

			}

			else if (u8PinValCopy == LOW)
    2776:	8c 81       	ldd	r24, Y+4	; 0x04
    2778:	88 23       	and	r24, r24
    277a:	09 f0       	breq	.+2      	; 0x277e <DIO_SetPinValue+0x11c>
    277c:	74 c0       	rjmp	.+232    	; 0x2866 <DIO_SetPinValue+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    277e:	8a 81       	ldd	r24, Y+2	; 0x02
    2780:	28 2f       	mov	r18, r24
    2782:	30 e0       	ldi	r19, 0x00	; 0
    2784:	3e 83       	std	Y+6, r19	; 0x06
    2786:	2d 83       	std	Y+5, r18	; 0x05
    2788:	8d 81       	ldd	r24, Y+5	; 0x05
    278a:	9e 81       	ldd	r25, Y+6	; 0x06
    278c:	81 30       	cpi	r24, 0x01	; 1
    278e:	91 05       	cpc	r25, r1
    2790:	59 f1       	breq	.+86     	; 0x27e8 <DIO_SetPinValue+0x186>
    2792:	2d 81       	ldd	r18, Y+5	; 0x05
    2794:	3e 81       	ldd	r19, Y+6	; 0x06
    2796:	22 30       	cpi	r18, 0x02	; 2
    2798:	31 05       	cpc	r19, r1
    279a:	2c f4       	brge	.+10     	; 0x27a6 <DIO_SetPinValue+0x144>
    279c:	8d 81       	ldd	r24, Y+5	; 0x05
    279e:	9e 81       	ldd	r25, Y+6	; 0x06
    27a0:	00 97       	sbiw	r24, 0x00	; 0
    27a2:	69 f0       	breq	.+26     	; 0x27be <DIO_SetPinValue+0x15c>
    27a4:	63 c0       	rjmp	.+198    	; 0x286c <DIO_SetPinValue+0x20a>
    27a6:	2d 81       	ldd	r18, Y+5	; 0x05
    27a8:	3e 81       	ldd	r19, Y+6	; 0x06
    27aa:	22 30       	cpi	r18, 0x02	; 2
    27ac:	31 05       	cpc	r19, r1
    27ae:	89 f1       	breq	.+98     	; 0x2812 <DIO_SetPinValue+0x1b0>
    27b0:	8d 81       	ldd	r24, Y+5	; 0x05
    27b2:	9e 81       	ldd	r25, Y+6	; 0x06
    27b4:	83 30       	cpi	r24, 0x03	; 3
    27b6:	91 05       	cpc	r25, r1
    27b8:	09 f4       	brne	.+2      	; 0x27bc <DIO_SetPinValue+0x15a>
    27ba:	40 c0       	rjmp	.+128    	; 0x283c <DIO_SetPinValue+0x1da>
    27bc:	57 c0       	rjmp	.+174    	; 0x286c <DIO_SetPinValue+0x20a>
				{
					case PORTA: CLR_BIT(PORTA_REG,u8PinIdCopy); break;
    27be:	ab e3       	ldi	r26, 0x3B	; 59
    27c0:	b0 e0       	ldi	r27, 0x00	; 0
    27c2:	eb e3       	ldi	r30, 0x3B	; 59
    27c4:	f0 e0       	ldi	r31, 0x00	; 0
    27c6:	80 81       	ld	r24, Z
    27c8:	48 2f       	mov	r20, r24
    27ca:	8b 81       	ldd	r24, Y+3	; 0x03
    27cc:	28 2f       	mov	r18, r24
    27ce:	30 e0       	ldi	r19, 0x00	; 0
    27d0:	81 e0       	ldi	r24, 0x01	; 1
    27d2:	90 e0       	ldi	r25, 0x00	; 0
    27d4:	02 2e       	mov	r0, r18
    27d6:	02 c0       	rjmp	.+4      	; 0x27dc <DIO_SetPinValue+0x17a>
    27d8:	88 0f       	add	r24, r24
    27da:	99 1f       	adc	r25, r25
    27dc:	0a 94       	dec	r0
    27de:	e2 f7       	brpl	.-8      	; 0x27d8 <DIO_SetPinValue+0x176>
    27e0:	80 95       	com	r24
    27e2:	84 23       	and	r24, r20
    27e4:	8c 93       	st	X, r24
    27e6:	42 c0       	rjmp	.+132    	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTB: CLR_BIT(PORTB_REG,u8PinIdCopy); break;
    27e8:	a8 e3       	ldi	r26, 0x38	; 56
    27ea:	b0 e0       	ldi	r27, 0x00	; 0
    27ec:	e8 e3       	ldi	r30, 0x38	; 56
    27ee:	f0 e0       	ldi	r31, 0x00	; 0
    27f0:	80 81       	ld	r24, Z
    27f2:	48 2f       	mov	r20, r24
    27f4:	8b 81       	ldd	r24, Y+3	; 0x03
    27f6:	28 2f       	mov	r18, r24
    27f8:	30 e0       	ldi	r19, 0x00	; 0
    27fa:	81 e0       	ldi	r24, 0x01	; 1
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	02 2e       	mov	r0, r18
    2800:	02 c0       	rjmp	.+4      	; 0x2806 <DIO_SetPinValue+0x1a4>
    2802:	88 0f       	add	r24, r24
    2804:	99 1f       	adc	r25, r25
    2806:	0a 94       	dec	r0
    2808:	e2 f7       	brpl	.-8      	; 0x2802 <DIO_SetPinValue+0x1a0>
    280a:	80 95       	com	r24
    280c:	84 23       	and	r24, r20
    280e:	8c 93       	st	X, r24
    2810:	2d c0       	rjmp	.+90     	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTC: CLR_BIT(PORTC_REG,u8PinIdCopy); break;
    2812:	a5 e3       	ldi	r26, 0x35	; 53
    2814:	b0 e0       	ldi	r27, 0x00	; 0
    2816:	e5 e3       	ldi	r30, 0x35	; 53
    2818:	f0 e0       	ldi	r31, 0x00	; 0
    281a:	80 81       	ld	r24, Z
    281c:	48 2f       	mov	r20, r24
    281e:	8b 81       	ldd	r24, Y+3	; 0x03
    2820:	28 2f       	mov	r18, r24
    2822:	30 e0       	ldi	r19, 0x00	; 0
    2824:	81 e0       	ldi	r24, 0x01	; 1
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	02 2e       	mov	r0, r18
    282a:	02 c0       	rjmp	.+4      	; 0x2830 <DIO_SetPinValue+0x1ce>
    282c:	88 0f       	add	r24, r24
    282e:	99 1f       	adc	r25, r25
    2830:	0a 94       	dec	r0
    2832:	e2 f7       	brpl	.-8      	; 0x282c <DIO_SetPinValue+0x1ca>
    2834:	80 95       	com	r24
    2836:	84 23       	and	r24, r20
    2838:	8c 93       	st	X, r24
    283a:	18 c0       	rjmp	.+48     	; 0x286c <DIO_SetPinValue+0x20a>
					case PORTD: CLR_BIT(PORTD_REG,u8PinIdCopy); break;
    283c:	a2 e3       	ldi	r26, 0x32	; 50
    283e:	b0 e0       	ldi	r27, 0x00	; 0
    2840:	e2 e3       	ldi	r30, 0x32	; 50
    2842:	f0 e0       	ldi	r31, 0x00	; 0
    2844:	80 81       	ld	r24, Z
    2846:	48 2f       	mov	r20, r24
    2848:	8b 81       	ldd	r24, Y+3	; 0x03
    284a:	28 2f       	mov	r18, r24
    284c:	30 e0       	ldi	r19, 0x00	; 0
    284e:	81 e0       	ldi	r24, 0x01	; 1
    2850:	90 e0       	ldi	r25, 0x00	; 0
    2852:	02 2e       	mov	r0, r18
    2854:	02 c0       	rjmp	.+4      	; 0x285a <DIO_SetPinValue+0x1f8>
    2856:	88 0f       	add	r24, r24
    2858:	99 1f       	adc	r25, r25
    285a:	0a 94       	dec	r0
    285c:	e2 f7       	brpl	.-8      	; 0x2856 <DIO_SetPinValue+0x1f4>
    285e:	80 95       	com	r24
    2860:	84 23       	and	r24, r20
    2862:	8c 93       	st	X, r24
    2864:	03 c0       	rjmp	.+6      	; 0x286c <DIO_SetPinValue+0x20a>
				}
			}

			else
			{
				LOC_enumState = DIO_NOK ;
    2866:	19 82       	std	Y+1, r1	; 0x01
    2868:	01 c0       	rjmp	.+2      	; 0x286c <DIO_SetPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    286a:	19 82       	std	Y+1, r1	; 0x01
		}
     return LOC_enumState;
    286c:	89 81       	ldd	r24, Y+1	; 0x01
}
    286e:	28 96       	adiw	r28, 0x08	; 8
    2870:	0f b6       	in	r0, 0x3f	; 63
    2872:	f8 94       	cli
    2874:	de bf       	out	0x3e, r29	; 62
    2876:	0f be       	out	0x3f, r0	; 63
    2878:	cd bf       	out	0x3d, r28	; 61
    287a:	cf 91       	pop	r28
    287c:	df 91       	pop	r29
    287e:	08 95       	ret

00002880 <DIO_TOGPinValue>:

DIO_ErrorStatus DIO_TOGPinValue(u8 u8PortIdCopy , u8 u8PinIdCopy, u8 u8PinValCopy)
{
    2880:	df 93       	push	r29
    2882:	cf 93       	push	r28
    2884:	cd b7       	in	r28, 0x3d	; 61
    2886:	de b7       	in	r29, 0x3e	; 62
    2888:	28 97       	sbiw	r28, 0x08	; 8
    288a:	0f b6       	in	r0, 0x3f	; 63
    288c:	f8 94       	cli
    288e:	de bf       	out	0x3e, r29	; 62
    2890:	0f be       	out	0x3f, r0	; 63
    2892:	cd bf       	out	0x3d, r28	; 61
    2894:	8a 83       	std	Y+2, r24	; 0x02
    2896:	6b 83       	std	Y+3, r22	; 0x03
    2898:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    289a:	81 e0       	ldi	r24, 0x01	; 1
    289c:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    289e:	8a 81       	ldd	r24, Y+2	; 0x02
    28a0:	84 30       	cpi	r24, 0x04	; 4
    28a2:	08 f0       	brcs	.+2      	; 0x28a6 <DIO_TOGPinValue+0x26>
    28a4:	f1 c0       	rjmp	.+482    	; 0x2a88 <DIO_TOGPinValue+0x208>
    28a6:	8b 81       	ldd	r24, Y+3	; 0x03
    28a8:	88 30       	cpi	r24, 0x08	; 8
    28aa:	08 f0       	brcs	.+2      	; 0x28ae <DIO_TOGPinValue+0x2e>
    28ac:	ed c0       	rjmp	.+474    	; 0x2a88 <DIO_TOGPinValue+0x208>
		{
			if (u8PinValCopy == HIGH)
    28ae:	8c 81       	ldd	r24, Y+4	; 0x04
    28b0:	81 30       	cpi	r24, 0x01	; 1
    28b2:	09 f0       	breq	.+2      	; 0x28b6 <DIO_TOGPinValue+0x36>
    28b4:	74 c0       	rjmp	.+232    	; 0x299e <DIO_TOGPinValue+0x11e>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    28b6:	8a 81       	ldd	r24, Y+2	; 0x02
    28b8:	28 2f       	mov	r18, r24
    28ba:	30 e0       	ldi	r19, 0x00	; 0
    28bc:	38 87       	std	Y+8, r19	; 0x08
    28be:	2f 83       	std	Y+7, r18	; 0x07
    28c0:	8f 81       	ldd	r24, Y+7	; 0x07
    28c2:	98 85       	ldd	r25, Y+8	; 0x08
    28c4:	81 30       	cpi	r24, 0x01	; 1
    28c6:	91 05       	cpc	r25, r1
    28c8:	59 f1       	breq	.+86     	; 0x2920 <DIO_TOGPinValue+0xa0>
    28ca:	2f 81       	ldd	r18, Y+7	; 0x07
    28cc:	38 85       	ldd	r19, Y+8	; 0x08
    28ce:	22 30       	cpi	r18, 0x02	; 2
    28d0:	31 05       	cpc	r19, r1
    28d2:	2c f4       	brge	.+10     	; 0x28de <DIO_TOGPinValue+0x5e>
    28d4:	8f 81       	ldd	r24, Y+7	; 0x07
    28d6:	98 85       	ldd	r25, Y+8	; 0x08
    28d8:	00 97       	sbiw	r24, 0x00	; 0
    28da:	69 f0       	breq	.+26     	; 0x28f6 <DIO_TOGPinValue+0x76>
    28dc:	d6 c0       	rjmp	.+428    	; 0x2a8a <DIO_TOGPinValue+0x20a>
    28de:	2f 81       	ldd	r18, Y+7	; 0x07
    28e0:	38 85       	ldd	r19, Y+8	; 0x08
    28e2:	22 30       	cpi	r18, 0x02	; 2
    28e4:	31 05       	cpc	r19, r1
    28e6:	89 f1       	breq	.+98     	; 0x294a <DIO_TOGPinValue+0xca>
    28e8:	8f 81       	ldd	r24, Y+7	; 0x07
    28ea:	98 85       	ldd	r25, Y+8	; 0x08
    28ec:	83 30       	cpi	r24, 0x03	; 3
    28ee:	91 05       	cpc	r25, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <DIO_TOGPinValue+0x74>
    28f2:	40 c0       	rjmp	.+128    	; 0x2974 <DIO_TOGPinValue+0xf4>
    28f4:	ca c0       	rjmp	.+404    	; 0x2a8a <DIO_TOGPinValue+0x20a>
				{
					case PORTA: CLR_BIT(PORTA_REG,u8PinIdCopy); break;
    28f6:	ab e3       	ldi	r26, 0x3B	; 59
    28f8:	b0 e0       	ldi	r27, 0x00	; 0
    28fa:	eb e3       	ldi	r30, 0x3B	; 59
    28fc:	f0 e0       	ldi	r31, 0x00	; 0
    28fe:	80 81       	ld	r24, Z
    2900:	48 2f       	mov	r20, r24
    2902:	8b 81       	ldd	r24, Y+3	; 0x03
    2904:	28 2f       	mov	r18, r24
    2906:	30 e0       	ldi	r19, 0x00	; 0
    2908:	81 e0       	ldi	r24, 0x01	; 1
    290a:	90 e0       	ldi	r25, 0x00	; 0
    290c:	02 2e       	mov	r0, r18
    290e:	02 c0       	rjmp	.+4      	; 0x2914 <DIO_TOGPinValue+0x94>
    2910:	88 0f       	add	r24, r24
    2912:	99 1f       	adc	r25, r25
    2914:	0a 94       	dec	r0
    2916:	e2 f7       	brpl	.-8      	; 0x2910 <DIO_TOGPinValue+0x90>
    2918:	80 95       	com	r24
    291a:	84 23       	and	r24, r20
    291c:	8c 93       	st	X, r24
    291e:	b5 c0       	rjmp	.+362    	; 0x2a8a <DIO_TOGPinValue+0x20a>
					case PORTB: CLR_BIT(PORTB_REG,u8PinIdCopy); break;
    2920:	a8 e3       	ldi	r26, 0x38	; 56
    2922:	b0 e0       	ldi	r27, 0x00	; 0
    2924:	e8 e3       	ldi	r30, 0x38	; 56
    2926:	f0 e0       	ldi	r31, 0x00	; 0
    2928:	80 81       	ld	r24, Z
    292a:	48 2f       	mov	r20, r24
    292c:	8b 81       	ldd	r24, Y+3	; 0x03
    292e:	28 2f       	mov	r18, r24
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	81 e0       	ldi	r24, 0x01	; 1
    2934:	90 e0       	ldi	r25, 0x00	; 0
    2936:	02 2e       	mov	r0, r18
    2938:	02 c0       	rjmp	.+4      	; 0x293e <DIO_TOGPinValue+0xbe>
    293a:	88 0f       	add	r24, r24
    293c:	99 1f       	adc	r25, r25
    293e:	0a 94       	dec	r0
    2940:	e2 f7       	brpl	.-8      	; 0x293a <DIO_TOGPinValue+0xba>
    2942:	80 95       	com	r24
    2944:	84 23       	and	r24, r20
    2946:	8c 93       	st	X, r24
    2948:	a0 c0       	rjmp	.+320    	; 0x2a8a <DIO_TOGPinValue+0x20a>
					case PORTC: CLR_BIT(PORTC_REG,u8PinIdCopy); break;
    294a:	a5 e3       	ldi	r26, 0x35	; 53
    294c:	b0 e0       	ldi	r27, 0x00	; 0
    294e:	e5 e3       	ldi	r30, 0x35	; 53
    2950:	f0 e0       	ldi	r31, 0x00	; 0
    2952:	80 81       	ld	r24, Z
    2954:	48 2f       	mov	r20, r24
    2956:	8b 81       	ldd	r24, Y+3	; 0x03
    2958:	28 2f       	mov	r18, r24
    295a:	30 e0       	ldi	r19, 0x00	; 0
    295c:	81 e0       	ldi	r24, 0x01	; 1
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	02 2e       	mov	r0, r18
    2962:	02 c0       	rjmp	.+4      	; 0x2968 <DIO_TOGPinValue+0xe8>
    2964:	88 0f       	add	r24, r24
    2966:	99 1f       	adc	r25, r25
    2968:	0a 94       	dec	r0
    296a:	e2 f7       	brpl	.-8      	; 0x2964 <DIO_TOGPinValue+0xe4>
    296c:	80 95       	com	r24
    296e:	84 23       	and	r24, r20
    2970:	8c 93       	st	X, r24
    2972:	8b c0       	rjmp	.+278    	; 0x2a8a <DIO_TOGPinValue+0x20a>
					case PORTD: CLR_BIT(PORTD_REG,u8PinIdCopy); break;
    2974:	a2 e3       	ldi	r26, 0x32	; 50
    2976:	b0 e0       	ldi	r27, 0x00	; 0
    2978:	e2 e3       	ldi	r30, 0x32	; 50
    297a:	f0 e0       	ldi	r31, 0x00	; 0
    297c:	80 81       	ld	r24, Z
    297e:	48 2f       	mov	r20, r24
    2980:	8b 81       	ldd	r24, Y+3	; 0x03
    2982:	28 2f       	mov	r18, r24
    2984:	30 e0       	ldi	r19, 0x00	; 0
    2986:	81 e0       	ldi	r24, 0x01	; 1
    2988:	90 e0       	ldi	r25, 0x00	; 0
    298a:	02 2e       	mov	r0, r18
    298c:	02 c0       	rjmp	.+4      	; 0x2992 <DIO_TOGPinValue+0x112>
    298e:	88 0f       	add	r24, r24
    2990:	99 1f       	adc	r25, r25
    2992:	0a 94       	dec	r0
    2994:	e2 f7       	brpl	.-8      	; 0x298e <DIO_TOGPinValue+0x10e>
    2996:	80 95       	com	r24
    2998:	84 23       	and	r24, r20
    299a:	8c 93       	st	X, r24
    299c:	76 c0       	rjmp	.+236    	; 0x2a8a <DIO_TOGPinValue+0x20a>
				}

			}

			else if (u8PinValCopy == LOW)
    299e:	8c 81       	ldd	r24, Y+4	; 0x04
    29a0:	88 23       	and	r24, r24
    29a2:	09 f0       	breq	.+2      	; 0x29a6 <DIO_TOGPinValue+0x126>
    29a4:	6f c0       	rjmp	.+222    	; 0x2a84 <DIO_TOGPinValue+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    29a6:	8a 81       	ldd	r24, Y+2	; 0x02
    29a8:	28 2f       	mov	r18, r24
    29aa:	30 e0       	ldi	r19, 0x00	; 0
    29ac:	3e 83       	std	Y+6, r19	; 0x06
    29ae:	2d 83       	std	Y+5, r18	; 0x05
    29b0:	8d 81       	ldd	r24, Y+5	; 0x05
    29b2:	9e 81       	ldd	r25, Y+6	; 0x06
    29b4:	81 30       	cpi	r24, 0x01	; 1
    29b6:	91 05       	cpc	r25, r1
    29b8:	49 f1       	breq	.+82     	; 0x2a0c <DIO_TOGPinValue+0x18c>
    29ba:	2d 81       	ldd	r18, Y+5	; 0x05
    29bc:	3e 81       	ldd	r19, Y+6	; 0x06
    29be:	22 30       	cpi	r18, 0x02	; 2
    29c0:	31 05       	cpc	r19, r1
    29c2:	2c f4       	brge	.+10     	; 0x29ce <DIO_TOGPinValue+0x14e>
    29c4:	8d 81       	ldd	r24, Y+5	; 0x05
    29c6:	9e 81       	ldd	r25, Y+6	; 0x06
    29c8:	00 97       	sbiw	r24, 0x00	; 0
    29ca:	61 f0       	breq	.+24     	; 0x29e4 <DIO_TOGPinValue+0x164>
    29cc:	5e c0       	rjmp	.+188    	; 0x2a8a <DIO_TOGPinValue+0x20a>
    29ce:	2d 81       	ldd	r18, Y+5	; 0x05
    29d0:	3e 81       	ldd	r19, Y+6	; 0x06
    29d2:	22 30       	cpi	r18, 0x02	; 2
    29d4:	31 05       	cpc	r19, r1
    29d6:	71 f1       	breq	.+92     	; 0x2a34 <DIO_TOGPinValue+0x1b4>
    29d8:	8d 81       	ldd	r24, Y+5	; 0x05
    29da:	9e 81       	ldd	r25, Y+6	; 0x06
    29dc:	83 30       	cpi	r24, 0x03	; 3
    29de:	91 05       	cpc	r25, r1
    29e0:	e9 f1       	breq	.+122    	; 0x2a5c <DIO_TOGPinValue+0x1dc>
    29e2:	53 c0       	rjmp	.+166    	; 0x2a8a <DIO_TOGPinValue+0x20a>
				{
				case PORTA: SET_BIT(PORTA_REG,u8PinIdCopy); break;
    29e4:	ab e3       	ldi	r26, 0x3B	; 59
    29e6:	b0 e0       	ldi	r27, 0x00	; 0
    29e8:	eb e3       	ldi	r30, 0x3B	; 59
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	80 81       	ld	r24, Z
    29ee:	48 2f       	mov	r20, r24
    29f0:	8b 81       	ldd	r24, Y+3	; 0x03
    29f2:	28 2f       	mov	r18, r24
    29f4:	30 e0       	ldi	r19, 0x00	; 0
    29f6:	81 e0       	ldi	r24, 0x01	; 1
    29f8:	90 e0       	ldi	r25, 0x00	; 0
    29fa:	02 2e       	mov	r0, r18
    29fc:	02 c0       	rjmp	.+4      	; 0x2a02 <DIO_TOGPinValue+0x182>
    29fe:	88 0f       	add	r24, r24
    2a00:	99 1f       	adc	r25, r25
    2a02:	0a 94       	dec	r0
    2a04:	e2 f7       	brpl	.-8      	; 0x29fe <DIO_TOGPinValue+0x17e>
    2a06:	84 2b       	or	r24, r20
    2a08:	8c 93       	st	X, r24
    2a0a:	3f c0       	rjmp	.+126    	; 0x2a8a <DIO_TOGPinValue+0x20a>
				case PORTB: SET_BIT(PORTB_REG,u8PinIdCopy); break;
    2a0c:	a8 e3       	ldi	r26, 0x38	; 56
    2a0e:	b0 e0       	ldi	r27, 0x00	; 0
    2a10:	e8 e3       	ldi	r30, 0x38	; 56
    2a12:	f0 e0       	ldi	r31, 0x00	; 0
    2a14:	80 81       	ld	r24, Z
    2a16:	48 2f       	mov	r20, r24
    2a18:	8b 81       	ldd	r24, Y+3	; 0x03
    2a1a:	28 2f       	mov	r18, r24
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	81 e0       	ldi	r24, 0x01	; 1
    2a20:	90 e0       	ldi	r25, 0x00	; 0
    2a22:	02 2e       	mov	r0, r18
    2a24:	02 c0       	rjmp	.+4      	; 0x2a2a <DIO_TOGPinValue+0x1aa>
    2a26:	88 0f       	add	r24, r24
    2a28:	99 1f       	adc	r25, r25
    2a2a:	0a 94       	dec	r0
    2a2c:	e2 f7       	brpl	.-8      	; 0x2a26 <DIO_TOGPinValue+0x1a6>
    2a2e:	84 2b       	or	r24, r20
    2a30:	8c 93       	st	X, r24
    2a32:	2b c0       	rjmp	.+86     	; 0x2a8a <DIO_TOGPinValue+0x20a>
				case PORTC: SET_BIT(PORTC_REG,u8PinIdCopy); break;
    2a34:	a5 e3       	ldi	r26, 0x35	; 53
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e5 e3       	ldi	r30, 0x35	; 53
    2a3a:	f0 e0       	ldi	r31, 0x00	; 0
    2a3c:	80 81       	ld	r24, Z
    2a3e:	48 2f       	mov	r20, r24
    2a40:	8b 81       	ldd	r24, Y+3	; 0x03
    2a42:	28 2f       	mov	r18, r24
    2a44:	30 e0       	ldi	r19, 0x00	; 0
    2a46:	81 e0       	ldi	r24, 0x01	; 1
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	02 2e       	mov	r0, r18
    2a4c:	02 c0       	rjmp	.+4      	; 0x2a52 <DIO_TOGPinValue+0x1d2>
    2a4e:	88 0f       	add	r24, r24
    2a50:	99 1f       	adc	r25, r25
    2a52:	0a 94       	dec	r0
    2a54:	e2 f7       	brpl	.-8      	; 0x2a4e <DIO_TOGPinValue+0x1ce>
    2a56:	84 2b       	or	r24, r20
    2a58:	8c 93       	st	X, r24
    2a5a:	17 c0       	rjmp	.+46     	; 0x2a8a <DIO_TOGPinValue+0x20a>
				case PORTD: SET_BIT(PORTD_REG,u8PinIdCopy); break;
    2a5c:	a2 e3       	ldi	r26, 0x32	; 50
    2a5e:	b0 e0       	ldi	r27, 0x00	; 0
    2a60:	e2 e3       	ldi	r30, 0x32	; 50
    2a62:	f0 e0       	ldi	r31, 0x00	; 0
    2a64:	80 81       	ld	r24, Z
    2a66:	48 2f       	mov	r20, r24
    2a68:	8b 81       	ldd	r24, Y+3	; 0x03
    2a6a:	28 2f       	mov	r18, r24
    2a6c:	30 e0       	ldi	r19, 0x00	; 0
    2a6e:	81 e0       	ldi	r24, 0x01	; 1
    2a70:	90 e0       	ldi	r25, 0x00	; 0
    2a72:	02 2e       	mov	r0, r18
    2a74:	02 c0       	rjmp	.+4      	; 0x2a7a <DIO_TOGPinValue+0x1fa>
    2a76:	88 0f       	add	r24, r24
    2a78:	99 1f       	adc	r25, r25
    2a7a:	0a 94       	dec	r0
    2a7c:	e2 f7       	brpl	.-8      	; 0x2a76 <DIO_TOGPinValue+0x1f6>
    2a7e:	84 2b       	or	r24, r20
    2a80:	8c 93       	st	X, r24
    2a82:	03 c0       	rjmp	.+6      	; 0x2a8a <DIO_TOGPinValue+0x20a>
				}
			}

			else
			{
				LOC_enumState = DIO_NOK ;
    2a84:	19 82       	std	Y+1, r1	; 0x01
    2a86:	01 c0       	rjmp	.+2      	; 0x2a8a <DIO_TOGPinValue+0x20a>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2a88:	19 82       	std	Y+1, r1	; 0x01
		}
     return LOC_enumState;
    2a8a:	89 81       	ldd	r24, Y+1	; 0x01
}
    2a8c:	28 96       	adiw	r28, 0x08	; 8
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <DIO_GetPinValue>:

DIO_ErrorStatus DIO_GetPinValue(u8 u8PortIdCopy, u8 u8PinIdCopy,  u8 *u8PinVal)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	cd b7       	in	r28, 0x3d	; 61
    2aa4:	de b7       	in	r29, 0x3e	; 62
    2aa6:	27 97       	sbiw	r28, 0x07	; 7
    2aa8:	0f b6       	in	r0, 0x3f	; 63
    2aaa:	f8 94       	cli
    2aac:	de bf       	out	0x3e, r29	; 62
    2aae:	0f be       	out	0x3f, r0	; 63
    2ab0:	cd bf       	out	0x3d, r28	; 61
    2ab2:	8a 83       	std	Y+2, r24	; 0x02
    2ab4:	6b 83       	std	Y+3, r22	; 0x03
    2ab6:	5d 83       	std	Y+5, r21	; 0x05
    2ab8:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2aba:	81 e0       	ldi	r24, 0x01	; 1
    2abc:	89 83       	std	Y+1, r24	; 0x01

	/* Make sure that the Port ID and Pin ID are in the valid range */
			if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    2abe:	8a 81       	ldd	r24, Y+2	; 0x02
    2ac0:	84 30       	cpi	r24, 0x04	; 4
    2ac2:	08 f0       	brcs	.+2      	; 0x2ac6 <DIO_GetPinValue+0x28>
    2ac4:	75 c0       	rjmp	.+234    	; 0x2bb0 <DIO_GetPinValue+0x112>
    2ac6:	8b 81       	ldd	r24, Y+3	; 0x03
    2ac8:	88 30       	cpi	r24, 0x08	; 8
    2aca:	08 f0       	brcs	.+2      	; 0x2ace <DIO_GetPinValue+0x30>
    2acc:	71 c0       	rjmp	.+226    	; 0x2bb0 <DIO_GetPinValue+0x112>
			{

					/* Check on the Required PORT Number */
					switch (u8PortIdCopy)
    2ace:	8a 81       	ldd	r24, Y+2	; 0x02
    2ad0:	28 2f       	mov	r18, r24
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	3f 83       	std	Y+7, r19	; 0x07
    2ad6:	2e 83       	std	Y+6, r18	; 0x06
    2ad8:	4e 81       	ldd	r20, Y+6	; 0x06
    2ada:	5f 81       	ldd	r21, Y+7	; 0x07
    2adc:	41 30       	cpi	r20, 0x01	; 1
    2ade:	51 05       	cpc	r21, r1
    2ae0:	59 f1       	breq	.+86     	; 0x2b38 <DIO_GetPinValue+0x9a>
    2ae2:	8e 81       	ldd	r24, Y+6	; 0x06
    2ae4:	9f 81       	ldd	r25, Y+7	; 0x07
    2ae6:	82 30       	cpi	r24, 0x02	; 2
    2ae8:	91 05       	cpc	r25, r1
    2aea:	34 f4       	brge	.+12     	; 0x2af8 <DIO_GetPinValue+0x5a>
    2aec:	2e 81       	ldd	r18, Y+6	; 0x06
    2aee:	3f 81       	ldd	r19, Y+7	; 0x07
    2af0:	21 15       	cp	r18, r1
    2af2:	31 05       	cpc	r19, r1
    2af4:	69 f0       	breq	.+26     	; 0x2b10 <DIO_GetPinValue+0x72>
    2af6:	5d c0       	rjmp	.+186    	; 0x2bb2 <DIO_GetPinValue+0x114>
    2af8:	4e 81       	ldd	r20, Y+6	; 0x06
    2afa:	5f 81       	ldd	r21, Y+7	; 0x07
    2afc:	42 30       	cpi	r20, 0x02	; 2
    2afe:	51 05       	cpc	r21, r1
    2b00:	79 f1       	breq	.+94     	; 0x2b60 <DIO_GetPinValue+0xc2>
    2b02:	8e 81       	ldd	r24, Y+6	; 0x06
    2b04:	9f 81       	ldd	r25, Y+7	; 0x07
    2b06:	83 30       	cpi	r24, 0x03	; 3
    2b08:	91 05       	cpc	r25, r1
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <DIO_GetPinValue+0x70>
    2b0c:	3d c0       	rjmp	.+122    	; 0x2b88 <DIO_GetPinValue+0xea>
    2b0e:	51 c0       	rjmp	.+162    	; 0x2bb2 <DIO_GetPinValue+0x114>
					{
						case PORTA:*u8PinVal= GET_BIT(PINA_REG,u8PinIdCopy); break;
    2b10:	e9 e3       	ldi	r30, 0x39	; 57
    2b12:	f0 e0       	ldi	r31, 0x00	; 0
    2b14:	80 81       	ld	r24, Z
    2b16:	28 2f       	mov	r18, r24
    2b18:	30 e0       	ldi	r19, 0x00	; 0
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	88 2f       	mov	r24, r24
    2b1e:	90 e0       	ldi	r25, 0x00	; 0
    2b20:	a9 01       	movw	r20, r18
    2b22:	02 c0       	rjmp	.+4      	; 0x2b28 <DIO_GetPinValue+0x8a>
    2b24:	55 95       	asr	r21
    2b26:	47 95       	ror	r20
    2b28:	8a 95       	dec	r24
    2b2a:	e2 f7       	brpl	.-8      	; 0x2b24 <DIO_GetPinValue+0x86>
    2b2c:	ca 01       	movw	r24, r20
    2b2e:	81 70       	andi	r24, 0x01	; 1
    2b30:	ec 81       	ldd	r30, Y+4	; 0x04
    2b32:	fd 81       	ldd	r31, Y+5	; 0x05
    2b34:	80 83       	st	Z, r24
    2b36:	3d c0       	rjmp	.+122    	; 0x2bb2 <DIO_GetPinValue+0x114>
						case PORTB:*u8PinVal= GET_BIT(PINB_REG,u8PinIdCopy); break;
    2b38:	e6 e3       	ldi	r30, 0x36	; 54
    2b3a:	f0 e0       	ldi	r31, 0x00	; 0
    2b3c:	80 81       	ld	r24, Z
    2b3e:	28 2f       	mov	r18, r24
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	8b 81       	ldd	r24, Y+3	; 0x03
    2b44:	88 2f       	mov	r24, r24
    2b46:	90 e0       	ldi	r25, 0x00	; 0
    2b48:	a9 01       	movw	r20, r18
    2b4a:	02 c0       	rjmp	.+4      	; 0x2b50 <DIO_GetPinValue+0xb2>
    2b4c:	55 95       	asr	r21
    2b4e:	47 95       	ror	r20
    2b50:	8a 95       	dec	r24
    2b52:	e2 f7       	brpl	.-8      	; 0x2b4c <DIO_GetPinValue+0xae>
    2b54:	ca 01       	movw	r24, r20
    2b56:	81 70       	andi	r24, 0x01	; 1
    2b58:	ec 81       	ldd	r30, Y+4	; 0x04
    2b5a:	fd 81       	ldd	r31, Y+5	; 0x05
    2b5c:	80 83       	st	Z, r24
    2b5e:	29 c0       	rjmp	.+82     	; 0x2bb2 <DIO_GetPinValue+0x114>
						case PORTC:*u8PinVal= GET_BIT(PINC_REG,u8PinIdCopy); break;
    2b60:	e3 e3       	ldi	r30, 0x33	; 51
    2b62:	f0 e0       	ldi	r31, 0x00	; 0
    2b64:	80 81       	ld	r24, Z
    2b66:	28 2f       	mov	r18, r24
    2b68:	30 e0       	ldi	r19, 0x00	; 0
    2b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b6c:	88 2f       	mov	r24, r24
    2b6e:	90 e0       	ldi	r25, 0x00	; 0
    2b70:	a9 01       	movw	r20, r18
    2b72:	02 c0       	rjmp	.+4      	; 0x2b78 <DIO_GetPinValue+0xda>
    2b74:	55 95       	asr	r21
    2b76:	47 95       	ror	r20
    2b78:	8a 95       	dec	r24
    2b7a:	e2 f7       	brpl	.-8      	; 0x2b74 <DIO_GetPinValue+0xd6>
    2b7c:	ca 01       	movw	r24, r20
    2b7e:	81 70       	andi	r24, 0x01	; 1
    2b80:	ec 81       	ldd	r30, Y+4	; 0x04
    2b82:	fd 81       	ldd	r31, Y+5	; 0x05
    2b84:	80 83       	st	Z, r24
    2b86:	15 c0       	rjmp	.+42     	; 0x2bb2 <DIO_GetPinValue+0x114>
						case PORTD:*u8PinVal= GET_BIT(PIND_REG,u8PinIdCopy); break;
    2b88:	e0 e3       	ldi	r30, 0x30	; 48
    2b8a:	f0 e0       	ldi	r31, 0x00	; 0
    2b8c:	80 81       	ld	r24, Z
    2b8e:	28 2f       	mov	r18, r24
    2b90:	30 e0       	ldi	r19, 0x00	; 0
    2b92:	8b 81       	ldd	r24, Y+3	; 0x03
    2b94:	88 2f       	mov	r24, r24
    2b96:	90 e0       	ldi	r25, 0x00	; 0
    2b98:	a9 01       	movw	r20, r18
    2b9a:	02 c0       	rjmp	.+4      	; 0x2ba0 <DIO_GetPinValue+0x102>
    2b9c:	55 95       	asr	r21
    2b9e:	47 95       	ror	r20
    2ba0:	8a 95       	dec	r24
    2ba2:	e2 f7       	brpl	.-8      	; 0x2b9c <DIO_GetPinValue+0xfe>
    2ba4:	ca 01       	movw	r24, r20
    2ba6:	81 70       	andi	r24, 0x01	; 1
    2ba8:	ec 81       	ldd	r30, Y+4	; 0x04
    2baa:	fd 81       	ldd	r31, Y+5	; 0x05
    2bac:	80 83       	st	Z, r24
    2bae:	01 c0       	rjmp	.+2      	; 0x2bb2 <DIO_GetPinValue+0x114>

			}

			else
				{
				LOC_enumState = DIO_NOK ;
    2bb0:	19 82       	std	Y+1, r1	; 0x01
				}

				return LOC_enumState;
    2bb2:	89 81       	ldd	r24, Y+1	; 0x01

}
    2bb4:	27 96       	adiw	r28, 0x07	; 7
    2bb6:	0f b6       	in	r0, 0x3f	; 63
    2bb8:	f8 94       	cli
    2bba:	de bf       	out	0x3e, r29	; 62
    2bbc:	0f be       	out	0x3f, r0	; 63
    2bbe:	cd bf       	out	0x3d, r28	; 61
    2bc0:	cf 91       	pop	r28
    2bc2:	df 91       	pop	r29
    2bc4:	08 95       	ret

00002bc6 <DIO_SetPinDirection>:

DIO_ErrorStatus DIO_SetPinDirection (u8 u8PortIdCopy, u8 u8PinIdCopy, u8 u8PinDirCopy)
{
    2bc6:	df 93       	push	r29
    2bc8:	cf 93       	push	r28
    2bca:	cd b7       	in	r28, 0x3d	; 61
    2bcc:	de b7       	in	r29, 0x3e	; 62
    2bce:	28 97       	sbiw	r28, 0x08	; 8
    2bd0:	0f b6       	in	r0, 0x3f	; 63
    2bd2:	f8 94       	cli
    2bd4:	de bf       	out	0x3e, r29	; 62
    2bd6:	0f be       	out	0x3f, r0	; 63
    2bd8:	cd bf       	out	0x3d, r28	; 61
    2bda:	8a 83       	std	Y+2, r24	; 0x02
    2bdc:	6b 83       	std	Y+3, r22	; 0x03
    2bde:	4c 83       	std	Y+4, r20	; 0x04
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2be0:	81 e0       	ldi	r24, 0x01	; 1
    2be2:	89 83       	std	Y+1, r24	; 0x01
	/* Make sure that the Port ID and Pin ID are in the valid range */
		if ((u8PortIdCopy <= PORTD) && (u8PinIdCopy <= PIN7))
    2be4:	8a 81       	ldd	r24, Y+2	; 0x02
    2be6:	84 30       	cpi	r24, 0x04	; 4
    2be8:	08 f0       	brcs	.+2      	; 0x2bec <DIO_SetPinDirection+0x26>
    2bea:	f2 c0       	rjmp	.+484    	; 0x2dd0 <DIO_SetPinDirection+0x20a>
    2bec:	8b 81       	ldd	r24, Y+3	; 0x03
    2bee:	88 30       	cpi	r24, 0x08	; 8
    2bf0:	08 f0       	brcs	.+2      	; 0x2bf4 <DIO_SetPinDirection+0x2e>
    2bf2:	ee c0       	rjmp	.+476    	; 0x2dd0 <DIO_SetPinDirection+0x20a>
		{
			if ( u8PinDirCopy == OUTPUT )
    2bf4:	8c 81       	ldd	r24, Y+4	; 0x04
    2bf6:	81 30       	cpi	r24, 0x01	; 1
    2bf8:	09 f0       	breq	.+2      	; 0x2bfc <DIO_SetPinDirection+0x36>
    2bfa:	6f c0       	rjmp	.+222    	; 0x2cda <DIO_SetPinDirection+0x114>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    2bfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2bfe:	28 2f       	mov	r18, r24
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	38 87       	std	Y+8, r19	; 0x08
    2c04:	2f 83       	std	Y+7, r18	; 0x07
    2c06:	8f 81       	ldd	r24, Y+7	; 0x07
    2c08:	98 85       	ldd	r25, Y+8	; 0x08
    2c0a:	81 30       	cpi	r24, 0x01	; 1
    2c0c:	91 05       	cpc	r25, r1
    2c0e:	49 f1       	breq	.+82     	; 0x2c62 <DIO_SetPinDirection+0x9c>
    2c10:	2f 81       	ldd	r18, Y+7	; 0x07
    2c12:	38 85       	ldd	r19, Y+8	; 0x08
    2c14:	22 30       	cpi	r18, 0x02	; 2
    2c16:	31 05       	cpc	r19, r1
    2c18:	2c f4       	brge	.+10     	; 0x2c24 <DIO_SetPinDirection+0x5e>
    2c1a:	8f 81       	ldd	r24, Y+7	; 0x07
    2c1c:	98 85       	ldd	r25, Y+8	; 0x08
    2c1e:	00 97       	sbiw	r24, 0x00	; 0
    2c20:	61 f0       	breq	.+24     	; 0x2c3a <DIO_SetPinDirection+0x74>
    2c22:	d7 c0       	rjmp	.+430    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
    2c24:	2f 81       	ldd	r18, Y+7	; 0x07
    2c26:	38 85       	ldd	r19, Y+8	; 0x08
    2c28:	22 30       	cpi	r18, 0x02	; 2
    2c2a:	31 05       	cpc	r19, r1
    2c2c:	71 f1       	breq	.+92     	; 0x2c8a <DIO_SetPinDirection+0xc4>
    2c2e:	8f 81       	ldd	r24, Y+7	; 0x07
    2c30:	98 85       	ldd	r25, Y+8	; 0x08
    2c32:	83 30       	cpi	r24, 0x03	; 3
    2c34:	91 05       	cpc	r25, r1
    2c36:	e9 f1       	breq	.+122    	; 0x2cb2 <DIO_SetPinDirection+0xec>
    2c38:	cc c0       	rjmp	.+408    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
				{
					case PORTA: SET_BIT(DDRA_REG,u8PinIdCopy); break;
    2c3a:	aa e3       	ldi	r26, 0x3A	; 58
    2c3c:	b0 e0       	ldi	r27, 0x00	; 0
    2c3e:	ea e3       	ldi	r30, 0x3A	; 58
    2c40:	f0 e0       	ldi	r31, 0x00	; 0
    2c42:	80 81       	ld	r24, Z
    2c44:	48 2f       	mov	r20, r24
    2c46:	8b 81       	ldd	r24, Y+3	; 0x03
    2c48:	28 2f       	mov	r18, r24
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	81 e0       	ldi	r24, 0x01	; 1
    2c4e:	90 e0       	ldi	r25, 0x00	; 0
    2c50:	02 2e       	mov	r0, r18
    2c52:	02 c0       	rjmp	.+4      	; 0x2c58 <DIO_SetPinDirection+0x92>
    2c54:	88 0f       	add	r24, r24
    2c56:	99 1f       	adc	r25, r25
    2c58:	0a 94       	dec	r0
    2c5a:	e2 f7       	brpl	.-8      	; 0x2c54 <DIO_SetPinDirection+0x8e>
    2c5c:	84 2b       	or	r24, r20
    2c5e:	8c 93       	st	X, r24
    2c60:	b8 c0       	rjmp	.+368    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTB: SET_BIT(DDRB_REG,u8PinIdCopy); break;
    2c62:	a7 e3       	ldi	r26, 0x37	; 55
    2c64:	b0 e0       	ldi	r27, 0x00	; 0
    2c66:	e7 e3       	ldi	r30, 0x37	; 55
    2c68:	f0 e0       	ldi	r31, 0x00	; 0
    2c6a:	80 81       	ld	r24, Z
    2c6c:	48 2f       	mov	r20, r24
    2c6e:	8b 81       	ldd	r24, Y+3	; 0x03
    2c70:	28 2f       	mov	r18, r24
    2c72:	30 e0       	ldi	r19, 0x00	; 0
    2c74:	81 e0       	ldi	r24, 0x01	; 1
    2c76:	90 e0       	ldi	r25, 0x00	; 0
    2c78:	02 2e       	mov	r0, r18
    2c7a:	02 c0       	rjmp	.+4      	; 0x2c80 <DIO_SetPinDirection+0xba>
    2c7c:	88 0f       	add	r24, r24
    2c7e:	99 1f       	adc	r25, r25
    2c80:	0a 94       	dec	r0
    2c82:	e2 f7       	brpl	.-8      	; 0x2c7c <DIO_SetPinDirection+0xb6>
    2c84:	84 2b       	or	r24, r20
    2c86:	8c 93       	st	X, r24
    2c88:	a4 c0       	rjmp	.+328    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTC: SET_BIT(DDRC_REG,u8PinIdCopy); break;
    2c8a:	a4 e3       	ldi	r26, 0x34	; 52
    2c8c:	b0 e0       	ldi	r27, 0x00	; 0
    2c8e:	e4 e3       	ldi	r30, 0x34	; 52
    2c90:	f0 e0       	ldi	r31, 0x00	; 0
    2c92:	80 81       	ld	r24, Z
    2c94:	48 2f       	mov	r20, r24
    2c96:	8b 81       	ldd	r24, Y+3	; 0x03
    2c98:	28 2f       	mov	r18, r24
    2c9a:	30 e0       	ldi	r19, 0x00	; 0
    2c9c:	81 e0       	ldi	r24, 0x01	; 1
    2c9e:	90 e0       	ldi	r25, 0x00	; 0
    2ca0:	02 2e       	mov	r0, r18
    2ca2:	02 c0       	rjmp	.+4      	; 0x2ca8 <DIO_SetPinDirection+0xe2>
    2ca4:	88 0f       	add	r24, r24
    2ca6:	99 1f       	adc	r25, r25
    2ca8:	0a 94       	dec	r0
    2caa:	e2 f7       	brpl	.-8      	; 0x2ca4 <DIO_SetPinDirection+0xde>
    2cac:	84 2b       	or	r24, r20
    2cae:	8c 93       	st	X, r24
    2cb0:	90 c0       	rjmp	.+288    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTD: SET_BIT(DDRD_REG,u8PinIdCopy); break;
    2cb2:	a1 e3       	ldi	r26, 0x31	; 49
    2cb4:	b0 e0       	ldi	r27, 0x00	; 0
    2cb6:	e1 e3       	ldi	r30, 0x31	; 49
    2cb8:	f0 e0       	ldi	r31, 0x00	; 0
    2cba:	80 81       	ld	r24, Z
    2cbc:	48 2f       	mov	r20, r24
    2cbe:	8b 81       	ldd	r24, Y+3	; 0x03
    2cc0:	28 2f       	mov	r18, r24
    2cc2:	30 e0       	ldi	r19, 0x00	; 0
    2cc4:	81 e0       	ldi	r24, 0x01	; 1
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	02 2e       	mov	r0, r18
    2cca:	02 c0       	rjmp	.+4      	; 0x2cd0 <DIO_SetPinDirection+0x10a>
    2ccc:	88 0f       	add	r24, r24
    2cce:	99 1f       	adc	r25, r25
    2cd0:	0a 94       	dec	r0
    2cd2:	e2 f7       	brpl	.-8      	; 0x2ccc <DIO_SetPinDirection+0x106>
    2cd4:	84 2b       	or	r24, r20
    2cd6:	8c 93       	st	X, r24
    2cd8:	7c c0       	rjmp	.+248    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
				}
			}

			else if ( u8PinDirCopy == INPUT )
    2cda:	8c 81       	ldd	r24, Y+4	; 0x04
    2cdc:	88 23       	and	r24, r24
    2cde:	09 f0       	breq	.+2      	; 0x2ce2 <DIO_SetPinDirection+0x11c>
    2ce0:	74 c0       	rjmp	.+232    	; 0x2dca <DIO_SetPinDirection+0x204>
			{
				/* Check on the Required PORT Number */
				switch (u8PortIdCopy)
    2ce2:	8a 81       	ldd	r24, Y+2	; 0x02
    2ce4:	28 2f       	mov	r18, r24
    2ce6:	30 e0       	ldi	r19, 0x00	; 0
    2ce8:	3e 83       	std	Y+6, r19	; 0x06
    2cea:	2d 83       	std	Y+5, r18	; 0x05
    2cec:	8d 81       	ldd	r24, Y+5	; 0x05
    2cee:	9e 81       	ldd	r25, Y+6	; 0x06
    2cf0:	81 30       	cpi	r24, 0x01	; 1
    2cf2:	91 05       	cpc	r25, r1
    2cf4:	59 f1       	breq	.+86     	; 0x2d4c <DIO_SetPinDirection+0x186>
    2cf6:	2d 81       	ldd	r18, Y+5	; 0x05
    2cf8:	3e 81       	ldd	r19, Y+6	; 0x06
    2cfa:	22 30       	cpi	r18, 0x02	; 2
    2cfc:	31 05       	cpc	r19, r1
    2cfe:	2c f4       	brge	.+10     	; 0x2d0a <DIO_SetPinDirection+0x144>
    2d00:	8d 81       	ldd	r24, Y+5	; 0x05
    2d02:	9e 81       	ldd	r25, Y+6	; 0x06
    2d04:	00 97       	sbiw	r24, 0x00	; 0
    2d06:	69 f0       	breq	.+26     	; 0x2d22 <DIO_SetPinDirection+0x15c>
    2d08:	64 c0       	rjmp	.+200    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
    2d0a:	2d 81       	ldd	r18, Y+5	; 0x05
    2d0c:	3e 81       	ldd	r19, Y+6	; 0x06
    2d0e:	22 30       	cpi	r18, 0x02	; 2
    2d10:	31 05       	cpc	r19, r1
    2d12:	89 f1       	breq	.+98     	; 0x2d76 <DIO_SetPinDirection+0x1b0>
    2d14:	8d 81       	ldd	r24, Y+5	; 0x05
    2d16:	9e 81       	ldd	r25, Y+6	; 0x06
    2d18:	83 30       	cpi	r24, 0x03	; 3
    2d1a:	91 05       	cpc	r25, r1
    2d1c:	09 f4       	brne	.+2      	; 0x2d20 <DIO_SetPinDirection+0x15a>
    2d1e:	40 c0       	rjmp	.+128    	; 0x2da0 <DIO_SetPinDirection+0x1da>
    2d20:	58 c0       	rjmp	.+176    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
				{
					case PORTA: CLR_BIT(DDRA_REG,u8PinIdCopy); break;
    2d22:	aa e3       	ldi	r26, 0x3A	; 58
    2d24:	b0 e0       	ldi	r27, 0x00	; 0
    2d26:	ea e3       	ldi	r30, 0x3A	; 58
    2d28:	f0 e0       	ldi	r31, 0x00	; 0
    2d2a:	80 81       	ld	r24, Z
    2d2c:	48 2f       	mov	r20, r24
    2d2e:	8b 81       	ldd	r24, Y+3	; 0x03
    2d30:	28 2f       	mov	r18, r24
    2d32:	30 e0       	ldi	r19, 0x00	; 0
    2d34:	81 e0       	ldi	r24, 0x01	; 1
    2d36:	90 e0       	ldi	r25, 0x00	; 0
    2d38:	02 2e       	mov	r0, r18
    2d3a:	02 c0       	rjmp	.+4      	; 0x2d40 <DIO_SetPinDirection+0x17a>
    2d3c:	88 0f       	add	r24, r24
    2d3e:	99 1f       	adc	r25, r25
    2d40:	0a 94       	dec	r0
    2d42:	e2 f7       	brpl	.-8      	; 0x2d3c <DIO_SetPinDirection+0x176>
    2d44:	80 95       	com	r24
    2d46:	84 23       	and	r24, r20
    2d48:	8c 93       	st	X, r24
    2d4a:	43 c0       	rjmp	.+134    	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTB: CLR_BIT(DDRB_REG,u8PinIdCopy); break;
    2d4c:	a7 e3       	ldi	r26, 0x37	; 55
    2d4e:	b0 e0       	ldi	r27, 0x00	; 0
    2d50:	e7 e3       	ldi	r30, 0x37	; 55
    2d52:	f0 e0       	ldi	r31, 0x00	; 0
    2d54:	80 81       	ld	r24, Z
    2d56:	48 2f       	mov	r20, r24
    2d58:	8b 81       	ldd	r24, Y+3	; 0x03
    2d5a:	28 2f       	mov	r18, r24
    2d5c:	30 e0       	ldi	r19, 0x00	; 0
    2d5e:	81 e0       	ldi	r24, 0x01	; 1
    2d60:	90 e0       	ldi	r25, 0x00	; 0
    2d62:	02 2e       	mov	r0, r18
    2d64:	02 c0       	rjmp	.+4      	; 0x2d6a <DIO_SetPinDirection+0x1a4>
    2d66:	88 0f       	add	r24, r24
    2d68:	99 1f       	adc	r25, r25
    2d6a:	0a 94       	dec	r0
    2d6c:	e2 f7       	brpl	.-8      	; 0x2d66 <DIO_SetPinDirection+0x1a0>
    2d6e:	80 95       	com	r24
    2d70:	84 23       	and	r24, r20
    2d72:	8c 93       	st	X, r24
    2d74:	2e c0       	rjmp	.+92     	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTC: CLR_BIT(DDRC_REG,u8PinIdCopy); break;
    2d76:	a4 e3       	ldi	r26, 0x34	; 52
    2d78:	b0 e0       	ldi	r27, 0x00	; 0
    2d7a:	e4 e3       	ldi	r30, 0x34	; 52
    2d7c:	f0 e0       	ldi	r31, 0x00	; 0
    2d7e:	80 81       	ld	r24, Z
    2d80:	48 2f       	mov	r20, r24
    2d82:	8b 81       	ldd	r24, Y+3	; 0x03
    2d84:	28 2f       	mov	r18, r24
    2d86:	30 e0       	ldi	r19, 0x00	; 0
    2d88:	81 e0       	ldi	r24, 0x01	; 1
    2d8a:	90 e0       	ldi	r25, 0x00	; 0
    2d8c:	02 2e       	mov	r0, r18
    2d8e:	02 c0       	rjmp	.+4      	; 0x2d94 <DIO_SetPinDirection+0x1ce>
    2d90:	88 0f       	add	r24, r24
    2d92:	99 1f       	adc	r25, r25
    2d94:	0a 94       	dec	r0
    2d96:	e2 f7       	brpl	.-8      	; 0x2d90 <DIO_SetPinDirection+0x1ca>
    2d98:	80 95       	com	r24
    2d9a:	84 23       	and	r24, r20
    2d9c:	8c 93       	st	X, r24
    2d9e:	19 c0       	rjmp	.+50     	; 0x2dd2 <DIO_SetPinDirection+0x20c>
					case PORTD: CLR_BIT(DDRD_REG,u8PinIdCopy); break;
    2da0:	a1 e3       	ldi	r26, 0x31	; 49
    2da2:	b0 e0       	ldi	r27, 0x00	; 0
    2da4:	e1 e3       	ldi	r30, 0x31	; 49
    2da6:	f0 e0       	ldi	r31, 0x00	; 0
    2da8:	80 81       	ld	r24, Z
    2daa:	48 2f       	mov	r20, r24
    2dac:	8b 81       	ldd	r24, Y+3	; 0x03
    2dae:	28 2f       	mov	r18, r24
    2db0:	30 e0       	ldi	r19, 0x00	; 0
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	02 2e       	mov	r0, r18
    2db8:	02 c0       	rjmp	.+4      	; 0x2dbe <DIO_SetPinDirection+0x1f8>
    2dba:	88 0f       	add	r24, r24
    2dbc:	99 1f       	adc	r25, r25
    2dbe:	0a 94       	dec	r0
    2dc0:	e2 f7       	brpl	.-8      	; 0x2dba <DIO_SetPinDirection+0x1f4>
    2dc2:	80 95       	com	r24
    2dc4:	84 23       	and	r24, r20
    2dc6:	8c 93       	st	X, r24
    2dc8:	04 c0       	rjmp	.+8      	; 0x2dd2 <DIO_SetPinDirection+0x20c>
				}
			}

			else
			{
				LOC_enumState = DIO_OK ;
    2dca:	81 e0       	ldi	r24, 0x01	; 1
    2dcc:	89 83       	std	Y+1, r24	; 0x01
    2dce:	01 c0       	rjmp	.+2      	; 0x2dd2 <DIO_SetPinDirection+0x20c>
			}
		}

		else
		{
			LOC_enumState = DIO_NOK ;
    2dd0:	19 82       	std	Y+1, r1	; 0x01
		}
       return LOC_enumState;
    2dd2:	89 81       	ldd	r24, Y+1	; 0x01
}
    2dd4:	28 96       	adiw	r28, 0x08	; 8
    2dd6:	0f b6       	in	r0, 0x3f	; 63
    2dd8:	f8 94       	cli
    2dda:	de bf       	out	0x3e, r29	; 62
    2ddc:	0f be       	out	0x3f, r0	; 63
    2dde:	cd bf       	out	0x3d, r28	; 61
    2de0:	cf 91       	pop	r28
    2de2:	df 91       	pop	r29
    2de4:	08 95       	ret

00002de6 <DIO_SetPortDirection>:

DIO_ErrorStatus DIO_SetPortDirection (u8 u8PortId, u8 u8PortDir)
{
    2de6:	df 93       	push	r29
    2de8:	cf 93       	push	r28
    2dea:	00 d0       	rcall	.+0      	; 0x2dec <DIO_SetPortDirection+0x6>
    2dec:	00 d0       	rcall	.+0      	; 0x2dee <DIO_SetPortDirection+0x8>
    2dee:	0f 92       	push	r0
    2df0:	cd b7       	in	r28, 0x3d	; 61
    2df2:	de b7       	in	r29, 0x3e	; 62
    2df4:	8a 83       	std	Y+2, r24	; 0x02
    2df6:	6b 83       	std	Y+3, r22	; 0x03

	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2df8:	81 e0       	ldi	r24, 0x01	; 1
    2dfa:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    2dfc:	8a 81       	ldd	r24, Y+2	; 0x02
    2dfe:	84 30       	cpi	r24, 0x04	; 4
    2e00:	a8 f5       	brcc	.+106    	; 0x2e6c <DIO_SetPortDirection+0x86>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    2e02:	8a 81       	ldd	r24, Y+2	; 0x02
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	3d 83       	std	Y+5, r19	; 0x05
    2e0a:	2c 83       	std	Y+4, r18	; 0x04
    2e0c:	8c 81       	ldd	r24, Y+4	; 0x04
    2e0e:	9d 81       	ldd	r25, Y+5	; 0x05
    2e10:	81 30       	cpi	r24, 0x01	; 1
    2e12:	91 05       	cpc	r25, r1
    2e14:	d1 f0       	breq	.+52     	; 0x2e4a <DIO_SetPortDirection+0x64>
    2e16:	2c 81       	ldd	r18, Y+4	; 0x04
    2e18:	3d 81       	ldd	r19, Y+5	; 0x05
    2e1a:	22 30       	cpi	r18, 0x02	; 2
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	2c f4       	brge	.+10     	; 0x2e2a <DIO_SetPortDirection+0x44>
    2e20:	8c 81       	ldd	r24, Y+4	; 0x04
    2e22:	9d 81       	ldd	r25, Y+5	; 0x05
    2e24:	00 97       	sbiw	r24, 0x00	; 0
    2e26:	61 f0       	breq	.+24     	; 0x2e40 <DIO_SetPortDirection+0x5a>
    2e28:	1f c0       	rjmp	.+62     	; 0x2e68 <DIO_SetPortDirection+0x82>
    2e2a:	2c 81       	ldd	r18, Y+4	; 0x04
    2e2c:	3d 81       	ldd	r19, Y+5	; 0x05
    2e2e:	22 30       	cpi	r18, 0x02	; 2
    2e30:	31 05       	cpc	r19, r1
    2e32:	81 f0       	breq	.+32     	; 0x2e54 <DIO_SetPortDirection+0x6e>
    2e34:	8c 81       	ldd	r24, Y+4	; 0x04
    2e36:	9d 81       	ldd	r25, Y+5	; 0x05
    2e38:	83 30       	cpi	r24, 0x03	; 3
    2e3a:	91 05       	cpc	r25, r1
    2e3c:	81 f0       	breq	.+32     	; 0x2e5e <DIO_SetPortDirection+0x78>
    2e3e:	14 c0       	rjmp	.+40     	; 0x2e68 <DIO_SetPortDirection+0x82>
		{
			case     PORTA: PORTA_REG = u8PortDir; break;
    2e40:	eb e3       	ldi	r30, 0x3B	; 59
    2e42:	f0 e0       	ldi	r31, 0x00	; 0
    2e44:	8b 81       	ldd	r24, Y+3	; 0x03
    2e46:	80 83       	st	Z, r24
    2e48:	12 c0       	rjmp	.+36     	; 0x2e6e <DIO_SetPortDirection+0x88>
			case     PORTB: PORTB_REG = u8PortDir; break;
    2e4a:	e8 e3       	ldi	r30, 0x38	; 56
    2e4c:	f0 e0       	ldi	r31, 0x00	; 0
    2e4e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e50:	80 83       	st	Z, r24
    2e52:	0d c0       	rjmp	.+26     	; 0x2e6e <DIO_SetPortDirection+0x88>
			case     PORTC: PORTC_REG = u8PortDir; break;
    2e54:	e5 e3       	ldi	r30, 0x35	; 53
    2e56:	f0 e0       	ldi	r31, 0x00	; 0
    2e58:	8b 81       	ldd	r24, Y+3	; 0x03
    2e5a:	80 83       	st	Z, r24
    2e5c:	08 c0       	rjmp	.+16     	; 0x2e6e <DIO_SetPortDirection+0x88>
			case     PORTD: PORTD_REG = u8PortDir; break;
    2e5e:	e2 e3       	ldi	r30, 0x32	; 50
    2e60:	f0 e0       	ldi	r31, 0x00	; 0
    2e62:	8b 81       	ldd	r24, Y+3	; 0x03
    2e64:	80 83       	st	Z, r24
    2e66:	03 c0       	rjmp	.+6      	; 0x2e6e <DIO_SetPortDirection+0x88>
			default: /* Wrong Port ID */  LOC_enumState = DIO_NOK ;      break;
    2e68:	19 82       	std	Y+1, r1	; 0x01
    2e6a:	01 c0       	rjmp	.+2      	; 0x2e6e <DIO_SetPortDirection+0x88>
		}
	}
	else
			{
				LOC_enumState = DIO_NOK ;
    2e6c:	19 82       	std	Y+1, r1	; 0x01
			}

        return LOC_enumState ;
    2e6e:	89 81       	ldd	r24, Y+1	; 0x01
}
    2e70:	0f 90       	pop	r0
    2e72:	0f 90       	pop	r0
    2e74:	0f 90       	pop	r0
    2e76:	0f 90       	pop	r0
    2e78:	0f 90       	pop	r0
    2e7a:	cf 91       	pop	r28
    2e7c:	df 91       	pop	r29
    2e7e:	08 95       	ret

00002e80 <DIO_SetPortValue>:

DIO_ErrorStatus DIO_SetPortValue     (u8 u8PortId, u8 u8PortVal)
{
    2e80:	df 93       	push	r29
    2e82:	cf 93       	push	r28
    2e84:	00 d0       	rcall	.+0      	; 0x2e86 <DIO_SetPortValue+0x6>
    2e86:	00 d0       	rcall	.+0      	; 0x2e88 <DIO_SetPortValue+0x8>
    2e88:	0f 92       	push	r0
    2e8a:	cd b7       	in	r28, 0x3d	; 61
    2e8c:	de b7       	in	r29, 0x3e	; 62
    2e8e:	8a 83       	std	Y+2, r24	; 0x02
    2e90:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2e92:	81 e0       	ldi	r24, 0x01	; 1
    2e94:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    2e96:	8a 81       	ldd	r24, Y+2	; 0x02
    2e98:	84 30       	cpi	r24, 0x04	; 4
    2e9a:	a8 f5       	brcc	.+106    	; 0x2f06 <DIO_SetPortValue+0x86>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    2e9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2e9e:	28 2f       	mov	r18, r24
    2ea0:	30 e0       	ldi	r19, 0x00	; 0
    2ea2:	3d 83       	std	Y+5, r19	; 0x05
    2ea4:	2c 83       	std	Y+4, r18	; 0x04
    2ea6:	8c 81       	ldd	r24, Y+4	; 0x04
    2ea8:	9d 81       	ldd	r25, Y+5	; 0x05
    2eaa:	81 30       	cpi	r24, 0x01	; 1
    2eac:	91 05       	cpc	r25, r1
    2eae:	d1 f0       	breq	.+52     	; 0x2ee4 <DIO_SetPortValue+0x64>
    2eb0:	2c 81       	ldd	r18, Y+4	; 0x04
    2eb2:	3d 81       	ldd	r19, Y+5	; 0x05
    2eb4:	22 30       	cpi	r18, 0x02	; 2
    2eb6:	31 05       	cpc	r19, r1
    2eb8:	2c f4       	brge	.+10     	; 0x2ec4 <DIO_SetPortValue+0x44>
    2eba:	8c 81       	ldd	r24, Y+4	; 0x04
    2ebc:	9d 81       	ldd	r25, Y+5	; 0x05
    2ebe:	00 97       	sbiw	r24, 0x00	; 0
    2ec0:	61 f0       	breq	.+24     	; 0x2eda <DIO_SetPortValue+0x5a>
    2ec2:	1f c0       	rjmp	.+62     	; 0x2f02 <DIO_SetPortValue+0x82>
    2ec4:	2c 81       	ldd	r18, Y+4	; 0x04
    2ec6:	3d 81       	ldd	r19, Y+5	; 0x05
    2ec8:	22 30       	cpi	r18, 0x02	; 2
    2eca:	31 05       	cpc	r19, r1
    2ecc:	81 f0       	breq	.+32     	; 0x2eee <DIO_SetPortValue+0x6e>
    2ece:	8c 81       	ldd	r24, Y+4	; 0x04
    2ed0:	9d 81       	ldd	r25, Y+5	; 0x05
    2ed2:	83 30       	cpi	r24, 0x03	; 3
    2ed4:	91 05       	cpc	r25, r1
    2ed6:	81 f0       	breq	.+32     	; 0x2ef8 <DIO_SetPortValue+0x78>
    2ed8:	14 c0       	rjmp	.+40     	; 0x2f02 <DIO_SetPortValue+0x82>
		{
			case     PORTA: PORTA_REG = u8PortVal; break;
    2eda:	eb e3       	ldi	r30, 0x3B	; 59
    2edc:	f0 e0       	ldi	r31, 0x00	; 0
    2ede:	8b 81       	ldd	r24, Y+3	; 0x03
    2ee0:	80 83       	st	Z, r24
    2ee2:	12 c0       	rjmp	.+36     	; 0x2f08 <DIO_SetPortValue+0x88>
			case     PORTB: PORTB_REG = u8PortVal; break;
    2ee4:	e8 e3       	ldi	r30, 0x38	; 56
    2ee6:	f0 e0       	ldi	r31, 0x00	; 0
    2ee8:	8b 81       	ldd	r24, Y+3	; 0x03
    2eea:	80 83       	st	Z, r24
    2eec:	0d c0       	rjmp	.+26     	; 0x2f08 <DIO_SetPortValue+0x88>
			case     PORTC: PORTC_REG = u8PortVal; break;
    2eee:	e5 e3       	ldi	r30, 0x35	; 53
    2ef0:	f0 e0       	ldi	r31, 0x00	; 0
    2ef2:	8b 81       	ldd	r24, Y+3	; 0x03
    2ef4:	80 83       	st	Z, r24
    2ef6:	08 c0       	rjmp	.+16     	; 0x2f08 <DIO_SetPortValue+0x88>
			case     PORTD: PORTD_REG = u8PortVal; break;
    2ef8:	e2 e3       	ldi	r30, 0x32	; 50
    2efa:	f0 e0       	ldi	r31, 0x00	; 0
    2efc:	8b 81       	ldd	r24, Y+3	; 0x03
    2efe:	80 83       	st	Z, r24
    2f00:	03 c0       	rjmp	.+6      	; 0x2f08 <DIO_SetPortValue+0x88>
			default: LOC_enumState = DIO_NOK ;       break;
    2f02:	19 82       	std	Y+1, r1	; 0x01
    2f04:	01 c0       	rjmp	.+2      	; 0x2f08 <DIO_SetPortValue+0x88>
		}
	}
	          else
				{
					LOC_enumState = DIO_NOK ;
    2f06:	19 82       	std	Y+1, r1	; 0x01
				}
        return LOC_enumState ;
    2f08:	89 81       	ldd	r24, Y+1	; 0x01

}
    2f0a:	0f 90       	pop	r0
    2f0c:	0f 90       	pop	r0
    2f0e:	0f 90       	pop	r0
    2f10:	0f 90       	pop	r0
    2f12:	0f 90       	pop	r0
    2f14:	cf 91       	pop	r28
    2f16:	df 91       	pop	r29
    2f18:	08 95       	ret

00002f1a <DIO_TOGPortValue>:
DIO_ErrorStatus DIO_TOGPortValue     (u8 u8PortId, u8 u8PortVal)
{
    2f1a:	df 93       	push	r29
    2f1c:	cf 93       	push	r28
    2f1e:	00 d0       	rcall	.+0      	; 0x2f20 <DIO_TOGPortValue+0x6>
    2f20:	00 d0       	rcall	.+0      	; 0x2f22 <DIO_TOGPortValue+0x8>
    2f22:	0f 92       	push	r0
    2f24:	cd b7       	in	r28, 0x3d	; 61
    2f26:	de b7       	in	r29, 0x3e	; 62
    2f28:	8a 83       	std	Y+2, r24	; 0x02
    2f2a:	6b 83       	std	Y+3, r22	; 0x03
	DIO_ErrorStatus LOC_enumState = DIO_OK ;
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	89 83       	std	Y+1, r24	; 0x01
	if (( u8PortId <= PORTD) )
    2f30:	8a 81       	ldd	r24, Y+2	; 0x02
    2f32:	84 30       	cpi	r24, 0x04	; 4
    2f34:	c8 f5       	brcc	.+114    	; 0x2fa8 <DIO_TOGPortValue+0x8e>
	{
	/* Check on the Required PORT Number */
		switch (u8PortId)
    2f36:	8a 81       	ldd	r24, Y+2	; 0x02
    2f38:	28 2f       	mov	r18, r24
    2f3a:	30 e0       	ldi	r19, 0x00	; 0
    2f3c:	3d 83       	std	Y+5, r19	; 0x05
    2f3e:	2c 83       	std	Y+4, r18	; 0x04
    2f40:	8c 81       	ldd	r24, Y+4	; 0x04
    2f42:	9d 81       	ldd	r25, Y+5	; 0x05
    2f44:	81 30       	cpi	r24, 0x01	; 1
    2f46:	91 05       	cpc	r25, r1
    2f48:	d9 f0       	breq	.+54     	; 0x2f80 <DIO_TOGPortValue+0x66>
    2f4a:	2c 81       	ldd	r18, Y+4	; 0x04
    2f4c:	3d 81       	ldd	r19, Y+5	; 0x05
    2f4e:	22 30       	cpi	r18, 0x02	; 2
    2f50:	31 05       	cpc	r19, r1
    2f52:	2c f4       	brge	.+10     	; 0x2f5e <DIO_TOGPortValue+0x44>
    2f54:	8c 81       	ldd	r24, Y+4	; 0x04
    2f56:	9d 81       	ldd	r25, Y+5	; 0x05
    2f58:	00 97       	sbiw	r24, 0x00	; 0
    2f5a:	61 f0       	breq	.+24     	; 0x2f74 <DIO_TOGPortValue+0x5a>
    2f5c:	23 c0       	rjmp	.+70     	; 0x2fa4 <DIO_TOGPortValue+0x8a>
    2f5e:	2c 81       	ldd	r18, Y+4	; 0x04
    2f60:	3d 81       	ldd	r19, Y+5	; 0x05
    2f62:	22 30       	cpi	r18, 0x02	; 2
    2f64:	31 05       	cpc	r19, r1
    2f66:	91 f0       	breq	.+36     	; 0x2f8c <DIO_TOGPortValue+0x72>
    2f68:	8c 81       	ldd	r24, Y+4	; 0x04
    2f6a:	9d 81       	ldd	r25, Y+5	; 0x05
    2f6c:	83 30       	cpi	r24, 0x03	; 3
    2f6e:	91 05       	cpc	r25, r1
    2f70:	99 f0       	breq	.+38     	; 0x2f98 <DIO_TOGPortValue+0x7e>
    2f72:	18 c0       	rjmp	.+48     	; 0x2fa4 <DIO_TOGPortValue+0x8a>
		{
			case     PORTA: PORTA_REG =~u8PortVal; break;
    2f74:	eb e3       	ldi	r30, 0x3B	; 59
    2f76:	f0 e0       	ldi	r31, 0x00	; 0
    2f78:	8b 81       	ldd	r24, Y+3	; 0x03
    2f7a:	80 95       	com	r24
    2f7c:	80 83       	st	Z, r24
    2f7e:	15 c0       	rjmp	.+42     	; 0x2faa <DIO_TOGPortValue+0x90>
			case     PORTB: PORTB_REG =~u8PortVal; break;
    2f80:	e8 e3       	ldi	r30, 0x38	; 56
    2f82:	f0 e0       	ldi	r31, 0x00	; 0
    2f84:	8b 81       	ldd	r24, Y+3	; 0x03
    2f86:	80 95       	com	r24
    2f88:	80 83       	st	Z, r24
    2f8a:	0f c0       	rjmp	.+30     	; 0x2faa <DIO_TOGPortValue+0x90>
			case     PORTC: PORTC_REG =~u8PortVal; break;
    2f8c:	e5 e3       	ldi	r30, 0x35	; 53
    2f8e:	f0 e0       	ldi	r31, 0x00	; 0
    2f90:	8b 81       	ldd	r24, Y+3	; 0x03
    2f92:	80 95       	com	r24
    2f94:	80 83       	st	Z, r24
    2f96:	09 c0       	rjmp	.+18     	; 0x2faa <DIO_TOGPortValue+0x90>
			case     PORTD: PORTD_REG =~u8PortVal; break;
    2f98:	e2 e3       	ldi	r30, 0x32	; 50
    2f9a:	f0 e0       	ldi	r31, 0x00	; 0
    2f9c:	8b 81       	ldd	r24, Y+3	; 0x03
    2f9e:	80 95       	com	r24
    2fa0:	80 83       	st	Z, r24
    2fa2:	03 c0       	rjmp	.+6      	; 0x2faa <DIO_TOGPortValue+0x90>
			default: LOC_enumState = DIO_NOK ;       break;
    2fa4:	19 82       	std	Y+1, r1	; 0x01
    2fa6:	01 c0       	rjmp	.+2      	; 0x2faa <DIO_TOGPortValue+0x90>
		}
	}
	          else
				{
					LOC_enumState = DIO_NOK ;
    2fa8:	19 82       	std	Y+1, r1	; 0x01
				}
        return LOC_enumState ;
    2faa:	89 81       	ldd	r24, Y+1	; 0x01

}
    2fac:	0f 90       	pop	r0
    2fae:	0f 90       	pop	r0
    2fb0:	0f 90       	pop	r0
    2fb2:	0f 90       	pop	r0
    2fb4:	0f 90       	pop	r0
    2fb6:	cf 91       	pop	r28
    2fb8:	df 91       	pop	r29
    2fba:	08 95       	ret

00002fbc <ADC_VoidInit>:
#include"ADC_interface.h"
#include"ADC_private.h"
#include"ADC_config.h"

void ADC_VoidInit (void)
{
    2fbc:	df 93       	push	r29
    2fbe:	cf 93       	push	r28
    2fc0:	cd b7       	in	r28, 0x3d	; 61
    2fc2:	de b7       	in	r29, 0x3e	; 62

	ADMUX_Reg =  ADC_REFERNECE_VOLTAGE | ADLAR;
    2fc4:	e7 e2       	ldi	r30, 0x27	; 39
    2fc6:	f0 e0       	ldi	r31, 0x00	; 0
    2fc8:	80 e6       	ldi	r24, 0x60	; 96
    2fca:	80 83       	st	Z, r24
	ADCSRA_Reg = ADC_STATE | ADC_INTERRUPT | ADC_prescaller;
    2fcc:	e6 e2       	ldi	r30, 0x26	; 38
    2fce:	f0 e0       	ldi	r31, 0x00	; 0
    2fd0:	87 e8       	ldi	r24, 0x87	; 135
    2fd2:	80 83       	st	Z, r24

}
    2fd4:	cf 91       	pop	r28
    2fd6:	df 91       	pop	r29
    2fd8:	08 95       	ret

00002fda <ADC_u16Read>:


u16 ADC_u16Read (u8 Copy_u8Channel_Id)
{
    2fda:	df 93       	push	r29
    2fdc:	cf 93       	push	r28
    2fde:	00 d0       	rcall	.+0      	; 0x2fe0 <ADC_u16Read+0x6>
    2fe0:	0f 92       	push	r0
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	8b 83       	std	Y+3, r24	; 0x03
	u16 ADC_u8Result=0;
    2fe8:	1a 82       	std	Y+2, r1	; 0x02
    2fea:	19 82       	std	Y+1, r1	; 0x01
	ADMUX_Reg &=~(0b11111);
    2fec:	a7 e2       	ldi	r26, 0x27	; 39
    2fee:	b0 e0       	ldi	r27, 0x00	; 0
    2ff0:	e7 e2       	ldi	r30, 0x27	; 39
    2ff2:	f0 e0       	ldi	r31, 0x00	; 0
    2ff4:	80 81       	ld	r24, Z
    2ff6:	80 7e       	andi	r24, 0xE0	; 224
    2ff8:	8c 93       	st	X, r24
	//select channel
	ADMUX_Reg |= Copy_u8Channel_Id;
    2ffa:	a7 e2       	ldi	r26, 0x27	; 39
    2ffc:	b0 e0       	ldi	r27, 0x00	; 0
    2ffe:	e7 e2       	ldi	r30, 0x27	; 39
    3000:	f0 e0       	ldi	r31, 0x00	; 0
    3002:	90 81       	ld	r25, Z
    3004:	8b 81       	ldd	r24, Y+3	; 0x03
    3006:	89 2b       	or	r24, r25
    3008:	8c 93       	st	X, r24
	//start conversion
	ADCSRA_Reg |= (1 << 6);
    300a:	a6 e2       	ldi	r26, 0x26	; 38
    300c:	b0 e0       	ldi	r27, 0x00	; 0
    300e:	e6 e2       	ldi	r30, 0x26	; 38
    3010:	f0 e0       	ldi	r31, 0x00	; 0
    3012:	80 81       	ld	r24, Z
    3014:	80 64       	ori	r24, 0x40	; 64
    3016:	8c 93       	st	X, r24
	// wait the flag to be set
	while( ( (ADCSRA_Reg >> 4)& 1) == 0 );
    3018:	e6 e2       	ldi	r30, 0x26	; 38
    301a:	f0 e0       	ldi	r31, 0x00	; 0
    301c:	80 81       	ld	r24, Z
    301e:	82 95       	swap	r24
    3020:	8f 70       	andi	r24, 0x0F	; 15
    3022:	88 2f       	mov	r24, r24
    3024:	90 e0       	ldi	r25, 0x00	; 0
    3026:	81 70       	andi	r24, 0x01	; 1
    3028:	90 70       	andi	r25, 0x00	; 0
    302a:	00 97       	sbiw	r24, 0x00	; 0
    302c:	a9 f3       	breq	.-22     	; 0x3018 <ADC_u16Read+0x3e>
#if ADLAR == ADC_LEFT_ADJUST_DISABEL
	ADC_u8Result = ADCL_Reg | (ADCH_Reg <<8 );

#elif ADLAR == ADC_LEFT_ADJUST_ENABLE
	ADC_u8Result = (ADCH_Reg << 2);
    302e:	e5 e2       	ldi	r30, 0x25	; 37
    3030:	f0 e0       	ldi	r31, 0x00	; 0
    3032:	80 81       	ld	r24, Z
    3034:	88 2f       	mov	r24, r24
    3036:	90 e0       	ldi	r25, 0x00	; 0
    3038:	88 0f       	add	r24, r24
    303a:	99 1f       	adc	r25, r25
    303c:	88 0f       	add	r24, r24
    303e:	99 1f       	adc	r25, r25
    3040:	9a 83       	std	Y+2, r25	; 0x02
    3042:	89 83       	std	Y+1, r24	; 0x01
#endif

	// clear flag
	ADCSRA_Reg |= (1 << 4);
    3044:	a6 e2       	ldi	r26, 0x26	; 38
    3046:	b0 e0       	ldi	r27, 0x00	; 0
    3048:	e6 e2       	ldi	r30, 0x26	; 38
    304a:	f0 e0       	ldi	r31, 0x00	; 0
    304c:	80 81       	ld	r24, Z
    304e:	80 61       	ori	r24, 0x10	; 16
    3050:	8c 93       	st	X, r24

	return ADC_u8Result;
    3052:	89 81       	ldd	r24, Y+1	; 0x01
    3054:	9a 81       	ldd	r25, Y+2	; 0x02
}
    3056:	0f 90       	pop	r0
    3058:	0f 90       	pop	r0
    305a:	0f 90       	pop	r0
    305c:	cf 91       	pop	r28
    305e:	df 91       	pop	r29
    3060:	08 95       	ret

00003062 <RTC_enumUpdateTime>:
#include "RTC_interface.h"
#include "RTC_private.h"
#include "RTC_config.h"

ERROR_STATE RTC_enumUpdateTime(RTC_Time * Copy_struct_ptr_Time)
{
    3062:	df 93       	push	r29
    3064:	cf 93       	push	r28
    3066:	00 d0       	rcall	.+0      	; 0x3068 <RTC_enumUpdateTime+0x6>
    3068:	00 d0       	rcall	.+0      	; 0x306a <RTC_enumUpdateTime+0x8>
    306a:	00 d0       	rcall	.+0      	; 0x306c <RTC_enumUpdateTime+0xa>
    306c:	cd b7       	in	r28, 0x3d	; 61
    306e:	de b7       	in	r29, 0x3e	; 62
    3070:	9e 83       	std	Y+6, r25	; 0x06
    3072:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enum_ErrorState = NOK;
    3074:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Seconds = (((Copy_struct_ptr_Time->Seconds) / 10 ) << 4);
    3076:	ed 81       	ldd	r30, Y+5	; 0x05
    3078:	fe 81       	ldd	r31, Y+6	; 0x06
    307a:	80 81       	ld	r24, Z
    307c:	9a e0       	ldi	r25, 0x0A	; 10
    307e:	69 2f       	mov	r22, r25
    3080:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3084:	82 95       	swap	r24
    3086:	80 7f       	andi	r24, 0xF0	; 240
    3088:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8Seconds   |= ((Copy_struct_ptr_Time->Seconds) % 10);
    308a:	ed 81       	ldd	r30, Y+5	; 0x05
    308c:	fe 81       	ldd	r31, Y+6	; 0x06
    308e:	80 81       	ld	r24, Z
    3090:	9a e0       	ldi	r25, 0x0A	; 10
    3092:	69 2f       	mov	r22, r25
    3094:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3098:	89 2f       	mov	r24, r25
    309a:	98 2f       	mov	r25, r24
    309c:	8b 81       	ldd	r24, Y+3	; 0x03
    309e:	89 2b       	or	r24, r25
    30a0:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8Seconds &=~(1 << 7); // Enable the channel bit
    30a2:	8b 81       	ldd	r24, Y+3	; 0x03
    30a4:	8f 77       	andi	r24, 0x7F	; 127
    30a6:	8b 83       	std	Y+3, r24	; 0x03
	u8 Local_u8Minutes = (((Copy_struct_ptr_Time->Minutes)/10) << 4);
    30a8:	ed 81       	ldd	r30, Y+5	; 0x05
    30aa:	fe 81       	ldd	r31, Y+6	; 0x06
    30ac:	81 81       	ldd	r24, Z+1	; 0x01
    30ae:	9a e0       	ldi	r25, 0x0A	; 10
    30b0:	69 2f       	mov	r22, r25
    30b2:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    30b6:	82 95       	swap	r24
    30b8:	80 7f       	andi	r24, 0xF0	; 240
    30ba:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8Minutes |= ((Copy_struct_ptr_Time->Minutes) % 10);
    30bc:	ed 81       	ldd	r30, Y+5	; 0x05
    30be:	fe 81       	ldd	r31, Y+6	; 0x06
    30c0:	81 81       	ldd	r24, Z+1	; 0x01
    30c2:	9a e0       	ldi	r25, 0x0A	; 10
    30c4:	69 2f       	mov	r22, r25
    30c6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    30ca:	89 2f       	mov	r24, r25
    30cc:	98 2f       	mov	r25, r24
    30ce:	8a 81       	ldd	r24, Y+2	; 0x02
    30d0:	89 2b       	or	r24, r25
    30d2:	8a 83       	std	Y+2, r24	; 0x02
	u8 Local_u8Hours = (((Copy_struct_ptr_Time->Hours)/10) << 4);
    30d4:	ed 81       	ldd	r30, Y+5	; 0x05
    30d6:	fe 81       	ldd	r31, Y+6	; 0x06
    30d8:	82 81       	ldd	r24, Z+2	; 0x02
    30da:	9a e0       	ldi	r25, 0x0A	; 10
    30dc:	69 2f       	mov	r22, r25
    30de:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    30e2:	82 95       	swap	r24
    30e4:	80 7f       	andi	r24, 0xF0	; 240
    30e6:	89 83       	std	Y+1, r24	; 0x01
	if(Copy_struct_ptr_Time->HoursMode == Hours_24)
    30e8:	ed 81       	ldd	r30, Y+5	; 0x05
    30ea:	fe 81       	ldd	r31, Y+6	; 0x06
    30ec:	84 81       	ldd	r24, Z+4	; 0x04
    30ee:	88 23       	and	r24, r24
    30f0:	89 f4       	brne	.+34     	; 0x3114 <RTC_enumUpdateTime+0xb2>
	{
		Local_u8Hours |= ((Copy_struct_ptr_Time->HoursMode)|((Copy_struct_ptr_Time->Hours)%10));
    30f2:	ed 81       	ldd	r30, Y+5	; 0x05
    30f4:	fe 81       	ldd	r31, Y+6	; 0x06
    30f6:	24 81       	ldd	r18, Z+4	; 0x04
    30f8:	ed 81       	ldd	r30, Y+5	; 0x05
    30fa:	fe 81       	ldd	r31, Y+6	; 0x06
    30fc:	82 81       	ldd	r24, Z+2	; 0x02
    30fe:	9a e0       	ldi	r25, 0x0A	; 10
    3100:	69 2f       	mov	r22, r25
    3102:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3106:	89 2f       	mov	r24, r25
    3108:	92 2f       	mov	r25, r18
    310a:	98 2b       	or	r25, r24
    310c:	89 81       	ldd	r24, Y+1	; 0x01
    310e:	89 2b       	or	r24, r25
    3110:	89 83       	std	Y+1, r24	; 0x01
    3112:	15 c0       	rjmp	.+42     	; 0x313e <RTC_enumUpdateTime+0xdc>
	}
	else
	{
		Local_u8Hours |= ((Copy_struct_ptr_Time->HoursMode)|(Copy_struct_ptr_Time->AM_PM)|((Copy_struct_ptr_Time->Hours)%10));
    3114:	ed 81       	ldd	r30, Y+5	; 0x05
    3116:	fe 81       	ldd	r31, Y+6	; 0x06
    3118:	94 81       	ldd	r25, Z+4	; 0x04
    311a:	ed 81       	ldd	r30, Y+5	; 0x05
    311c:	fe 81       	ldd	r31, Y+6	; 0x06
    311e:	83 81       	ldd	r24, Z+3	; 0x03
    3120:	29 2f       	mov	r18, r25
    3122:	28 2b       	or	r18, r24
    3124:	ed 81       	ldd	r30, Y+5	; 0x05
    3126:	fe 81       	ldd	r31, Y+6	; 0x06
    3128:	82 81       	ldd	r24, Z+2	; 0x02
    312a:	9a e0       	ldi	r25, 0x0A	; 10
    312c:	69 2f       	mov	r22, r25
    312e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3132:	89 2f       	mov	r24, r25
    3134:	92 2f       	mov	r25, r18
    3136:	98 2b       	or	r25, r24
    3138:	89 81       	ldd	r24, Y+1	; 0x01
    313a:	89 2b       	or	r24, r25
    313c:	89 83       	std	Y+1, r24	; 0x01

	}

	Local_enum_ErrorState = I2C_MASTER_enumSendStart();
    313e:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_MASTER_enumSendStart>
    3142:	8c 83       	std	Y+4, r24	; 0x04
	if (Local_enum_ErrorState == OK)
    3144:	8c 81       	ldd	r24, Y+4	; 0x04
    3146:	81 30       	cpi	r24, 0x01	; 1
    3148:	29 f5       	brne	.+74     	; 0x3194 <RTC_enumUpdateTime+0x132>
	{
		Local_enum_ErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    314a:	88 e6       	ldi	r24, 0x68	; 104
    314c:	0e 94 b0 11 	call	0x2360	; 0x2360 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    3150:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_enum_ErrorState == OK)
    3152:	8c 81       	ldd	r24, Y+4	; 0x04
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	f1 f4       	brne	.+60     	; 0x3194 <RTC_enumUpdateTime+0x132>
		{
			Local_enum_ErrorState = I2C_MASTER_enumSendByte(RTC_BASE_TIME_ADDRESS);
    3158:	80 e0       	ldi	r24, 0x00	; 0
    315a:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    315e:	8c 83       	std	Y+4, r24	; 0x04
			if( Local_enum_ErrorState == OK )
    3160:	8c 81       	ldd	r24, Y+4	; 0x04
    3162:	81 30       	cpi	r24, 0x01	; 1
    3164:	b9 f4       	brne	.+46     	; 0x3194 <RTC_enumUpdateTime+0x132>
			{
				Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Seconds);
    3166:	8b 81       	ldd	r24, Y+3	; 0x03
    3168:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    316c:	8c 83       	std	Y+4, r24	; 0x04
				if( Local_enum_ErrorState == OK )
    316e:	8c 81       	ldd	r24, Y+4	; 0x04
    3170:	81 30       	cpi	r24, 0x01	; 1
    3172:	81 f4       	brne	.+32     	; 0x3194 <RTC_enumUpdateTime+0x132>
				{
					Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Minutes);
    3174:	8a 81       	ldd	r24, Y+2	; 0x02
    3176:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    317a:	8c 83       	std	Y+4, r24	; 0x04
					if(Local_enum_ErrorState == OK)
    317c:	8c 81       	ldd	r24, Y+4	; 0x04
    317e:	81 30       	cpi	r24, 0x01	; 1
    3180:	49 f4       	brne	.+18     	; 0x3194 <RTC_enumUpdateTime+0x132>
					{
						Local_enum_ErrorState = I2C_MASTER_enumSendByte(Local_u8Hours);
    3182:	89 81       	ldd	r24, Y+1	; 0x01
    3184:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    3188:	8c 83       	std	Y+4, r24	; 0x04
						if(Local_enum_ErrorState == OK)
    318a:	8c 81       	ldd	r24, Y+4	; 0x04
    318c:	81 30       	cpi	r24, 0x01	; 1
    318e:	11 f4       	brne	.+4      	; 0x3194 <RTC_enumUpdateTime+0x132>
						{
							I2C_MASTER_voidSendSTOP();
    3190:	0e 94 6d 11 	call	0x22da	; 0x22da <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enum_ErrorState;
    3194:	8c 81       	ldd	r24, Y+4	; 0x04
}
    3196:	26 96       	adiw	r28, 0x06	; 6
    3198:	0f b6       	in	r0, 0x3f	; 63
    319a:	f8 94       	cli
    319c:	de bf       	out	0x3e, r29	; 62
    319e:	0f be       	out	0x3f, r0	; 63
    31a0:	cd bf       	out	0x3d, r28	; 61
    31a2:	cf 91       	pop	r28
    31a4:	df 91       	pop	r29
    31a6:	08 95       	ret

000031a8 <RTC_enumUpdateCalendar>:

ERROR_STATE RTC_enumUpdateCalendar(RTC_Date * Copy_struct_ptr_Date)
{
    31a8:	df 93       	push	r29
    31aa:	cf 93       	push	r28
    31ac:	00 d0       	rcall	.+0      	; 0x31ae <RTC_enumUpdateCalendar+0x6>
    31ae:	00 d0       	rcall	.+0      	; 0x31b0 <RTC_enumUpdateCalendar+0x8>
    31b0:	00 d0       	rcall	.+0      	; 0x31b2 <RTC_enumUpdateCalendar+0xa>
    31b2:	cd b7       	in	r28, 0x3d	; 61
    31b4:	de b7       	in	r29, 0x3e	; 62
    31b6:	9e 83       	std	Y+6, r25	; 0x06
    31b8:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enumErrorState = NOK;
    31ba:	1c 82       	std	Y+4, r1	; 0x04
	u8 Local_u8Date = ((Copy_struct_ptr_Date->Date /10 )<<4);
    31bc:	ed 81       	ldd	r30, Y+5	; 0x05
    31be:	fe 81       	ldd	r31, Y+6	; 0x06
    31c0:	81 81       	ldd	r24, Z+1	; 0x01
    31c2:	9a e0       	ldi	r25, 0x0A	; 10
    31c4:	69 2f       	mov	r22, r25
    31c6:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    31ca:	82 95       	swap	r24
    31cc:	80 7f       	andi	r24, 0xF0	; 240
    31ce:	8b 83       	std	Y+3, r24	; 0x03
	Local_u8Date |= (Copy_struct_ptr_Date->Date % 10);
    31d0:	ed 81       	ldd	r30, Y+5	; 0x05
    31d2:	fe 81       	ldd	r31, Y+6	; 0x06
    31d4:	81 81       	ldd	r24, Z+1	; 0x01
    31d6:	9a e0       	ldi	r25, 0x0A	; 10
    31d8:	69 2f       	mov	r22, r25
    31da:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    31de:	89 2f       	mov	r24, r25
    31e0:	98 2f       	mov	r25, r24
    31e2:	8b 81       	ldd	r24, Y+3	; 0x03
    31e4:	89 2b       	or	r24, r25
    31e6:	8b 83       	std	Y+3, r24	; 0x03

	u8 Local_u8_Month = ((Copy_struct_ptr_Date->Month /10) << 4);
    31e8:	ed 81       	ldd	r30, Y+5	; 0x05
    31ea:	fe 81       	ldd	r31, Y+6	; 0x06
    31ec:	82 81       	ldd	r24, Z+2	; 0x02
    31ee:	9a e0       	ldi	r25, 0x0A	; 10
    31f0:	69 2f       	mov	r22, r25
    31f2:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    31f6:	82 95       	swap	r24
    31f8:	80 7f       	andi	r24, 0xF0	; 240
    31fa:	8a 83       	std	Y+2, r24	; 0x02
	Local_u8_Month |= (Copy_struct_ptr_Date->Month % 10);
    31fc:	ed 81       	ldd	r30, Y+5	; 0x05
    31fe:	fe 81       	ldd	r31, Y+6	; 0x06
    3200:	82 81       	ldd	r24, Z+2	; 0x02
    3202:	9a e0       	ldi	r25, 0x0A	; 10
    3204:	69 2f       	mov	r22, r25
    3206:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    320a:	89 2f       	mov	r24, r25
    320c:	98 2f       	mov	r25, r24
    320e:	8a 81       	ldd	r24, Y+2	; 0x02
    3210:	89 2b       	or	r24, r25
    3212:	8a 83       	std	Y+2, r24	; 0x02

	u8 Local_u8_Year = ((Copy_struct_ptr_Date->Year /10) << 4);
    3214:	ed 81       	ldd	r30, Y+5	; 0x05
    3216:	fe 81       	ldd	r31, Y+6	; 0x06
    3218:	83 81       	ldd	r24, Z+3	; 0x03
    321a:	9a e0       	ldi	r25, 0x0A	; 10
    321c:	69 2f       	mov	r22, r25
    321e:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3222:	82 95       	swap	r24
    3224:	80 7f       	andi	r24, 0xF0	; 240
    3226:	89 83       	std	Y+1, r24	; 0x01
	Local_u8_Year |= (Copy_struct_ptr_Date->Year % 10);
    3228:	ed 81       	ldd	r30, Y+5	; 0x05
    322a:	fe 81       	ldd	r31, Y+6	; 0x06
    322c:	83 81       	ldd	r24, Z+3	; 0x03
    322e:	9a e0       	ldi	r25, 0x0A	; 10
    3230:	69 2f       	mov	r22, r25
    3232:	0e 94 ba 23 	call	0x4774	; 0x4774 <__udivmodqi4>
    3236:	89 2f       	mov	r24, r25
    3238:	98 2f       	mov	r25, r24
    323a:	89 81       	ldd	r24, Y+1	; 0x01
    323c:	89 2b       	or	r24, r25
    323e:	89 83       	std	Y+1, r24	; 0x01

	Local_enumErrorState = I2C_MASTER_enumSendStart();
    3240:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_MASTER_enumSendStart>
    3244:	8c 83       	std	Y+4, r24	; 0x04
	if(Local_enumErrorState == OK)
    3246:	8c 81       	ldd	r24, Y+4	; 0x04
    3248:	81 30       	cpi	r24, 0x01	; 1
    324a:	71 f5       	brne	.+92     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
	{
		Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    324c:	88 e6       	ldi	r24, 0x68	; 104
    324e:	0e 94 b0 11 	call	0x2360	; 0x2360 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    3252:	8c 83       	std	Y+4, r24	; 0x04
		if(Local_enumErrorState == OK)
    3254:	8c 81       	ldd	r24, Y+4	; 0x04
    3256:	81 30       	cpi	r24, 0x01	; 1
    3258:	39 f5       	brne	.+78     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
		{
			Local_enumErrorState = I2C_MASTER_enumSendByte(RTC_BASE_CALENDER_ADDRESS);
    325a:	83 e0       	ldi	r24, 0x03	; 3
    325c:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    3260:	8c 83       	std	Y+4, r24	; 0x04
			if( Local_enumErrorState == OK )
    3262:	8c 81       	ldd	r24, Y+4	; 0x04
    3264:	81 30       	cpi	r24, 0x01	; 1
    3266:	01 f5       	brne	.+64     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
			{
				Local_enumErrorState = I2C_MASTER_enumSendByte(Copy_struct_ptr_Date->Day);
    3268:	ed 81       	ldd	r30, Y+5	; 0x05
    326a:	fe 81       	ldd	r31, Y+6	; 0x06
    326c:	80 81       	ld	r24, Z
    326e:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    3272:	8c 83       	std	Y+4, r24	; 0x04
				if( Local_enumErrorState == OK )
    3274:	8c 81       	ldd	r24, Y+4	; 0x04
    3276:	81 30       	cpi	r24, 0x01	; 1
    3278:	b9 f4       	brne	.+46     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
				{
					Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8Date);
    327a:	8b 81       	ldd	r24, Y+3	; 0x03
    327c:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    3280:	8c 83       	std	Y+4, r24	; 0x04
					if( Local_enumErrorState == OK )
    3282:	8c 81       	ldd	r24, Y+4	; 0x04
    3284:	81 30       	cpi	r24, 0x01	; 1
    3286:	81 f4       	brne	.+32     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
					{
						Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8_Month);
    3288:	8a 81       	ldd	r24, Y+2	; 0x02
    328a:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    328e:	8c 83       	std	Y+4, r24	; 0x04
						if(Local_enumErrorState == OK)
    3290:	8c 81       	ldd	r24, Y+4	; 0x04
    3292:	81 30       	cpi	r24, 0x01	; 1
    3294:	49 f4       	brne	.+18     	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
						{
							Local_enumErrorState = I2C_MASTER_enumSendByte(Local_u8_Year);
    3296:	89 81       	ldd	r24, Y+1	; 0x01
    3298:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    329c:	8c 83       	std	Y+4, r24	; 0x04
							if(Local_enumErrorState == OK)
    329e:	8c 81       	ldd	r24, Y+4	; 0x04
    32a0:	81 30       	cpi	r24, 0x01	; 1
    32a2:	11 f4       	brne	.+4      	; 0x32a8 <RTC_enumUpdateCalendar+0x100>
							{
								I2C_MASTER_voidSendSTOP();
    32a4:	0e 94 6d 11 	call	0x22da	; 0x22da <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enumErrorState;
    32a8:	8c 81       	ldd	r24, Y+4	; 0x04
}
    32aa:	26 96       	adiw	r28, 0x06	; 6
    32ac:	0f b6       	in	r0, 0x3f	; 63
    32ae:	f8 94       	cli
    32b0:	de bf       	out	0x3e, r29	; 62
    32b2:	0f be       	out	0x3f, r0	; 63
    32b4:	cd bf       	out	0x3d, r28	; 61
    32b6:	cf 91       	pop	r28
    32b8:	df 91       	pop	r29
    32ba:	08 95       	ret

000032bc <RTC_enumReadTime>:

ERROR_STATE RTC_enumReadTime(RTC_Time * Copy_struct_ptr_Time)
{
    32bc:	df 93       	push	r29
    32be:	cf 93       	push	r28
    32c0:	00 d0       	rcall	.+0      	; 0x32c2 <RTC_enumReadTime+0x6>
    32c2:	00 d0       	rcall	.+0      	; 0x32c4 <RTC_enumReadTime+0x8>
    32c4:	00 d0       	rcall	.+0      	; 0x32c6 <RTC_enumReadTime+0xa>
    32c6:	cd b7       	in	r28, 0x3d	; 61
    32c8:	de b7       	in	r29, 0x3e	; 62
    32ca:	9e 83       	std	Y+6, r25	; 0x06
    32cc:	8d 83       	std	Y+5, r24	; 0x05
	ERROR_STATE Local_enumErrorState = NOK;
    32ce:	19 82       	std	Y+1, r1	; 0x01
	u8 Local_u8Array[3] = {0};
    32d0:	83 e0       	ldi	r24, 0x03	; 3
    32d2:	fe 01       	movw	r30, r28
    32d4:	32 96       	adiw	r30, 0x02	; 2
    32d6:	df 01       	movw	r26, r30
    32d8:	98 2f       	mov	r25, r24
    32da:	1d 92       	st	X+, r1
    32dc:	9a 95       	dec	r25
    32de:	e9 f7       	brne	.-6      	; 0x32da <RTC_enumReadTime+0x1e>
	Local_enumErrorState = I2C_MASTER_enumSendStart();
    32e0:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_MASTER_enumSendStart>
    32e4:	89 83       	std	Y+1, r24	; 0x01
	if(Local_enumErrorState == OK)
    32e6:	89 81       	ldd	r24, Y+1	; 0x01
    32e8:	81 30       	cpi	r24, 0x01	; 1
    32ea:	b9 f5       	brne	.+110    	; 0x335a <RTC_enumReadTime+0x9e>
	{
		Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithWrite(RTC_SLAVE_ADDRESS);
    32ec:	88 e6       	ldi	r24, 0x68	; 104
    32ee:	0e 94 b0 11 	call	0x2360	; 0x2360 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    32f2:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enumErrorState== OK )
    32f4:	89 81       	ldd	r24, Y+1	; 0x01
    32f6:	81 30       	cpi	r24, 0x01	; 1
    32f8:	81 f5       	brne	.+96     	; 0x335a <RTC_enumReadTime+0x9e>
		{
			Local_enumErrorState = I2C_MASTER_enumSendByte(RTC_BASE_TIME_ADDRESS);
    32fa:	80 e0       	ldi	r24, 0x00	; 0
    32fc:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    3300:	89 83       	std	Y+1, r24	; 0x01
			if( Local_enumErrorState == OK )
    3302:	89 81       	ldd	r24, Y+1	; 0x01
    3304:	81 30       	cpi	r24, 0x01	; 1
    3306:	49 f5       	brne	.+82     	; 0x335a <RTC_enumReadTime+0x9e>
			{
				Local_enumErrorState = I2C_MASTER_enumSendRepeatedStart();
    3308:	0e 94 46 11 	call	0x228c	; 0x228c <I2C_MASTER_enumSendRepeatedStart>
    330c:	89 83       	std	Y+1, r24	; 0x01

				if( Local_enumErrorState == OK )
    330e:	89 81       	ldd	r24, Y+1	; 0x01
    3310:	81 30       	cpi	r24, 0x01	; 1
    3312:	19 f5       	brne	.+70     	; 0x335a <RTC_enumReadTime+0x9e>
				{
					Local_enumErrorState = I2C_MASTER_enumSendSlaveAddressWithRead(RTC_SLAVE_ADDRESS);
    3314:	88 e6       	ldi	r24, 0x68	; 104
    3316:	0e 94 7e 11 	call	0x22fc	; 0x22fc <I2C_MASTER_enumSendSlaveAddressWithRead>
    331a:	89 83       	std	Y+1, r24	; 0x01
					if(Local_enumErrorState == OK)
    331c:	89 81       	ldd	r24, Y+1	; 0x01
    331e:	81 30       	cpi	r24, 0x01	; 1
    3320:	e1 f4       	brne	.+56     	; 0x335a <RTC_enumReadTime+0x9e>
					{
						Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[0]);
    3322:	ce 01       	movw	r24, r28
    3324:	02 96       	adiw	r24, 0x02	; 2
    3326:	0e 94 38 12 	call	0x2470	; 0x2470 <I2C_MASTER_enumReadByte_With_ACK>
    332a:	89 83       	std	Y+1, r24	; 0x01
						if( Local_enumErrorState == OK )
    332c:	89 81       	ldd	r24, Y+1	; 0x01
    332e:	81 30       	cpi	r24, 0x01	; 1
    3330:	a1 f4       	brne	.+40     	; 0x335a <RTC_enumReadTime+0x9e>
						{
							Local_enumErrorState = I2C_MASTER_enumReadByte_With_ACK(&Local_u8Array[1]);
    3332:	ce 01       	movw	r24, r28
    3334:	02 96       	adiw	r24, 0x02	; 2
    3336:	01 96       	adiw	r24, 0x01	; 1
    3338:	0e 94 38 12 	call	0x2470	; 0x2470 <I2C_MASTER_enumReadByte_With_ACK>
    333c:	89 83       	std	Y+1, r24	; 0x01
							if(Local_enumErrorState == OK)
    333e:	89 81       	ldd	r24, Y+1	; 0x01
    3340:	81 30       	cpi	r24, 0x01	; 1
    3342:	59 f4       	brne	.+22     	; 0x335a <RTC_enumReadTime+0x9e>
							{
								Local_enumErrorState = I2C_MASTER_enumReadByte_With_NACK(&Local_u8Array[2]);
    3344:	ce 01       	movw	r24, r28
    3346:	02 96       	adiw	r24, 0x02	; 2
    3348:	02 96       	adiw	r24, 0x02	; 2
    334a:	0e 94 06 12 	call	0x240c	; 0x240c <I2C_MASTER_enumReadByte_With_NACK>
    334e:	89 83       	std	Y+1, r24	; 0x01
								if(Local_enumErrorState == OK)
    3350:	89 81       	ldd	r24, Y+1	; 0x01
    3352:	81 30       	cpi	r24, 0x01	; 1
    3354:	11 f4       	brne	.+4      	; 0x335a <RTC_enumReadTime+0x9e>
								{
									I2C_MASTER_voidSendSTOP();
    3356:	0e 94 6d 11 	call	0x22da	; 0x22da <I2C_MASTER_voidSendSTOP>
				}
			}
		}
	}

	RTC_ProcessTime( Copy_struct_ptr_Time , Local_u8Array );
    335a:	8d 81       	ldd	r24, Y+5	; 0x05
    335c:	9e 81       	ldd	r25, Y+6	; 0x06
    335e:	9e 01       	movw	r18, r28
    3360:	2e 5f       	subi	r18, 0xFE	; 254
    3362:	3f 4f       	sbci	r19, 0xFF	; 255
    3364:	b9 01       	movw	r22, r18
    3366:	0e 94 cf 19 	call	0x339e	; 0x339e <RTC_ProcessTime>
	return Local_enumErrorState;
    336a:	89 81       	ldd	r24, Y+1	; 0x01
}
    336c:	26 96       	adiw	r28, 0x06	; 6
    336e:	0f b6       	in	r0, 0x3f	; 63
    3370:	f8 94       	cli
    3372:	de bf       	out	0x3e, r29	; 62
    3374:	0f be       	out	0x3f, r0	; 63
    3376:	cd bf       	out	0x3d, r28	; 61
    3378:	cf 91       	pop	r28
    337a:	df 91       	pop	r29
    337c:	08 95       	ret

0000337e <RTC_enumReadCalendar>:
ERROR_STATE RTC_enumReadCalendar(RTC_Date * Copy_struct_ptr_Date)
{
    337e:	df 93       	push	r29
    3380:	cf 93       	push	r28
    3382:	00 d0       	rcall	.+0      	; 0x3384 <RTC_enumReadCalendar+0x6>
    3384:	0f 92       	push	r0
    3386:	cd b7       	in	r28, 0x3d	; 61
    3388:	de b7       	in	r29, 0x3e	; 62
    338a:	9b 83       	std	Y+3, r25	; 0x03
    338c:	8a 83       	std	Y+2, r24	; 0x02
	ERROR_STATE Local_enumErrorState = NOK;
    338e:	19 82       	std	Y+1, r1	; 0x01
	//< To be Implemented later
	return Local_enumErrorState;
    3390:	89 81       	ldd	r24, Y+1	; 0x01
}
    3392:	0f 90       	pop	r0
    3394:	0f 90       	pop	r0
    3396:	0f 90       	pop	r0
    3398:	cf 91       	pop	r28
    339a:	df 91       	pop	r29
    339c:	08 95       	ret

0000339e <RTC_ProcessTime>:

static void RTC_ProcessTime(RTC_Time * Copy_struct_ptr_retTime , u8* Copy_ptr_arr_ReadData)
{
    339e:	df 93       	push	r29
    33a0:	cf 93       	push	r28
    33a2:	00 d0       	rcall	.+0      	; 0x33a4 <RTC_ProcessTime+0x6>
    33a4:	00 d0       	rcall	.+0      	; 0x33a6 <RTC_ProcessTime+0x8>
    33a6:	cd b7       	in	r28, 0x3d	; 61
    33a8:	de b7       	in	r29, 0x3e	; 62
    33aa:	9a 83       	std	Y+2, r25	; 0x02
    33ac:	89 83       	std	Y+1, r24	; 0x01
    33ae:	7c 83       	std	Y+4, r23	; 0x04
    33b0:	6b 83       	std	Y+3, r22	; 0x03
	Copy_struct_ptr_retTime->Seconds =(Copy_ptr_arr_ReadData[0] >> 4)* 10 ;
    33b2:	eb 81       	ldd	r30, Y+3	; 0x03
    33b4:	fc 81       	ldd	r31, Y+4	; 0x04
    33b6:	80 81       	ld	r24, Z
    33b8:	82 95       	swap	r24
    33ba:	8f 70       	andi	r24, 0x0F	; 15
    33bc:	88 2f       	mov	r24, r24
    33be:	90 e0       	ldi	r25, 0x00	; 0
    33c0:	9c 01       	movw	r18, r24
    33c2:	22 0f       	add	r18, r18
    33c4:	33 1f       	adc	r19, r19
    33c6:	c9 01       	movw	r24, r18
    33c8:	88 0f       	add	r24, r24
    33ca:	99 1f       	adc	r25, r25
    33cc:	88 0f       	add	r24, r24
    33ce:	99 1f       	adc	r25, r25
    33d0:	82 0f       	add	r24, r18
    33d2:	93 1f       	adc	r25, r19
    33d4:	e9 81       	ldd	r30, Y+1	; 0x01
    33d6:	fa 81       	ldd	r31, Y+2	; 0x02
    33d8:	80 83       	st	Z, r24
	Copy_struct_ptr_retTime->Seconds +=(Copy_ptr_arr_ReadData[0] & 0x0F);
    33da:	e9 81       	ldd	r30, Y+1	; 0x01
    33dc:	fa 81       	ldd	r31, Y+2	; 0x02
    33de:	90 81       	ld	r25, Z
    33e0:	eb 81       	ldd	r30, Y+3	; 0x03
    33e2:	fc 81       	ldd	r31, Y+4	; 0x04
    33e4:	80 81       	ld	r24, Z
    33e6:	8f 70       	andi	r24, 0x0F	; 15
    33e8:	89 0f       	add	r24, r25
    33ea:	e9 81       	ldd	r30, Y+1	; 0x01
    33ec:	fa 81       	ldd	r31, Y+2	; 0x02
    33ee:	80 83       	st	Z, r24
	Copy_struct_ptr_retTime->Minutes =(Copy_ptr_arr_ReadData[1] >> 4)*10;
    33f0:	8b 81       	ldd	r24, Y+3	; 0x03
    33f2:	9c 81       	ldd	r25, Y+4	; 0x04
    33f4:	fc 01       	movw	r30, r24
    33f6:	31 96       	adiw	r30, 0x01	; 1
    33f8:	80 81       	ld	r24, Z
    33fa:	82 95       	swap	r24
    33fc:	8f 70       	andi	r24, 0x0F	; 15
    33fe:	88 2f       	mov	r24, r24
    3400:	90 e0       	ldi	r25, 0x00	; 0
    3402:	9c 01       	movw	r18, r24
    3404:	22 0f       	add	r18, r18
    3406:	33 1f       	adc	r19, r19
    3408:	c9 01       	movw	r24, r18
    340a:	88 0f       	add	r24, r24
    340c:	99 1f       	adc	r25, r25
    340e:	88 0f       	add	r24, r24
    3410:	99 1f       	adc	r25, r25
    3412:	82 0f       	add	r24, r18
    3414:	93 1f       	adc	r25, r19
    3416:	e9 81       	ldd	r30, Y+1	; 0x01
    3418:	fa 81       	ldd	r31, Y+2	; 0x02
    341a:	81 83       	std	Z+1, r24	; 0x01
	Copy_struct_ptr_retTime->Minutes +=(Copy_ptr_arr_ReadData[1] & 0x0F);
    341c:	e9 81       	ldd	r30, Y+1	; 0x01
    341e:	fa 81       	ldd	r31, Y+2	; 0x02
    3420:	21 81       	ldd	r18, Z+1	; 0x01
    3422:	8b 81       	ldd	r24, Y+3	; 0x03
    3424:	9c 81       	ldd	r25, Y+4	; 0x04
    3426:	fc 01       	movw	r30, r24
    3428:	31 96       	adiw	r30, 0x01	; 1
    342a:	80 81       	ld	r24, Z
    342c:	8f 70       	andi	r24, 0x0F	; 15
    342e:	82 0f       	add	r24, r18
    3430:	e9 81       	ldd	r30, Y+1	; 0x01
    3432:	fa 81       	ldd	r31, Y+2	; 0x02
    3434:	81 83       	std	Z+1, r24	; 0x01
	Copy_struct_ptr_retTime->HoursMode = Copy_ptr_arr_ReadData[2] & Hours_24;
    3436:	e9 81       	ldd	r30, Y+1	; 0x01
    3438:	fa 81       	ldd	r31, Y+2	; 0x02
    343a:	14 82       	std	Z+4, r1	; 0x04
	if( Copy_struct_ptr_retTime->HoursMode == Hours_12 )
    343c:	e9 81       	ldd	r30, Y+1	; 0x01
    343e:	fa 81       	ldd	r31, Y+2	; 0x02
    3440:	84 81       	ldd	r24, Z+4	; 0x04
    3442:	80 34       	cpi	r24, 0x40	; 64
    3444:	49 f5       	brne	.+82     	; 0x3498 <RTC_ProcessTime+0xfa>
	{
		Copy_struct_ptr_retTime->AM_PM = Copy_ptr_arr_ReadData[2] & AM ;
    3446:	e9 81       	ldd	r30, Y+1	; 0x01
    3448:	fa 81       	ldd	r31, Y+2	; 0x02
    344a:	13 82       	std	Z+3, r1	; 0x03
		Copy_struct_ptr_retTime->Hours = (Copy_ptr_arr_ReadData[2] >> 4 & 0x01) * 10 ;
    344c:	8b 81       	ldd	r24, Y+3	; 0x03
    344e:	9c 81       	ldd	r25, Y+4	; 0x04
    3450:	fc 01       	movw	r30, r24
    3452:	32 96       	adiw	r30, 0x02	; 2
    3454:	80 81       	ld	r24, Z
    3456:	82 95       	swap	r24
    3458:	8f 70       	andi	r24, 0x0F	; 15
    345a:	88 2f       	mov	r24, r24
    345c:	90 e0       	ldi	r25, 0x00	; 0
    345e:	81 70       	andi	r24, 0x01	; 1
    3460:	90 70       	andi	r25, 0x00	; 0
    3462:	9c 01       	movw	r18, r24
    3464:	22 0f       	add	r18, r18
    3466:	33 1f       	adc	r19, r19
    3468:	c9 01       	movw	r24, r18
    346a:	88 0f       	add	r24, r24
    346c:	99 1f       	adc	r25, r25
    346e:	88 0f       	add	r24, r24
    3470:	99 1f       	adc	r25, r25
    3472:	82 0f       	add	r24, r18
    3474:	93 1f       	adc	r25, r19
    3476:	e9 81       	ldd	r30, Y+1	; 0x01
    3478:	fa 81       	ldd	r31, Y+2	; 0x02
    347a:	82 83       	std	Z+2, r24	; 0x02
		Copy_struct_ptr_retTime->Hours += (Copy_ptr_arr_ReadData[2] & 0x0F);
    347c:	e9 81       	ldd	r30, Y+1	; 0x01
    347e:	fa 81       	ldd	r31, Y+2	; 0x02
    3480:	22 81       	ldd	r18, Z+2	; 0x02
    3482:	8b 81       	ldd	r24, Y+3	; 0x03
    3484:	9c 81       	ldd	r25, Y+4	; 0x04
    3486:	fc 01       	movw	r30, r24
    3488:	32 96       	adiw	r30, 0x02	; 2
    348a:	80 81       	ld	r24, Z
    348c:	8f 70       	andi	r24, 0x0F	; 15
    348e:	82 0f       	add	r24, r18
    3490:	e9 81       	ldd	r30, Y+1	; 0x01
    3492:	fa 81       	ldd	r31, Y+2	; 0x02
    3494:	82 83       	std	Z+2, r24	; 0x02
    3496:	25 c0       	rjmp	.+74     	; 0x34e2 <RTC_ProcessTime+0x144>
	}
	else
	{
		Copy_struct_ptr_retTime->Hours = (Copy_ptr_arr_ReadData[2] >> 4 & 0x03) * 10 ;
    3498:	8b 81       	ldd	r24, Y+3	; 0x03
    349a:	9c 81       	ldd	r25, Y+4	; 0x04
    349c:	fc 01       	movw	r30, r24
    349e:	32 96       	adiw	r30, 0x02	; 2
    34a0:	80 81       	ld	r24, Z
    34a2:	82 95       	swap	r24
    34a4:	8f 70       	andi	r24, 0x0F	; 15
    34a6:	88 2f       	mov	r24, r24
    34a8:	90 e0       	ldi	r25, 0x00	; 0
    34aa:	83 70       	andi	r24, 0x03	; 3
    34ac:	90 70       	andi	r25, 0x00	; 0
    34ae:	9c 01       	movw	r18, r24
    34b0:	22 0f       	add	r18, r18
    34b2:	33 1f       	adc	r19, r19
    34b4:	c9 01       	movw	r24, r18
    34b6:	88 0f       	add	r24, r24
    34b8:	99 1f       	adc	r25, r25
    34ba:	88 0f       	add	r24, r24
    34bc:	99 1f       	adc	r25, r25
    34be:	82 0f       	add	r24, r18
    34c0:	93 1f       	adc	r25, r19
    34c2:	e9 81       	ldd	r30, Y+1	; 0x01
    34c4:	fa 81       	ldd	r31, Y+2	; 0x02
    34c6:	82 83       	std	Z+2, r24	; 0x02
		Copy_struct_ptr_retTime->Hours += (Copy_ptr_arr_ReadData[2] & 0x0F);
    34c8:	e9 81       	ldd	r30, Y+1	; 0x01
    34ca:	fa 81       	ldd	r31, Y+2	; 0x02
    34cc:	22 81       	ldd	r18, Z+2	; 0x02
    34ce:	8b 81       	ldd	r24, Y+3	; 0x03
    34d0:	9c 81       	ldd	r25, Y+4	; 0x04
    34d2:	fc 01       	movw	r30, r24
    34d4:	32 96       	adiw	r30, 0x02	; 2
    34d6:	80 81       	ld	r24, Z
    34d8:	8f 70       	andi	r24, 0x0F	; 15
    34da:	82 0f       	add	r24, r18
    34dc:	e9 81       	ldd	r30, Y+1	; 0x01
    34de:	fa 81       	ldd	r31, Y+2	; 0x02
    34e0:	82 83       	std	Z+2, r24	; 0x02
	}

}
    34e2:	0f 90       	pop	r0
    34e4:	0f 90       	pop	r0
    34e6:	0f 90       	pop	r0
    34e8:	0f 90       	pop	r0
    34ea:	cf 91       	pop	r28
    34ec:	df 91       	pop	r29
    34ee:	08 95       	ret

000034f0 <LDR_SENSOR_voidInit>:
#include"LDR_interface.h"
#include"LDR_private.h"
#include"LDR_config.h"

void LDR_SENSOR_voidInit(u8 Copy_u8ChannelNumber)
{
    34f0:	df 93       	push	r29
    34f2:	cf 93       	push	r28
    34f4:	0f 92       	push	r0
    34f6:	cd b7       	in	r28, 0x3d	; 61
    34f8:	de b7       	in	r29, 0x3e	; 62
    34fa:	89 83       	std	Y+1, r24	; 0x01
	DIO_SetPinDirection(PORTA, Copy_u8ChannelNumber, INPUT);
    34fc:	80 e0       	ldi	r24, 0x00	; 0
    34fe:	69 81       	ldd	r22, Y+1	; 0x01
    3500:	40 e0       	ldi	r20, 0x00	; 0
    3502:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <DIO_SetPinDirection>
}
    3506:	0f 90       	pop	r0
    3508:	cf 91       	pop	r28
    350a:	df 91       	pop	r29
    350c:	08 95       	ret

0000350e <LDR_SNESOR_u8Read>:


u8 LDR_SNESOR_u8Read(u8 Copy_u8ChannelNumber)
{
    350e:	af 92       	push	r10
    3510:	bf 92       	push	r11
    3512:	cf 92       	push	r12
    3514:	df 92       	push	r13
    3516:	ef 92       	push	r14
    3518:	ff 92       	push	r15
    351a:	0f 93       	push	r16
    351c:	1f 93       	push	r17
    351e:	df 93       	push	r29
    3520:	cf 93       	push	r28
    3522:	00 d0       	rcall	.+0      	; 0x3524 <LDR_SNESOR_u8Read+0x16>
    3524:	00 d0       	rcall	.+0      	; 0x3526 <LDR_SNESOR_u8Read+0x18>
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	8c 83       	std	Y+4, r24	; 0x04
	u16 Local_u16ADCValue = 0;
    352c:	1b 82       	std	Y+3, r1	; 0x03
    352e:	1a 82       	std	Y+2, r1	; 0x02
//	f32 Local_f32AnalogVolt= 0;
	u8 Local_u8INT =0;
    3530:	19 82       	std	Y+1, r1	; 0x01
	Local_u16ADCValue = ADC_u16Read(Copy_u8ChannelNumber);
    3532:	8c 81       	ldd	r24, Y+4	; 0x04
    3534:	0e 94 ed 17 	call	0x2fda	; 0x2fda <ADC_u16Read>
    3538:	9b 83       	std	Y+3, r25	; 0x03
    353a:	8a 83       	std	Y+2, r24	; 0x02
//	Local_f32AnalogVolt = (Local_u16ADCValue * VCC)/1024.0;
//	f64 RLDR = ((u64)Known_Res*VCC)/(VCC-Local_f32AnalogVolt);
	Local_u8INT=MAP(Local_u16ADCValue,710,930,100,0);
    353c:	8a 81       	ldd	r24, Y+2	; 0x02
    353e:	9b 81       	ldd	r25, Y+3	; 0x03
    3540:	cc 01       	movw	r24, r24
    3542:	a0 e0       	ldi	r26, 0x00	; 0
    3544:	b0 e0       	ldi	r27, 0x00	; 0
    3546:	bc 01       	movw	r22, r24
    3548:	cd 01       	movw	r24, r26
    354a:	0e 94 9d 0b 	call	0x173a	; 0x173a <__floatunsisf>
    354e:	9b 01       	movw	r18, r22
    3550:	ac 01       	movw	r20, r24
    3552:	00 d0       	rcall	.+0      	; 0x3554 <LDR_SNESOR_u8Read+0x46>
    3554:	00 d0       	rcall	.+0      	; 0x3556 <LDR_SNESOR_u8Read+0x48>
    3556:	ed b7       	in	r30, 0x3d	; 61
    3558:	fe b7       	in	r31, 0x3e	; 62
    355a:	31 96       	adiw	r30, 0x01	; 1
    355c:	80 e0       	ldi	r24, 0x00	; 0
    355e:	90 e0       	ldi	r25, 0x00	; 0
    3560:	a0 e0       	ldi	r26, 0x00	; 0
    3562:	b0 e0       	ldi	r27, 0x00	; 0
    3564:	80 83       	st	Z, r24
    3566:	91 83       	std	Z+1, r25	; 0x01
    3568:	a2 83       	std	Z+2, r26	; 0x02
    356a:	b3 83       	std	Z+3, r27	; 0x03
    356c:	ca 01       	movw	r24, r20
    356e:	b9 01       	movw	r22, r18
    3570:	20 e0       	ldi	r18, 0x00	; 0
    3572:	30 e8       	ldi	r19, 0x80	; 128
    3574:	41 e3       	ldi	r20, 0x31	; 49
    3576:	54 e4       	ldi	r21, 0x44	; 68
    3578:	0f 2e       	mov	r0, r31
    357a:	f0 e0       	ldi	r31, 0x00	; 0
    357c:	ef 2e       	mov	r14, r31
    357e:	f0 e8       	ldi	r31, 0x80	; 128
    3580:	ff 2e       	mov	r15, r31
    3582:	f8 e6       	ldi	r31, 0x68	; 104
    3584:	0f 2f       	mov	r16, r31
    3586:	f4 e4       	ldi	r31, 0x44	; 68
    3588:	1f 2f       	mov	r17, r31
    358a:	f0 2d       	mov	r31, r0
    358c:	0f 2e       	mov	r0, r31
    358e:	f0 e0       	ldi	r31, 0x00	; 0
    3590:	af 2e       	mov	r10, r31
    3592:	f0 e0       	ldi	r31, 0x00	; 0
    3594:	bf 2e       	mov	r11, r31
    3596:	f8 ec       	ldi	r31, 0xC8	; 200
    3598:	cf 2e       	mov	r12, r31
    359a:	f2 e4       	ldi	r31, 0x42	; 66
    359c:	df 2e       	mov	r13, r31
    359e:	f0 2d       	mov	r31, r0
    35a0:	0e 94 ef 1a 	call	0x35de	; 0x35de <MAP>
    35a4:	0f 90       	pop	r0
    35a6:	0f 90       	pop	r0
    35a8:	0f 90       	pop	r0
    35aa:	0f 90       	pop	r0
    35ac:	dc 01       	movw	r26, r24
    35ae:	cb 01       	movw	r24, r22
    35b0:	bc 01       	movw	r22, r24
    35b2:	cd 01       	movw	r24, r26
    35b4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    35b8:	dc 01       	movw	r26, r24
    35ba:	cb 01       	movw	r24, r22
    35bc:	89 83       	std	Y+1, r24	; 0x01
	return Local_u8INT;
    35be:	89 81       	ldd	r24, Y+1	; 0x01
}
    35c0:	0f 90       	pop	r0
    35c2:	0f 90       	pop	r0
    35c4:	0f 90       	pop	r0
    35c6:	0f 90       	pop	r0
    35c8:	cf 91       	pop	r28
    35ca:	df 91       	pop	r29
    35cc:	1f 91       	pop	r17
    35ce:	0f 91       	pop	r16
    35d0:	ff 90       	pop	r15
    35d2:	ef 90       	pop	r14
    35d4:	df 90       	pop	r13
    35d6:	cf 90       	pop	r12
    35d8:	bf 90       	pop	r11
    35da:	af 90       	pop	r10
    35dc:	08 95       	ret

000035de <MAP>:

static f32 MAP(f32 Copy_f32Value, f32 Copy_f32INStart, f32 Copy_f32INEnd, f32 Copy_f32OutStart, f32 Copy_f3OutEnd)
{
    35de:	af 92       	push	r10
    35e0:	bf 92       	push	r11
    35e2:	cf 92       	push	r12
    35e4:	df 92       	push	r13
    35e6:	ef 92       	push	r14
    35e8:	ff 92       	push	r15
    35ea:	0f 93       	push	r16
    35ec:	1f 93       	push	r17
    35ee:	df 93       	push	r29
    35f0:	cf 93       	push	r28
    35f2:	cd b7       	in	r28, 0x3d	; 61
    35f4:	de b7       	in	r29, 0x3e	; 62
    35f6:	60 97       	sbiw	r28, 0x10	; 16
    35f8:	0f b6       	in	r0, 0x3f	; 63
    35fa:	f8 94       	cli
    35fc:	de bf       	out	0x3e, r29	; 62
    35fe:	0f be       	out	0x3f, r0	; 63
    3600:	cd bf       	out	0x3d, r28	; 61
    3602:	69 83       	std	Y+1, r22	; 0x01
    3604:	7a 83       	std	Y+2, r23	; 0x02
    3606:	8b 83       	std	Y+3, r24	; 0x03
    3608:	9c 83       	std	Y+4, r25	; 0x04
    360a:	2d 83       	std	Y+5, r18	; 0x05
    360c:	3e 83       	std	Y+6, r19	; 0x06
    360e:	4f 83       	std	Y+7, r20	; 0x07
    3610:	58 87       	std	Y+8, r21	; 0x08
    3612:	e9 86       	std	Y+9, r14	; 0x09
    3614:	fa 86       	std	Y+10, r15	; 0x0a
    3616:	0b 87       	std	Y+11, r16	; 0x0b
    3618:	1c 87       	std	Y+12, r17	; 0x0c
    361a:	ad 86       	std	Y+13, r10	; 0x0d
    361c:	be 86       	std	Y+14, r11	; 0x0e
    361e:	cf 86       	std	Y+15, r12	; 0x0f
    3620:	d8 8a       	std	Y+16, r13	; 0x10
	return ((Copy_f32Value - Copy_f32INStart ) * (Copy_f3OutEnd - Copy_f32OutStart )/(Copy_f32INEnd -Copy_f32INStart ) + Copy_f32OutStart);
    3622:	69 81       	ldd	r22, Y+1	; 0x01
    3624:	7a 81       	ldd	r23, Y+2	; 0x02
    3626:	8b 81       	ldd	r24, Y+3	; 0x03
    3628:	9c 81       	ldd	r25, Y+4	; 0x04
    362a:	2d 81       	ldd	r18, Y+5	; 0x05
    362c:	3e 81       	ldd	r19, Y+6	; 0x06
    362e:	4f 81       	ldd	r20, Y+7	; 0x07
    3630:	58 85       	ldd	r21, Y+8	; 0x08
    3632:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
    3636:	dc 01       	movw	r26, r24
    3638:	cb 01       	movw	r24, r22
    363a:	7c 01       	movw	r14, r24
    363c:	8d 01       	movw	r16, r26
    363e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    3640:	7e 8d       	ldd	r23, Y+30	; 0x1e
    3642:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3644:	98 a1       	ldd	r25, Y+32	; 0x20
    3646:	2d 85       	ldd	r18, Y+13	; 0x0d
    3648:	3e 85       	ldd	r19, Y+14	; 0x0e
    364a:	4f 85       	ldd	r20, Y+15	; 0x0f
    364c:	58 89       	ldd	r21, Y+16	; 0x10
    364e:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
    3652:	dc 01       	movw	r26, r24
    3654:	cb 01       	movw	r24, r22
    3656:	9c 01       	movw	r18, r24
    3658:	ad 01       	movw	r20, r26
    365a:	c8 01       	movw	r24, r16
    365c:	b7 01       	movw	r22, r14
    365e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3662:	dc 01       	movw	r26, r24
    3664:	cb 01       	movw	r24, r22
    3666:	7c 01       	movw	r14, r24
    3668:	8d 01       	movw	r16, r26
    366a:	69 85       	ldd	r22, Y+9	; 0x09
    366c:	7a 85       	ldd	r23, Y+10	; 0x0a
    366e:	8b 85       	ldd	r24, Y+11	; 0x0b
    3670:	9c 85       	ldd	r25, Y+12	; 0x0c
    3672:	2d 81       	ldd	r18, Y+5	; 0x05
    3674:	3e 81       	ldd	r19, Y+6	; 0x06
    3676:	4f 81       	ldd	r20, Y+7	; 0x07
    3678:	58 85       	ldd	r21, Y+8	; 0x08
    367a:	0e 94 b5 08 	call	0x116a	; 0x116a <__subsf3>
    367e:	dc 01       	movw	r26, r24
    3680:	cb 01       	movw	r24, r22
    3682:	9c 01       	movw	r18, r24
    3684:	ad 01       	movw	r20, r26
    3686:	c8 01       	movw	r24, r16
    3688:	b7 01       	movw	r22, r14
    368a:	0e 94 0d 0a 	call	0x141a	; 0x141a <__divsf3>
    368e:	dc 01       	movw	r26, r24
    3690:	cb 01       	movw	r24, r22
    3692:	bc 01       	movw	r22, r24
    3694:	cd 01       	movw	r24, r26
    3696:	2d 85       	ldd	r18, Y+13	; 0x0d
    3698:	3e 85       	ldd	r19, Y+14	; 0x0e
    369a:	4f 85       	ldd	r20, Y+15	; 0x0f
    369c:	58 89       	ldd	r21, Y+16	; 0x10
    369e:	0e 94 e6 08 	call	0x11cc	; 0x11cc <__addsf3>
    36a2:	dc 01       	movw	r26, r24
    36a4:	cb 01       	movw	r24, r22

}
    36a6:	bc 01       	movw	r22, r24
    36a8:	cd 01       	movw	r24, r26
    36aa:	60 96       	adiw	r28, 0x10	; 16
    36ac:	0f b6       	in	r0, 0x3f	; 63
    36ae:	f8 94       	cli
    36b0:	de bf       	out	0x3e, r29	; 62
    36b2:	0f be       	out	0x3f, r0	; 63
    36b4:	cd bf       	out	0x3d, r28	; 61
    36b6:	cf 91       	pop	r28
    36b8:	df 91       	pop	r29
    36ba:	1f 91       	pop	r17
    36bc:	0f 91       	pop	r16
    36be:	ff 90       	pop	r15
    36c0:	ef 90       	pop	r14
    36c2:	df 90       	pop	r13
    36c4:	cf 90       	pop	r12
    36c6:	bf 90       	pop	r11
    36c8:	af 90       	pop	r10
    36ca:	08 95       	ret

000036cc <EEPROM_void_Init>:
#include "EEPROM_interface.h"
#include "EEPROM_config.h"
#include "EEPROM_private.h"

void EEPROM_void_Init(void)
{
    36cc:	df 93       	push	r29
    36ce:	cf 93       	push	r28
    36d0:	cd b7       	in	r28, 0x3d	; 61
    36d2:	de b7       	in	r29, 0x3e	; 62
	I2C_voidInit();
    36d4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <I2C_voidInit>
}
    36d8:	cf 91       	pop	r28
    36da:	df 91       	pop	r29
    36dc:	08 95       	ret

000036de <EEPROM_enumWriteByte>:
ERROR_STATE EEPROM_enumWriteByte(u16 Copy_u16LocationAddress , u8 Copy_u8Data)
{
    36de:	df 93       	push	r29
    36e0:	cf 93       	push	r28
    36e2:	00 d0       	rcall	.+0      	; 0x36e4 <EEPROM_enumWriteByte+0x6>
    36e4:	00 d0       	rcall	.+0      	; 0x36e6 <EEPROM_enumWriteByte+0x8>
    36e6:	cd b7       	in	r28, 0x3d	; 61
    36e8:	de b7       	in	r29, 0x3e	; 62
    36ea:	9b 83       	std	Y+3, r25	; 0x03
    36ec:	8a 83       	std	Y+2, r24	; 0x02
    36ee:	6c 83       	std	Y+4, r22	; 0x04
	ERROR_STATE Local_enum_errorState = NOK;
    36f0:	19 82       	std	Y+1, r1	; 0x01
	Local_enum_errorState = I2C_MASTER_enumSendStart();
    36f2:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_MASTER_enumSendStart>
    36f6:	89 83       	std	Y+1, r24	; 0x01
	if( Local_enum_errorState == OK )
    36f8:	89 81       	ldd	r24, Y+1	; 0x01
    36fa:	81 30       	cpi	r24, 0x01	; 1
    36fc:	f1 f4       	brne	.+60     	; 0x373a <EEPROM_enumWriteByte+0x5c>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
    36fe:	8a 81       	ldd	r24, Y+2	; 0x02
    3700:	9b 81       	ldd	r25, Y+3	; 0x03
    3702:	89 2f       	mov	r24, r25
    3704:	99 27       	eor	r25, r25
    3706:	83 70       	andi	r24, 0x03	; 3
    3708:	80 65       	ori	r24, 0x50	; 80
    370a:	0e 94 b0 11 	call	0x2360	; 0x2360 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    370e:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enum_errorState == OK)
    3710:	89 81       	ldd	r24, Y+1	; 0x01
    3712:	81 30       	cpi	r24, 0x01	; 1
    3714:	91 f4       	brne	.+36     	; 0x373a <EEPROM_enumWriteByte+0x5c>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
    3716:	8a 81       	ldd	r24, Y+2	; 0x02
    3718:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    371c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enum_errorState == OK)
    371e:	89 81       	ldd	r24, Y+1	; 0x01
    3720:	81 30       	cpi	r24, 0x01	; 1
    3722:	59 f4       	brne	.+22     	; 0x373a <EEPROM_enumWriteByte+0x5c>
			{
				Local_enum_errorState = I2C_MASTER_enumSendByte(Copy_u8Data);
    3724:	8c 81       	ldd	r24, Y+4	; 0x04
    3726:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    372a:	89 83       	std	Y+1, r24	; 0x01
				if(Local_enum_errorState == OK)
    372c:	89 81       	ldd	r24, Y+1	; 0x01
    372e:	81 30       	cpi	r24, 0x01	; 1
    3730:	21 f4       	brne	.+8      	; 0x373a <EEPROM_enumWriteByte+0x5c>
				{
					I2C_MASTER_voidSendSTOP();
    3732:	0e 94 6d 11 	call	0x22da	; 0x22da <I2C_MASTER_voidSendSTOP>
					Local_enum_errorState = OK;
    3736:	81 e0       	ldi	r24, 0x01	; 1
    3738:	89 83       	std	Y+1, r24	; 0x01
				}
			}
		}
	}
	return Local_enum_errorState;
    373a:	89 81       	ldd	r24, Y+1	; 0x01
}
    373c:	0f 90       	pop	r0
    373e:	0f 90       	pop	r0
    3740:	0f 90       	pop	r0
    3742:	0f 90       	pop	r0
    3744:	cf 91       	pop	r28
    3746:	df 91       	pop	r29
    3748:	08 95       	ret

0000374a <EEPROM_enumReadByte>:

ERROR_STATE EEPROM_enumReadByte(u16 Copy_u16LocationAddress , u8*Copy_u8Data)
{
    374a:	df 93       	push	r29
    374c:	cf 93       	push	r28
    374e:	00 d0       	rcall	.+0      	; 0x3750 <EEPROM_enumReadByte+0x6>
    3750:	00 d0       	rcall	.+0      	; 0x3752 <EEPROM_enumReadByte+0x8>
    3752:	0f 92       	push	r0
    3754:	cd b7       	in	r28, 0x3d	; 61
    3756:	de b7       	in	r29, 0x3e	; 62
    3758:	9b 83       	std	Y+3, r25	; 0x03
    375a:	8a 83       	std	Y+2, r24	; 0x02
    375c:	7d 83       	std	Y+5, r23	; 0x05
    375e:	6c 83       	std	Y+4, r22	; 0x04
	ERROR_STATE Local_enum_errorState = NOK;
    3760:	19 82       	std	Y+1, r1	; 0x01
	Local_enum_errorState = I2C_MASTER_enumSendStart();
    3762:	0e 94 1f 11 	call	0x223e	; 0x223e <I2C_MASTER_enumSendStart>
    3766:	89 83       	std	Y+1, r24	; 0x01
	if( Local_enum_errorState == OK )
    3768:	89 81       	ldd	r24, Y+1	; 0x01
    376a:	81 30       	cpi	r24, 0x01	; 1
    376c:	79 f5       	brne	.+94     	; 0x37cc <EEPROM_enumReadByte+0x82>
	{
		Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithWrite( 0x50|((Copy_u16LocationAddress >> 8)&0x03));
    376e:	8a 81       	ldd	r24, Y+2	; 0x02
    3770:	9b 81       	ldd	r25, Y+3	; 0x03
    3772:	89 2f       	mov	r24, r25
    3774:	99 27       	eor	r25, r25
    3776:	83 70       	andi	r24, 0x03	; 3
    3778:	80 65       	ori	r24, 0x50	; 80
    377a:	0e 94 b0 11 	call	0x2360	; 0x2360 <I2C_MASTER_enumSendSlaveAddressWithWrite>
    377e:	89 83       	std	Y+1, r24	; 0x01
		if( Local_enum_errorState == OK)
    3780:	89 81       	ldd	r24, Y+1	; 0x01
    3782:	81 30       	cpi	r24, 0x01	; 1
    3784:	19 f5       	brne	.+70     	; 0x37cc <EEPROM_enumReadByte+0x82>
		{
			Local_enum_errorState = I2C_MASTER_enumSendByte((u8)Copy_u16LocationAddress);
    3786:	8a 81       	ldd	r24, Y+2	; 0x02
    3788:	0e 94 de 11 	call	0x23bc	; 0x23bc <I2C_MASTER_enumSendByte>
    378c:	89 83       	std	Y+1, r24	; 0x01
			if(Local_enum_errorState == OK)
    378e:	89 81       	ldd	r24, Y+1	; 0x01
    3790:	81 30       	cpi	r24, 0x01	; 1
    3792:	e1 f4       	brne	.+56     	; 0x37cc <EEPROM_enumReadByte+0x82>
			{
				Local_enum_errorState = I2C_MASTER_enumSendRepeatedStart();
    3794:	0e 94 46 11 	call	0x228c	; 0x228c <I2C_MASTER_enumSendRepeatedStart>
    3798:	89 83       	std	Y+1, r24	; 0x01
				if(Local_enum_errorState == OK)
    379a:	89 81       	ldd	r24, Y+1	; 0x01
    379c:	81 30       	cpi	r24, 0x01	; 1
    379e:	b1 f4       	brne	.+44     	; 0x37cc <EEPROM_enumReadByte+0x82>
				{
					Local_enum_errorState = I2C_MASTER_enumSendSlaveAddressWithRead(0x50|((Copy_u16LocationAddress >> 8)&0x03));
    37a0:	8a 81       	ldd	r24, Y+2	; 0x02
    37a2:	9b 81       	ldd	r25, Y+3	; 0x03
    37a4:	89 2f       	mov	r24, r25
    37a6:	99 27       	eor	r25, r25
    37a8:	83 70       	andi	r24, 0x03	; 3
    37aa:	80 65       	ori	r24, 0x50	; 80
    37ac:	0e 94 7e 11 	call	0x22fc	; 0x22fc <I2C_MASTER_enumSendSlaveAddressWithRead>
    37b0:	89 83       	std	Y+1, r24	; 0x01
					if( Local_enum_errorState == OK )
    37b2:	89 81       	ldd	r24, Y+1	; 0x01
    37b4:	81 30       	cpi	r24, 0x01	; 1
    37b6:	51 f4       	brne	.+20     	; 0x37cc <EEPROM_enumReadByte+0x82>
					{
						Local_enum_errorState = I2C_MASTER_enumReadByte_With_NACK(Copy_u8Data);
    37b8:	8c 81       	ldd	r24, Y+4	; 0x04
    37ba:	9d 81       	ldd	r25, Y+5	; 0x05
    37bc:	0e 94 06 12 	call	0x240c	; 0x240c <I2C_MASTER_enumReadByte_With_NACK>
    37c0:	89 83       	std	Y+1, r24	; 0x01
						if(Local_enum_errorState == OK)
    37c2:	89 81       	ldd	r24, Y+1	; 0x01
    37c4:	81 30       	cpi	r24, 0x01	; 1
    37c6:	11 f4       	brne	.+4      	; 0x37cc <EEPROM_enumReadByte+0x82>
						{
							I2C_MASTER_voidSendSTOP();
    37c8:	0e 94 6d 11 	call	0x22da	; 0x22da <I2C_MASTER_voidSendSTOP>
					}
				}
			}
		}
	}
	return Local_enum_errorState;
    37cc:	89 81       	ldd	r24, Y+1	; 0x01
}
    37ce:	0f 90       	pop	r0
    37d0:	0f 90       	pop	r0
    37d2:	0f 90       	pop	r0
    37d4:	0f 90       	pop	r0
    37d6:	0f 90       	pop	r0
    37d8:	cf 91       	pop	r28
    37da:	df 91       	pop	r29
    37dc:	08 95       	ret

000037de <EEPROM_voidWriteTime>:
u8 Local_u8EEpromWRRIS_Hours =6;
u8 Local_u8EEpromWRRIS_Min = 15;


void EEPROM_voidWriteTime(u8 Local_u8EEpromWRSET_HOURS,u8 Local_u8EEpromWRSET_MIN,u8 Local_u8EEpromWRRIS_Hours ,u8 Local_u8EEpromWRRIS_Min) // this Will change later*****************
{
    37de:	df 93       	push	r29
    37e0:	cf 93       	push	r28
    37e2:	cd b7       	in	r28, 0x3d	; 61
    37e4:	de b7       	in	r29, 0x3e	; 62
    37e6:	ec 97       	sbiw	r28, 0x3c	; 60
    37e8:	0f b6       	in	r0, 0x3f	; 63
    37ea:	f8 94       	cli
    37ec:	de bf       	out	0x3e, r29	; 62
    37ee:	0f be       	out	0x3f, r0	; 63
    37f0:	cd bf       	out	0x3d, r28	; 61
    37f2:	89 af       	std	Y+57, r24	; 0x39
    37f4:	6a af       	std	Y+58, r22	; 0x3a
    37f6:	4b af       	std	Y+59, r20	; 0x3b
    37f8:	2c af       	std	Y+60, r18	; 0x3c
	EEPROM_enumWriteByte(HOUR_SUNRISE,Local_u8EEpromWRRIS_Hours);
    37fa:	80 e0       	ldi	r24, 0x00	; 0
    37fc:	90 e0       	ldi	r25, 0x00	; 0
    37fe:	6b ad       	ldd	r22, Y+59	; 0x3b
    3800:	0e 94 6f 1b 	call	0x36de	; 0x36de <EEPROM_enumWriteByte>
    3804:	80 e0       	ldi	r24, 0x00	; 0
    3806:	90 e0       	ldi	r25, 0x00	; 0
    3808:	a0 e2       	ldi	r26, 0x20	; 32
    380a:	b1 e4       	ldi	r27, 0x41	; 65
    380c:	8d ab       	std	Y+53, r24	; 0x35
    380e:	9e ab       	std	Y+54, r25	; 0x36
    3810:	af ab       	std	Y+55, r26	; 0x37
    3812:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3814:	6d a9       	ldd	r22, Y+53	; 0x35
    3816:	7e a9       	ldd	r23, Y+54	; 0x36
    3818:	8f a9       	ldd	r24, Y+55	; 0x37
    381a:	98 ad       	ldd	r25, Y+56	; 0x38
    381c:	20 e0       	ldi	r18, 0x00	; 0
    381e:	30 e0       	ldi	r19, 0x00	; 0
    3820:	4a ef       	ldi	r20, 0xFA	; 250
    3822:	54 e4       	ldi	r21, 0x44	; 68
    3824:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3828:	dc 01       	movw	r26, r24
    382a:	cb 01       	movw	r24, r22
    382c:	89 ab       	std	Y+49, r24	; 0x31
    382e:	9a ab       	std	Y+50, r25	; 0x32
    3830:	ab ab       	std	Y+51, r26	; 0x33
    3832:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    3834:	69 a9       	ldd	r22, Y+49	; 0x31
    3836:	7a a9       	ldd	r23, Y+50	; 0x32
    3838:	8b a9       	ldd	r24, Y+51	; 0x33
    383a:	9c a9       	ldd	r25, Y+52	; 0x34
    383c:	20 e0       	ldi	r18, 0x00	; 0
    383e:	30 e0       	ldi	r19, 0x00	; 0
    3840:	40 e8       	ldi	r20, 0x80	; 128
    3842:	5f e3       	ldi	r21, 0x3F	; 63
    3844:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3848:	88 23       	and	r24, r24
    384a:	2c f4       	brge	.+10     	; 0x3856 <EEPROM_voidWriteTime+0x78>
		__ticks = 1;
    384c:	81 e0       	ldi	r24, 0x01	; 1
    384e:	90 e0       	ldi	r25, 0x00	; 0
    3850:	98 ab       	std	Y+48, r25	; 0x30
    3852:	8f a7       	std	Y+47, r24	; 0x2f
    3854:	3f c0       	rjmp	.+126    	; 0x38d4 <EEPROM_voidWriteTime+0xf6>
	else if (__tmp > 65535)
    3856:	69 a9       	ldd	r22, Y+49	; 0x31
    3858:	7a a9       	ldd	r23, Y+50	; 0x32
    385a:	8b a9       	ldd	r24, Y+51	; 0x33
    385c:	9c a9       	ldd	r25, Y+52	; 0x34
    385e:	20 e0       	ldi	r18, 0x00	; 0
    3860:	3f ef       	ldi	r19, 0xFF	; 255
    3862:	4f e7       	ldi	r20, 0x7F	; 127
    3864:	57 e4       	ldi	r21, 0x47	; 71
    3866:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    386a:	18 16       	cp	r1, r24
    386c:	4c f5       	brge	.+82     	; 0x38c0 <EEPROM_voidWriteTime+0xe2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    386e:	6d a9       	ldd	r22, Y+53	; 0x35
    3870:	7e a9       	ldd	r23, Y+54	; 0x36
    3872:	8f a9       	ldd	r24, Y+55	; 0x37
    3874:	98 ad       	ldd	r25, Y+56	; 0x38
    3876:	20 e0       	ldi	r18, 0x00	; 0
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	40 e2       	ldi	r20, 0x20	; 32
    387c:	51 e4       	ldi	r21, 0x41	; 65
    387e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3882:	dc 01       	movw	r26, r24
    3884:	cb 01       	movw	r24, r22
    3886:	bc 01       	movw	r22, r24
    3888:	cd 01       	movw	r24, r26
    388a:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    388e:	dc 01       	movw	r26, r24
    3890:	cb 01       	movw	r24, r22
    3892:	98 ab       	std	Y+48, r25	; 0x30
    3894:	8f a7       	std	Y+47, r24	; 0x2f
    3896:	0f c0       	rjmp	.+30     	; 0x38b6 <EEPROM_voidWriteTime+0xd8>
    3898:	88 ec       	ldi	r24, 0xC8	; 200
    389a:	90 e0       	ldi	r25, 0x00	; 0
    389c:	9e a7       	std	Y+46, r25	; 0x2e
    389e:	8d a7       	std	Y+45, r24	; 0x2d
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    38a0:	8d a5       	ldd	r24, Y+45	; 0x2d
    38a2:	9e a5       	ldd	r25, Y+46	; 0x2e
    38a4:	01 97       	sbiw	r24, 0x01	; 1
    38a6:	f1 f7       	brne	.-4      	; 0x38a4 <EEPROM_voidWriteTime+0xc6>
    38a8:	9e a7       	std	Y+46, r25	; 0x2e
    38aa:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    38ac:	8f a5       	ldd	r24, Y+47	; 0x2f
    38ae:	98 a9       	ldd	r25, Y+48	; 0x30
    38b0:	01 97       	sbiw	r24, 0x01	; 1
    38b2:	98 ab       	std	Y+48, r25	; 0x30
    38b4:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    38b6:	8f a5       	ldd	r24, Y+47	; 0x2f
    38b8:	98 a9       	ldd	r25, Y+48	; 0x30
    38ba:	00 97       	sbiw	r24, 0x00	; 0
    38bc:	69 f7       	brne	.-38     	; 0x3898 <EEPROM_voidWriteTime+0xba>
    38be:	14 c0       	rjmp	.+40     	; 0x38e8 <EEPROM_voidWriteTime+0x10a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    38c0:	69 a9       	ldd	r22, Y+49	; 0x31
    38c2:	7a a9       	ldd	r23, Y+50	; 0x32
    38c4:	8b a9       	ldd	r24, Y+51	; 0x33
    38c6:	9c a9       	ldd	r25, Y+52	; 0x34
    38c8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    38cc:	dc 01       	movw	r26, r24
    38ce:	cb 01       	movw	r24, r22
    38d0:	98 ab       	std	Y+48, r25	; 0x30
    38d2:	8f a7       	std	Y+47, r24	; 0x2f
    38d4:	8f a5       	ldd	r24, Y+47	; 0x2f
    38d6:	98 a9       	ldd	r25, Y+48	; 0x30
    38d8:	9c a7       	std	Y+44, r25	; 0x2c
    38da:	8b a7       	std	Y+43, r24	; 0x2b
    38dc:	8b a5       	ldd	r24, Y+43	; 0x2b
    38de:	9c a5       	ldd	r25, Y+44	; 0x2c
    38e0:	01 97       	sbiw	r24, 0x01	; 1
    38e2:	f1 f7       	brne	.-4      	; 0x38e0 <EEPROM_voidWriteTime+0x102>
    38e4:	9c a7       	std	Y+44, r25	; 0x2c
    38e6:	8b a7       	std	Y+43, r24	; 0x2b
	_delay_ms(10);
	EEPROM_enumWriteByte(MINUTE_SUNRISE,Local_u8EEpromWRRIS_Min);
    38e8:	81 e0       	ldi	r24, 0x01	; 1
    38ea:	90 e0       	ldi	r25, 0x00	; 0
    38ec:	6c ad       	ldd	r22, Y+60	; 0x3c
    38ee:	0e 94 6f 1b 	call	0x36de	; 0x36de <EEPROM_enumWriteByte>
    38f2:	80 e0       	ldi	r24, 0x00	; 0
    38f4:	90 e0       	ldi	r25, 0x00	; 0
    38f6:	a0 e2       	ldi	r26, 0x20	; 32
    38f8:	b1 e4       	ldi	r27, 0x41	; 65
    38fa:	8f a3       	std	Y+39, r24	; 0x27
    38fc:	98 a7       	std	Y+40, r25	; 0x28
    38fe:	a9 a7       	std	Y+41, r26	; 0x29
    3900:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3902:	6f a1       	ldd	r22, Y+39	; 0x27
    3904:	78 a5       	ldd	r23, Y+40	; 0x28
    3906:	89 a5       	ldd	r24, Y+41	; 0x29
    3908:	9a a5       	ldd	r25, Y+42	; 0x2a
    390a:	20 e0       	ldi	r18, 0x00	; 0
    390c:	30 e0       	ldi	r19, 0x00	; 0
    390e:	4a ef       	ldi	r20, 0xFA	; 250
    3910:	54 e4       	ldi	r21, 0x44	; 68
    3912:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3916:	dc 01       	movw	r26, r24
    3918:	cb 01       	movw	r24, r22
    391a:	8b a3       	std	Y+35, r24	; 0x23
    391c:	9c a3       	std	Y+36, r25	; 0x24
    391e:	ad a3       	std	Y+37, r26	; 0x25
    3920:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    3922:	6b a1       	ldd	r22, Y+35	; 0x23
    3924:	7c a1       	ldd	r23, Y+36	; 0x24
    3926:	8d a1       	ldd	r24, Y+37	; 0x25
    3928:	9e a1       	ldd	r25, Y+38	; 0x26
    392a:	20 e0       	ldi	r18, 0x00	; 0
    392c:	30 e0       	ldi	r19, 0x00	; 0
    392e:	40 e8       	ldi	r20, 0x80	; 128
    3930:	5f e3       	ldi	r21, 0x3F	; 63
    3932:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3936:	88 23       	and	r24, r24
    3938:	2c f4       	brge	.+10     	; 0x3944 <EEPROM_voidWriteTime+0x166>
		__ticks = 1;
    393a:	81 e0       	ldi	r24, 0x01	; 1
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	9a a3       	std	Y+34, r25	; 0x22
    3940:	89 a3       	std	Y+33, r24	; 0x21
    3942:	3f c0       	rjmp	.+126    	; 0x39c2 <EEPROM_voidWriteTime+0x1e4>
	else if (__tmp > 65535)
    3944:	6b a1       	ldd	r22, Y+35	; 0x23
    3946:	7c a1       	ldd	r23, Y+36	; 0x24
    3948:	8d a1       	ldd	r24, Y+37	; 0x25
    394a:	9e a1       	ldd	r25, Y+38	; 0x26
    394c:	20 e0       	ldi	r18, 0x00	; 0
    394e:	3f ef       	ldi	r19, 0xFF	; 255
    3950:	4f e7       	ldi	r20, 0x7F	; 127
    3952:	57 e4       	ldi	r21, 0x47	; 71
    3954:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    3958:	18 16       	cp	r1, r24
    395a:	4c f5       	brge	.+82     	; 0x39ae <EEPROM_voidWriteTime+0x1d0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    395c:	6f a1       	ldd	r22, Y+39	; 0x27
    395e:	78 a5       	ldd	r23, Y+40	; 0x28
    3960:	89 a5       	ldd	r24, Y+41	; 0x29
    3962:	9a a5       	ldd	r25, Y+42	; 0x2a
    3964:	20 e0       	ldi	r18, 0x00	; 0
    3966:	30 e0       	ldi	r19, 0x00	; 0
    3968:	40 e2       	ldi	r20, 0x20	; 32
    396a:	51 e4       	ldi	r21, 0x41	; 65
    396c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3970:	dc 01       	movw	r26, r24
    3972:	cb 01       	movw	r24, r22
    3974:	bc 01       	movw	r22, r24
    3976:	cd 01       	movw	r24, r26
    3978:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    397c:	dc 01       	movw	r26, r24
    397e:	cb 01       	movw	r24, r22
    3980:	9a a3       	std	Y+34, r25	; 0x22
    3982:	89 a3       	std	Y+33, r24	; 0x21
    3984:	0f c0       	rjmp	.+30     	; 0x39a4 <EEPROM_voidWriteTime+0x1c6>
    3986:	88 ec       	ldi	r24, 0xC8	; 200
    3988:	90 e0       	ldi	r25, 0x00	; 0
    398a:	98 a3       	std	Y+32, r25	; 0x20
    398c:	8f 8f       	std	Y+31, r24	; 0x1f
    398e:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3990:	98 a1       	ldd	r25, Y+32	; 0x20
    3992:	01 97       	sbiw	r24, 0x01	; 1
    3994:	f1 f7       	brne	.-4      	; 0x3992 <EEPROM_voidWriteTime+0x1b4>
    3996:	98 a3       	std	Y+32, r25	; 0x20
    3998:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    399a:	89 a1       	ldd	r24, Y+33	; 0x21
    399c:	9a a1       	ldd	r25, Y+34	; 0x22
    399e:	01 97       	sbiw	r24, 0x01	; 1
    39a0:	9a a3       	std	Y+34, r25	; 0x22
    39a2:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    39a4:	89 a1       	ldd	r24, Y+33	; 0x21
    39a6:	9a a1       	ldd	r25, Y+34	; 0x22
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	69 f7       	brne	.-38     	; 0x3986 <EEPROM_voidWriteTime+0x1a8>
    39ac:	14 c0       	rjmp	.+40     	; 0x39d6 <EEPROM_voidWriteTime+0x1f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    39ae:	6b a1       	ldd	r22, Y+35	; 0x23
    39b0:	7c a1       	ldd	r23, Y+36	; 0x24
    39b2:	8d a1       	ldd	r24, Y+37	; 0x25
    39b4:	9e a1       	ldd	r25, Y+38	; 0x26
    39b6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    39ba:	dc 01       	movw	r26, r24
    39bc:	cb 01       	movw	r24, r22
    39be:	9a a3       	std	Y+34, r25	; 0x22
    39c0:	89 a3       	std	Y+33, r24	; 0x21
    39c2:	89 a1       	ldd	r24, Y+33	; 0x21
    39c4:	9a a1       	ldd	r25, Y+34	; 0x22
    39c6:	9e 8f       	std	Y+30, r25	; 0x1e
    39c8:	8d 8f       	std	Y+29, r24	; 0x1d
    39ca:	8d 8d       	ldd	r24, Y+29	; 0x1d
    39cc:	9e 8d       	ldd	r25, Y+30	; 0x1e
    39ce:	01 97       	sbiw	r24, 0x01	; 1
    39d0:	f1 f7       	brne	.-4      	; 0x39ce <EEPROM_voidWriteTime+0x1f0>
    39d2:	9e 8f       	std	Y+30, r25	; 0x1e
    39d4:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(10);
	EEPROM_enumWriteByte(HOUR_SUNSET,Local_u8EEpromWRSET_HOURS);
    39d6:	82 e0       	ldi	r24, 0x02	; 2
    39d8:	90 e0       	ldi	r25, 0x00	; 0
    39da:	69 ad       	ldd	r22, Y+57	; 0x39
    39dc:	0e 94 6f 1b 	call	0x36de	; 0x36de <EEPROM_enumWriteByte>
    39e0:	80 e0       	ldi	r24, 0x00	; 0
    39e2:	90 e0       	ldi	r25, 0x00	; 0
    39e4:	a0 e2       	ldi	r26, 0x20	; 32
    39e6:	b1 e4       	ldi	r27, 0x41	; 65
    39e8:	89 8f       	std	Y+25, r24	; 0x19
    39ea:	9a 8f       	std	Y+26, r25	; 0x1a
    39ec:	ab 8f       	std	Y+27, r26	; 0x1b
    39ee:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    39f0:	69 8d       	ldd	r22, Y+25	; 0x19
    39f2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    39f4:	8b 8d       	ldd	r24, Y+27	; 0x1b
    39f6:	9c 8d       	ldd	r25, Y+28	; 0x1c
    39f8:	20 e0       	ldi	r18, 0x00	; 0
    39fa:	30 e0       	ldi	r19, 0x00	; 0
    39fc:	4a ef       	ldi	r20, 0xFA	; 250
    39fe:	54 e4       	ldi	r21, 0x44	; 68
    3a00:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3a04:	dc 01       	movw	r26, r24
    3a06:	cb 01       	movw	r24, r22
    3a08:	8d 8b       	std	Y+21, r24	; 0x15
    3a0a:	9e 8b       	std	Y+22, r25	; 0x16
    3a0c:	af 8b       	std	Y+23, r26	; 0x17
    3a0e:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3a10:	6d 89       	ldd	r22, Y+21	; 0x15
    3a12:	7e 89       	ldd	r23, Y+22	; 0x16
    3a14:	8f 89       	ldd	r24, Y+23	; 0x17
    3a16:	98 8d       	ldd	r25, Y+24	; 0x18
    3a18:	20 e0       	ldi	r18, 0x00	; 0
    3a1a:	30 e0       	ldi	r19, 0x00	; 0
    3a1c:	40 e8       	ldi	r20, 0x80	; 128
    3a1e:	5f e3       	ldi	r21, 0x3F	; 63
    3a20:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3a24:	88 23       	and	r24, r24
    3a26:	2c f4       	brge	.+10     	; 0x3a32 <EEPROM_voidWriteTime+0x254>
		__ticks = 1;
    3a28:	81 e0       	ldi	r24, 0x01	; 1
    3a2a:	90 e0       	ldi	r25, 0x00	; 0
    3a2c:	9c 8b       	std	Y+20, r25	; 0x14
    3a2e:	8b 8b       	std	Y+19, r24	; 0x13
    3a30:	3f c0       	rjmp	.+126    	; 0x3ab0 <EEPROM_voidWriteTime+0x2d2>
	else if (__tmp > 65535)
    3a32:	6d 89       	ldd	r22, Y+21	; 0x15
    3a34:	7e 89       	ldd	r23, Y+22	; 0x16
    3a36:	8f 89       	ldd	r24, Y+23	; 0x17
    3a38:	98 8d       	ldd	r25, Y+24	; 0x18
    3a3a:	20 e0       	ldi	r18, 0x00	; 0
    3a3c:	3f ef       	ldi	r19, 0xFF	; 255
    3a3e:	4f e7       	ldi	r20, 0x7F	; 127
    3a40:	57 e4       	ldi	r21, 0x47	; 71
    3a42:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    3a46:	18 16       	cp	r1, r24
    3a48:	4c f5       	brge	.+82     	; 0x3a9c <EEPROM_voidWriteTime+0x2be>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3a4a:	69 8d       	ldd	r22, Y+25	; 0x19
    3a4c:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3a4e:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3a50:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3a52:	20 e0       	ldi	r18, 0x00	; 0
    3a54:	30 e0       	ldi	r19, 0x00	; 0
    3a56:	40 e2       	ldi	r20, 0x20	; 32
    3a58:	51 e4       	ldi	r21, 0x41	; 65
    3a5a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3a5e:	dc 01       	movw	r26, r24
    3a60:	cb 01       	movw	r24, r22
    3a62:	bc 01       	movw	r22, r24
    3a64:	cd 01       	movw	r24, r26
    3a66:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3a6a:	dc 01       	movw	r26, r24
    3a6c:	cb 01       	movw	r24, r22
    3a6e:	9c 8b       	std	Y+20, r25	; 0x14
    3a70:	8b 8b       	std	Y+19, r24	; 0x13
    3a72:	0f c0       	rjmp	.+30     	; 0x3a92 <EEPROM_voidWriteTime+0x2b4>
    3a74:	88 ec       	ldi	r24, 0xC8	; 200
    3a76:	90 e0       	ldi	r25, 0x00	; 0
    3a78:	9a 8b       	std	Y+18, r25	; 0x12
    3a7a:	89 8b       	std	Y+17, r24	; 0x11
    3a7c:	89 89       	ldd	r24, Y+17	; 0x11
    3a7e:	9a 89       	ldd	r25, Y+18	; 0x12
    3a80:	01 97       	sbiw	r24, 0x01	; 1
    3a82:	f1 f7       	brne	.-4      	; 0x3a80 <EEPROM_voidWriteTime+0x2a2>
    3a84:	9a 8b       	std	Y+18, r25	; 0x12
    3a86:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a88:	8b 89       	ldd	r24, Y+19	; 0x13
    3a8a:	9c 89       	ldd	r25, Y+20	; 0x14
    3a8c:	01 97       	sbiw	r24, 0x01	; 1
    3a8e:	9c 8b       	std	Y+20, r25	; 0x14
    3a90:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a92:	8b 89       	ldd	r24, Y+19	; 0x13
    3a94:	9c 89       	ldd	r25, Y+20	; 0x14
    3a96:	00 97       	sbiw	r24, 0x00	; 0
    3a98:	69 f7       	brne	.-38     	; 0x3a74 <EEPROM_voidWriteTime+0x296>
    3a9a:	14 c0       	rjmp	.+40     	; 0x3ac4 <EEPROM_voidWriteTime+0x2e6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a9c:	6d 89       	ldd	r22, Y+21	; 0x15
    3a9e:	7e 89       	ldd	r23, Y+22	; 0x16
    3aa0:	8f 89       	ldd	r24, Y+23	; 0x17
    3aa2:	98 8d       	ldd	r25, Y+24	; 0x18
    3aa4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3aa8:	dc 01       	movw	r26, r24
    3aaa:	cb 01       	movw	r24, r22
    3aac:	9c 8b       	std	Y+20, r25	; 0x14
    3aae:	8b 8b       	std	Y+19, r24	; 0x13
    3ab0:	8b 89       	ldd	r24, Y+19	; 0x13
    3ab2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ab4:	98 8b       	std	Y+16, r25	; 0x10
    3ab6:	8f 87       	std	Y+15, r24	; 0x0f
    3ab8:	8f 85       	ldd	r24, Y+15	; 0x0f
    3aba:	98 89       	ldd	r25, Y+16	; 0x10
    3abc:	01 97       	sbiw	r24, 0x01	; 1
    3abe:	f1 f7       	brne	.-4      	; 0x3abc <EEPROM_voidWriteTime+0x2de>
    3ac0:	98 8b       	std	Y+16, r25	; 0x10
    3ac2:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(10);
	EEPROM_enumWriteByte(MINUTE_SUNSET,Local_u8EEpromWRSET_MIN);
    3ac4:	83 e0       	ldi	r24, 0x03	; 3
    3ac6:	90 e0       	ldi	r25, 0x00	; 0
    3ac8:	6a ad       	ldd	r22, Y+58	; 0x3a
    3aca:	0e 94 6f 1b 	call	0x36de	; 0x36de <EEPROM_enumWriteByte>
    3ace:	80 e0       	ldi	r24, 0x00	; 0
    3ad0:	90 e0       	ldi	r25, 0x00	; 0
    3ad2:	a0 e2       	ldi	r26, 0x20	; 32
    3ad4:	b1 e4       	ldi	r27, 0x41	; 65
    3ad6:	8b 87       	std	Y+11, r24	; 0x0b
    3ad8:	9c 87       	std	Y+12, r25	; 0x0c
    3ada:	ad 87       	std	Y+13, r26	; 0x0d
    3adc:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3ade:	6b 85       	ldd	r22, Y+11	; 0x0b
    3ae0:	7c 85       	ldd	r23, Y+12	; 0x0c
    3ae2:	8d 85       	ldd	r24, Y+13	; 0x0d
    3ae4:	9e 85       	ldd	r25, Y+14	; 0x0e
    3ae6:	20 e0       	ldi	r18, 0x00	; 0
    3ae8:	30 e0       	ldi	r19, 0x00	; 0
    3aea:	4a ef       	ldi	r20, 0xFA	; 250
    3aec:	54 e4       	ldi	r21, 0x44	; 68
    3aee:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3af2:	dc 01       	movw	r26, r24
    3af4:	cb 01       	movw	r24, r22
    3af6:	8f 83       	std	Y+7, r24	; 0x07
    3af8:	98 87       	std	Y+8, r25	; 0x08
    3afa:	a9 87       	std	Y+9, r26	; 0x09
    3afc:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3afe:	6f 81       	ldd	r22, Y+7	; 0x07
    3b00:	78 85       	ldd	r23, Y+8	; 0x08
    3b02:	89 85       	ldd	r24, Y+9	; 0x09
    3b04:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b06:	20 e0       	ldi	r18, 0x00	; 0
    3b08:	30 e0       	ldi	r19, 0x00	; 0
    3b0a:	40 e8       	ldi	r20, 0x80	; 128
    3b0c:	5f e3       	ldi	r21, 0x3F	; 63
    3b0e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3b12:	88 23       	and	r24, r24
    3b14:	2c f4       	brge	.+10     	; 0x3b20 <EEPROM_voidWriteTime+0x342>
		__ticks = 1;
    3b16:	81 e0       	ldi	r24, 0x01	; 1
    3b18:	90 e0       	ldi	r25, 0x00	; 0
    3b1a:	9e 83       	std	Y+6, r25	; 0x06
    3b1c:	8d 83       	std	Y+5, r24	; 0x05
    3b1e:	3f c0       	rjmp	.+126    	; 0x3b9e <EEPROM_voidWriteTime+0x3c0>
	else if (__tmp > 65535)
    3b20:	6f 81       	ldd	r22, Y+7	; 0x07
    3b22:	78 85       	ldd	r23, Y+8	; 0x08
    3b24:	89 85       	ldd	r24, Y+9	; 0x09
    3b26:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b28:	20 e0       	ldi	r18, 0x00	; 0
    3b2a:	3f ef       	ldi	r19, 0xFF	; 255
    3b2c:	4f e7       	ldi	r20, 0x7F	; 127
    3b2e:	57 e4       	ldi	r21, 0x47	; 71
    3b30:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    3b34:	18 16       	cp	r1, r24
    3b36:	4c f5       	brge	.+82     	; 0x3b8a <EEPROM_voidWriteTime+0x3ac>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3b38:	6b 85       	ldd	r22, Y+11	; 0x0b
    3b3a:	7c 85       	ldd	r23, Y+12	; 0x0c
    3b3c:	8d 85       	ldd	r24, Y+13	; 0x0d
    3b3e:	9e 85       	ldd	r25, Y+14	; 0x0e
    3b40:	20 e0       	ldi	r18, 0x00	; 0
    3b42:	30 e0       	ldi	r19, 0x00	; 0
    3b44:	40 e2       	ldi	r20, 0x20	; 32
    3b46:	51 e4       	ldi	r21, 0x41	; 65
    3b48:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3b4c:	dc 01       	movw	r26, r24
    3b4e:	cb 01       	movw	r24, r22
    3b50:	bc 01       	movw	r22, r24
    3b52:	cd 01       	movw	r24, r26
    3b54:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b58:	dc 01       	movw	r26, r24
    3b5a:	cb 01       	movw	r24, r22
    3b5c:	9e 83       	std	Y+6, r25	; 0x06
    3b5e:	8d 83       	std	Y+5, r24	; 0x05
    3b60:	0f c0       	rjmp	.+30     	; 0x3b80 <EEPROM_voidWriteTime+0x3a2>
    3b62:	88 ec       	ldi	r24, 0xC8	; 200
    3b64:	90 e0       	ldi	r25, 0x00	; 0
    3b66:	9c 83       	std	Y+4, r25	; 0x04
    3b68:	8b 83       	std	Y+3, r24	; 0x03
    3b6a:	8b 81       	ldd	r24, Y+3	; 0x03
    3b6c:	9c 81       	ldd	r25, Y+4	; 0x04
    3b6e:	01 97       	sbiw	r24, 0x01	; 1
    3b70:	f1 f7       	brne	.-4      	; 0x3b6e <EEPROM_voidWriteTime+0x390>
    3b72:	9c 83       	std	Y+4, r25	; 0x04
    3b74:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3b76:	8d 81       	ldd	r24, Y+5	; 0x05
    3b78:	9e 81       	ldd	r25, Y+6	; 0x06
    3b7a:	01 97       	sbiw	r24, 0x01	; 1
    3b7c:	9e 83       	std	Y+6, r25	; 0x06
    3b7e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3b80:	8d 81       	ldd	r24, Y+5	; 0x05
    3b82:	9e 81       	ldd	r25, Y+6	; 0x06
    3b84:	00 97       	sbiw	r24, 0x00	; 0
    3b86:	69 f7       	brne	.-38     	; 0x3b62 <EEPROM_voidWriteTime+0x384>
    3b88:	14 c0       	rjmp	.+40     	; 0x3bb2 <EEPROM_voidWriteTime+0x3d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3b8a:	6f 81       	ldd	r22, Y+7	; 0x07
    3b8c:	78 85       	ldd	r23, Y+8	; 0x08
    3b8e:	89 85       	ldd	r24, Y+9	; 0x09
    3b90:	9a 85       	ldd	r25, Y+10	; 0x0a
    3b92:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3b96:	dc 01       	movw	r26, r24
    3b98:	cb 01       	movw	r24, r22
    3b9a:	9e 83       	std	Y+6, r25	; 0x06
    3b9c:	8d 83       	std	Y+5, r24	; 0x05
    3b9e:	8d 81       	ldd	r24, Y+5	; 0x05
    3ba0:	9e 81       	ldd	r25, Y+6	; 0x06
    3ba2:	9a 83       	std	Y+2, r25	; 0x02
    3ba4:	89 83       	std	Y+1, r24	; 0x01
    3ba6:	89 81       	ldd	r24, Y+1	; 0x01
    3ba8:	9a 81       	ldd	r25, Y+2	; 0x02
    3baa:	01 97       	sbiw	r24, 0x01	; 1
    3bac:	f1 f7       	brne	.-4      	; 0x3baa <EEPROM_voidWriteTime+0x3cc>
    3bae:	9a 83       	std	Y+2, r25	; 0x02
    3bb0:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(10);
}
    3bb2:	ec 96       	adiw	r28, 0x3c	; 60
    3bb4:	0f b6       	in	r0, 0x3f	; 63
    3bb6:	f8 94       	cli
    3bb8:	de bf       	out	0x3e, r29	; 62
    3bba:	0f be       	out	0x3f, r0	; 63
    3bbc:	cd bf       	out	0x3d, r28	; 61
    3bbe:	cf 91       	pop	r28
    3bc0:	df 91       	pop	r29
    3bc2:	08 95       	ret

00003bc4 <EEPROM_ReadTime>:

void EEPROM_ReadTime(void)
{
    3bc4:	df 93       	push	r29
    3bc6:	cf 93       	push	r28
    3bc8:	cd b7       	in	r28, 0x3d	; 61
    3bca:	de b7       	in	r29, 0x3e	; 62
	EEPROM_enumReadByte(HOUR_SUNSET,&Local_u8EEpromSET_HOURS);
    3bcc:	2c e6       	ldi	r18, 0x6C	; 108
    3bce:	31 e0       	ldi	r19, 0x01	; 1
    3bd0:	82 e0       	ldi	r24, 0x02	; 2
    3bd2:	90 e0       	ldi	r25, 0x00	; 0
    3bd4:	b9 01       	movw	r22, r18
    3bd6:	0e 94 a5 1b 	call	0x374a	; 0x374a <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNSET,&Local_u8EEpromSET_MIN);
    3bda:	2d e6       	ldi	r18, 0x6D	; 109
    3bdc:	31 e0       	ldi	r19, 0x01	; 1
    3bde:	83 e0       	ldi	r24, 0x03	; 3
    3be0:	90 e0       	ldi	r25, 0x00	; 0
    3be2:	b9 01       	movw	r22, r18
    3be4:	0e 94 a5 1b 	call	0x374a	; 0x374a <EEPROM_enumReadByte>
	EEPROM_enumReadByte(HOUR_SUNRISE,&Local_u8EEpromRIS_Hours);
    3be8:	2e e6       	ldi	r18, 0x6E	; 110
    3bea:	31 e0       	ldi	r19, 0x01	; 1
    3bec:	80 e0       	ldi	r24, 0x00	; 0
    3bee:	90 e0       	ldi	r25, 0x00	; 0
    3bf0:	b9 01       	movw	r22, r18
    3bf2:	0e 94 a5 1b 	call	0x374a	; 0x374a <EEPROM_enumReadByte>
	EEPROM_enumReadByte(MINUTE_SUNRISE,&Local_u8EEpromRIS_Min);
    3bf6:	2f e6       	ldi	r18, 0x6F	; 111
    3bf8:	31 e0       	ldi	r19, 0x01	; 1
    3bfa:	81 e0       	ldi	r24, 0x01	; 1
    3bfc:	90 e0       	ldi	r25, 0x00	; 0
    3bfe:	b9 01       	movw	r22, r18
    3c00:	0e 94 a5 1b 	call	0x374a	; 0x374a <EEPROM_enumReadByte>
}
    3c04:	cf 91       	pop	r28
    3c06:	df 91       	pop	r29
    3c08:	08 95       	ret

00003c0a <main>:
int main(void)
{
    3c0a:	0f 93       	push	r16
    3c0c:	1f 93       	push	r17
    3c0e:	df 93       	push	r29
    3c10:	cf 93       	push	r28
    3c12:	cd b7       	in	r28, 0x3d	; 61
    3c14:	de b7       	in	r29, 0x3e	; 62
    3c16:	c8 57       	subi	r28, 0x78	; 120
    3c18:	d0 40       	sbci	r29, 0x00	; 0
    3c1a:	0f b6       	in	r0, 0x3f	; 63
    3c1c:	f8 94       	cli
    3c1e:	de bf       	out	0x3e, r29	; 62
    3c20:	0f be       	out	0x3f, r0	; 63
    3c22:	cd bf       	out	0x3d, r28	; 61
    3c24:	fe 01       	movw	r30, r28
    3c26:	e3 59       	subi	r30, 0x93	; 147
    3c28:	ff 4f       	sbci	r31, 0xFF	; 255
    3c2a:	80 e0       	ldi	r24, 0x00	; 0
    3c2c:	90 e0       	ldi	r25, 0x00	; 0
    3c2e:	a8 ec       	ldi	r26, 0xC8	; 200
    3c30:	b2 e4       	ldi	r27, 0x42	; 66
    3c32:	80 83       	st	Z, r24
    3c34:	91 83       	std	Z+1, r25	; 0x01
    3c36:	a2 83       	std	Z+2, r26	; 0x02
    3c38:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3c3a:	8e 01       	movw	r16, r28
    3c3c:	07 59       	subi	r16, 0x97	; 151
    3c3e:	1f 4f       	sbci	r17, 0xFF	; 255
    3c40:	fe 01       	movw	r30, r28
    3c42:	e3 59       	subi	r30, 0x93	; 147
    3c44:	ff 4f       	sbci	r31, 0xFF	; 255
    3c46:	60 81       	ld	r22, Z
    3c48:	71 81       	ldd	r23, Z+1	; 0x01
    3c4a:	82 81       	ldd	r24, Z+2	; 0x02
    3c4c:	93 81       	ldd	r25, Z+3	; 0x03
    3c4e:	20 e0       	ldi	r18, 0x00	; 0
    3c50:	30 e0       	ldi	r19, 0x00	; 0
    3c52:	4a ef       	ldi	r20, 0xFA	; 250
    3c54:	54 e4       	ldi	r21, 0x44	; 68
    3c56:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3c5a:	dc 01       	movw	r26, r24
    3c5c:	cb 01       	movw	r24, r22
    3c5e:	f8 01       	movw	r30, r16
    3c60:	80 83       	st	Z, r24
    3c62:	91 83       	std	Z+1, r25	; 0x01
    3c64:	a2 83       	std	Z+2, r26	; 0x02
    3c66:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3c68:	fe 01       	movw	r30, r28
    3c6a:	e7 59       	subi	r30, 0x97	; 151
    3c6c:	ff 4f       	sbci	r31, 0xFF	; 255
    3c6e:	60 81       	ld	r22, Z
    3c70:	71 81       	ldd	r23, Z+1	; 0x01
    3c72:	82 81       	ldd	r24, Z+2	; 0x02
    3c74:	93 81       	ldd	r25, Z+3	; 0x03
    3c76:	20 e0       	ldi	r18, 0x00	; 0
    3c78:	30 e0       	ldi	r19, 0x00	; 0
    3c7a:	40 e8       	ldi	r20, 0x80	; 128
    3c7c:	5f e3       	ldi	r21, 0x3F	; 63
    3c7e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3c82:	88 23       	and	r24, r24
    3c84:	44 f4       	brge	.+16     	; 0x3c96 <main+0x8c>
		__ticks = 1;
    3c86:	fe 01       	movw	r30, r28
    3c88:	e9 59       	subi	r30, 0x99	; 153
    3c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c8c:	81 e0       	ldi	r24, 0x01	; 1
    3c8e:	90 e0       	ldi	r25, 0x00	; 0
    3c90:	91 83       	std	Z+1, r25	; 0x01
    3c92:	80 83       	st	Z, r24
    3c94:	64 c0       	rjmp	.+200    	; 0x3d5e <main+0x154>
	else if (__tmp > 65535)
    3c96:	fe 01       	movw	r30, r28
    3c98:	e7 59       	subi	r30, 0x97	; 151
    3c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3c9c:	60 81       	ld	r22, Z
    3c9e:	71 81       	ldd	r23, Z+1	; 0x01
    3ca0:	82 81       	ldd	r24, Z+2	; 0x02
    3ca2:	93 81       	ldd	r25, Z+3	; 0x03
    3ca4:	20 e0       	ldi	r18, 0x00	; 0
    3ca6:	3f ef       	ldi	r19, 0xFF	; 255
    3ca8:	4f e7       	ldi	r20, 0x7F	; 127
    3caa:	57 e4       	ldi	r21, 0x47	; 71
    3cac:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    3cb0:	18 16       	cp	r1, r24
    3cb2:	0c f0       	brlt	.+2      	; 0x3cb6 <main+0xac>
    3cb4:	43 c0       	rjmp	.+134    	; 0x3d3c <main+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3cb6:	fe 01       	movw	r30, r28
    3cb8:	e3 59       	subi	r30, 0x93	; 147
    3cba:	ff 4f       	sbci	r31, 0xFF	; 255
    3cbc:	60 81       	ld	r22, Z
    3cbe:	71 81       	ldd	r23, Z+1	; 0x01
    3cc0:	82 81       	ldd	r24, Z+2	; 0x02
    3cc2:	93 81       	ldd	r25, Z+3	; 0x03
    3cc4:	20 e0       	ldi	r18, 0x00	; 0
    3cc6:	30 e0       	ldi	r19, 0x00	; 0
    3cc8:	40 e2       	ldi	r20, 0x20	; 32
    3cca:	51 e4       	ldi	r21, 0x41	; 65
    3ccc:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3cd0:	dc 01       	movw	r26, r24
    3cd2:	cb 01       	movw	r24, r22
    3cd4:	8e 01       	movw	r16, r28
    3cd6:	09 59       	subi	r16, 0x99	; 153
    3cd8:	1f 4f       	sbci	r17, 0xFF	; 255
    3cda:	bc 01       	movw	r22, r24
    3cdc:	cd 01       	movw	r24, r26
    3cde:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ce2:	dc 01       	movw	r26, r24
    3ce4:	cb 01       	movw	r24, r22
    3ce6:	f8 01       	movw	r30, r16
    3ce8:	91 83       	std	Z+1, r25	; 0x01
    3cea:	80 83       	st	Z, r24
    3cec:	1f c0       	rjmp	.+62     	; 0x3d2c <main+0x122>
    3cee:	fe 01       	movw	r30, r28
    3cf0:	eb 59       	subi	r30, 0x9B	; 155
    3cf2:	ff 4f       	sbci	r31, 0xFF	; 255
    3cf4:	88 ec       	ldi	r24, 0xC8	; 200
    3cf6:	90 e0       	ldi	r25, 0x00	; 0
    3cf8:	91 83       	std	Z+1, r25	; 0x01
    3cfa:	80 83       	st	Z, r24
    3cfc:	fe 01       	movw	r30, r28
    3cfe:	eb 59       	subi	r30, 0x9B	; 155
    3d00:	ff 4f       	sbci	r31, 0xFF	; 255
    3d02:	80 81       	ld	r24, Z
    3d04:	91 81       	ldd	r25, Z+1	; 0x01
    3d06:	01 97       	sbiw	r24, 0x01	; 1
    3d08:	f1 f7       	brne	.-4      	; 0x3d06 <main+0xfc>
    3d0a:	fe 01       	movw	r30, r28
    3d0c:	eb 59       	subi	r30, 0x9B	; 155
    3d0e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d10:	91 83       	std	Z+1, r25	; 0x01
    3d12:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3d14:	de 01       	movw	r26, r28
    3d16:	a9 59       	subi	r26, 0x99	; 153
    3d18:	bf 4f       	sbci	r27, 0xFF	; 255
    3d1a:	fe 01       	movw	r30, r28
    3d1c:	e9 59       	subi	r30, 0x99	; 153
    3d1e:	ff 4f       	sbci	r31, 0xFF	; 255
    3d20:	80 81       	ld	r24, Z
    3d22:	91 81       	ldd	r25, Z+1	; 0x01
    3d24:	01 97       	sbiw	r24, 0x01	; 1
    3d26:	11 96       	adiw	r26, 0x01	; 1
    3d28:	9c 93       	st	X, r25
    3d2a:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3d2c:	fe 01       	movw	r30, r28
    3d2e:	e9 59       	subi	r30, 0x99	; 153
    3d30:	ff 4f       	sbci	r31, 0xFF	; 255
    3d32:	80 81       	ld	r24, Z
    3d34:	91 81       	ldd	r25, Z+1	; 0x01
    3d36:	00 97       	sbiw	r24, 0x00	; 0
    3d38:	d1 f6       	brne	.-76     	; 0x3cee <main+0xe4>
    3d3a:	27 c0       	rjmp	.+78     	; 0x3d8a <main+0x180>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3d3c:	8e 01       	movw	r16, r28
    3d3e:	09 59       	subi	r16, 0x99	; 153
    3d40:	1f 4f       	sbci	r17, 0xFF	; 255
    3d42:	fe 01       	movw	r30, r28
    3d44:	e7 59       	subi	r30, 0x97	; 151
    3d46:	ff 4f       	sbci	r31, 0xFF	; 255
    3d48:	60 81       	ld	r22, Z
    3d4a:	71 81       	ldd	r23, Z+1	; 0x01
    3d4c:	82 81       	ldd	r24, Z+2	; 0x02
    3d4e:	93 81       	ldd	r25, Z+3	; 0x03
    3d50:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3d54:	dc 01       	movw	r26, r24
    3d56:	cb 01       	movw	r24, r22
    3d58:	f8 01       	movw	r30, r16
    3d5a:	91 83       	std	Z+1, r25	; 0x01
    3d5c:	80 83       	st	Z, r24
    3d5e:	de 01       	movw	r26, r28
    3d60:	ad 59       	subi	r26, 0x9D	; 157
    3d62:	bf 4f       	sbci	r27, 0xFF	; 255
    3d64:	fe 01       	movw	r30, r28
    3d66:	e9 59       	subi	r30, 0x99	; 153
    3d68:	ff 4f       	sbci	r31, 0xFF	; 255
    3d6a:	80 81       	ld	r24, Z
    3d6c:	91 81       	ldd	r25, Z+1	; 0x01
    3d6e:	8d 93       	st	X+, r24
    3d70:	9c 93       	st	X, r25
    3d72:	fe 01       	movw	r30, r28
    3d74:	ed 59       	subi	r30, 0x9D	; 157
    3d76:	ff 4f       	sbci	r31, 0xFF	; 255
    3d78:	80 81       	ld	r24, Z
    3d7a:	91 81       	ldd	r25, Z+1	; 0x01
    3d7c:	01 97       	sbiw	r24, 0x01	; 1
    3d7e:	f1 f7       	brne	.-4      	; 0x3d7c <main+0x172>
    3d80:	fe 01       	movw	r30, r28
    3d82:	ed 59       	subi	r30, 0x9D	; 157
    3d84:	ff 4f       	sbci	r31, 0xFF	; 255
    3d86:	91 83       	std	Z+1, r25	; 0x01
    3d88:	80 83       	st	Z, r24
	_delay_ms(100);
	ADC_VoidInit();
    3d8a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <ADC_VoidInit>
	LDR_SENSOR_voidInit(ADC_6);
    3d8e:	86 e0       	ldi	r24, 0x06	; 6
    3d90:	0e 94 78 1a 	call	0x34f0	; 0x34f0 <LDR_SENSOR_voidInit>
	I2C_voidInit();
    3d94:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <I2C_voidInit>
	// added : Init UART   *****************
	USART_voidInit(9600);
    3d98:	60 e8       	ldi	r22, 0x80	; 128
    3d9a:	75 e2       	ldi	r23, 0x25	; 37
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	90 e0       	ldi	r25, 0x00	; 0
    3da0:	0e 94 0b 0e 	call	0x1c16	; 0x1c16 <USART_voidInit>

	u8 local_u8SunSetFlag = SUNRISE;
    3da4:	fe 01       	movw	r30, r28
    3da6:	ed 58       	subi	r30, 0x8D	; 141
    3da8:	ff 4f       	sbci	r31, 0xFF	; 255
    3daa:	81 e0       	ldi	r24, 0x01	; 1
    3dac:	80 83       	st	Z, r24
	u8 Local_u8inti=0 ;
    3dae:	fe 01       	movw	r30, r28
    3db0:	ee 58       	subi	r30, 0x8E	; 142
    3db2:	ff 4f       	sbci	r31, 0xFF	; 255
    3db4:	10 82       	st	Z, r1
	u8 Local_u8Cluod_UpdateTime = 0;
    3db6:	fe 01       	movw	r30, r28
    3db8:	ef 58       	subi	r30, 0x8F	; 143
    3dba:	ff 4f       	sbci	r31, 0xFF	; 255
    3dbc:	10 82       	st	Z, r1
	RTC_Time Time;
	Time.Seconds = 50;
    3dbe:	fe 01       	movw	r30, r28
    3dc0:	ec 58       	subi	r30, 0x8C	; 140
    3dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    3dc4:	82 e3       	ldi	r24, 0x32	; 50
    3dc6:	80 83       	st	Z, r24
	Time.Minutes = 19;
    3dc8:	fe 01       	movw	r30, r28
    3dca:	ec 58       	subi	r30, 0x8C	; 140
    3dcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3dce:	83 e1       	ldi	r24, 0x13	; 19
    3dd0:	81 83       	std	Z+1, r24	; 0x01
	Time.Hours = 17;
    3dd2:	fe 01       	movw	r30, r28
    3dd4:	ec 58       	subi	r30, 0x8C	; 140
    3dd6:	ff 4f       	sbci	r31, 0xFF	; 255
    3dd8:	81 e1       	ldi	r24, 0x11	; 17
    3dda:	82 83       	std	Z+2, r24	; 0x02
	Time.HoursMode = Hours_24;
    3ddc:	fe 01       	movw	r30, r28
    3dde:	ec 58       	subi	r30, 0x8C	; 140
    3de0:	ff 4f       	sbci	r31, 0xFF	; 255
    3de2:	14 82       	std	Z+4, r1	; 0x04
	Time.AM_PM = PM;
    3de4:	fe 01       	movw	r30, r28
    3de6:	ec 58       	subi	r30, 0x8C	; 140
    3de8:	ff 4f       	sbci	r31, 0xFF	; 255
    3dea:	80 e2       	ldi	r24, 0x20	; 32
    3dec:	83 83       	std	Z+3, r24	; 0x03
	RTC_enumUpdateTime(&Time);
    3dee:	ce 01       	movw	r24, r28
    3df0:	8c 58       	subi	r24, 0x8C	; 140
    3df2:	9f 4f       	sbci	r25, 0xFF	; 255
    3df4:	0e 94 31 18 	call	0x3062	; 0x3062 <RTC_enumUpdateTime>

//	// Modified : as new deceleration *****************
	EEPROM_voidWriteTime( Local_u8EEpromWRSET_HOURS, Local_u8EEpromWRSET_MIN, Local_u8EEpromWRRIS_Hours , Local_u8EEpromWRRIS_Min); // this function just write initial data to EEPROM
    3df8:	80 91 68 01 	lds	r24, 0x0168
    3dfc:	90 91 69 01 	lds	r25, 0x0169
    3e00:	20 91 6a 01 	lds	r18, 0x016A
    3e04:	30 91 6b 01 	lds	r19, 0x016B
    3e08:	69 2f       	mov	r22, r25
    3e0a:	42 2f       	mov	r20, r18
    3e0c:	23 2f       	mov	r18, r19
    3e0e:	0e 94 ef 1b 	call	0x37de	; 0x37de <EEPROM_voidWriteTime>
	EEPROM_ReadTime(); // to and read time and save it to the variables to be checked
    3e12:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <EEPROM_ReadTime>

	// added : PIN DIR for Switch		*****************
	DIO_SetPinDirection(PORTC,PIN0,INPUT);
    3e16:	82 e0       	ldi	r24, 0x02	; 2
    3e18:	60 e0       	ldi	r22, 0x00	; 0
    3e1a:	40 e0       	ldi	r20, 0x00	; 0
    3e1c:	0e 94 e3 15 	call	0x2bc6	; 0x2bc6 <DIO_SetPinDirection>
	{

		// get status of Switch *****************
//		DIO_GetPinValue(PORTC,PIN0,&Local_u8Cluod_UpdateTime);
		// this Will be valuable in the second release *****************
		if (Local_u8Cluod_UpdateTime == 1)
    3e20:	fe 01       	movw	r30, r28
    3e22:	ef 58       	subi	r30, 0x8F	; 143
    3e24:	ff 4f       	sbci	r31, 0xFF	; 255
    3e26:	80 81       	ld	r24, Z
    3e28:	81 30       	cpi	r24, 0x01	; 1
    3e2a:	09 f0       	breq	.+2      	; 0x3e2e <main+0x224>
    3e2c:	e9 c3       	rjmp	.+2002   	; 0x4600 <main+0x9f6>
		{
			// Update RTC Time
			Time.Hours = USART_u8Recieve();
    3e2e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    3e32:	fe 01       	movw	r30, r28
    3e34:	ec 58       	subi	r30, 0x8C	; 140
    3e36:	ff 4f       	sbci	r31, 0xFF	; 255
    3e38:	82 83       	std	Z+2, r24	; 0x02
    3e3a:	fe 01       	movw	r30, r28
    3e3c:	e1 5a       	subi	r30, 0xA1	; 161
    3e3e:	ff 4f       	sbci	r31, 0xFF	; 255
    3e40:	80 e0       	ldi	r24, 0x00	; 0
    3e42:	90 e0       	ldi	r25, 0x00	; 0
    3e44:	a8 e4       	ldi	r26, 0x48	; 72
    3e46:	b3 e4       	ldi	r27, 0x43	; 67
    3e48:	80 83       	st	Z, r24
    3e4a:	91 83       	std	Z+1, r25	; 0x01
    3e4c:	a2 83       	std	Z+2, r26	; 0x02
    3e4e:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3e50:	8e 01       	movw	r16, r28
    3e52:	05 5a       	subi	r16, 0xA5	; 165
    3e54:	1f 4f       	sbci	r17, 0xFF	; 255
    3e56:	fe 01       	movw	r30, r28
    3e58:	e1 5a       	subi	r30, 0xA1	; 161
    3e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    3e5c:	60 81       	ld	r22, Z
    3e5e:	71 81       	ldd	r23, Z+1	; 0x01
    3e60:	82 81       	ldd	r24, Z+2	; 0x02
    3e62:	93 81       	ldd	r25, Z+3	; 0x03
    3e64:	20 e0       	ldi	r18, 0x00	; 0
    3e66:	30 e0       	ldi	r19, 0x00	; 0
    3e68:	4a ef       	ldi	r20, 0xFA	; 250
    3e6a:	54 e4       	ldi	r21, 0x44	; 68
    3e6c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3e70:	dc 01       	movw	r26, r24
    3e72:	cb 01       	movw	r24, r22
    3e74:	f8 01       	movw	r30, r16
    3e76:	80 83       	st	Z, r24
    3e78:	91 83       	std	Z+1, r25	; 0x01
    3e7a:	a2 83       	std	Z+2, r26	; 0x02
    3e7c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3e7e:	fe 01       	movw	r30, r28
    3e80:	e5 5a       	subi	r30, 0xA5	; 165
    3e82:	ff 4f       	sbci	r31, 0xFF	; 255
    3e84:	60 81       	ld	r22, Z
    3e86:	71 81       	ldd	r23, Z+1	; 0x01
    3e88:	82 81       	ldd	r24, Z+2	; 0x02
    3e8a:	93 81       	ldd	r25, Z+3	; 0x03
    3e8c:	20 e0       	ldi	r18, 0x00	; 0
    3e8e:	30 e0       	ldi	r19, 0x00	; 0
    3e90:	40 e8       	ldi	r20, 0x80	; 128
    3e92:	5f e3       	ldi	r21, 0x3F	; 63
    3e94:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    3e98:	88 23       	and	r24, r24
    3e9a:	44 f4       	brge	.+16     	; 0x3eac <main+0x2a2>
		__ticks = 1;
    3e9c:	fe 01       	movw	r30, r28
    3e9e:	e7 5a       	subi	r30, 0xA7	; 167
    3ea0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ea2:	81 e0       	ldi	r24, 0x01	; 1
    3ea4:	90 e0       	ldi	r25, 0x00	; 0
    3ea6:	91 83       	std	Z+1, r25	; 0x01
    3ea8:	80 83       	st	Z, r24
    3eaa:	64 c0       	rjmp	.+200    	; 0x3f74 <main+0x36a>
	else if (__tmp > 65535)
    3eac:	fe 01       	movw	r30, r28
    3eae:	e5 5a       	subi	r30, 0xA5	; 165
    3eb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3eb2:	60 81       	ld	r22, Z
    3eb4:	71 81       	ldd	r23, Z+1	; 0x01
    3eb6:	82 81       	ldd	r24, Z+2	; 0x02
    3eb8:	93 81       	ldd	r25, Z+3	; 0x03
    3eba:	20 e0       	ldi	r18, 0x00	; 0
    3ebc:	3f ef       	ldi	r19, 0xFF	; 255
    3ebe:	4f e7       	ldi	r20, 0x7F	; 127
    3ec0:	57 e4       	ldi	r21, 0x47	; 71
    3ec2:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    3ec6:	18 16       	cp	r1, r24
    3ec8:	0c f0       	brlt	.+2      	; 0x3ecc <main+0x2c2>
    3eca:	43 c0       	rjmp	.+134    	; 0x3f52 <main+0x348>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3ecc:	fe 01       	movw	r30, r28
    3ece:	e1 5a       	subi	r30, 0xA1	; 161
    3ed0:	ff 4f       	sbci	r31, 0xFF	; 255
    3ed2:	60 81       	ld	r22, Z
    3ed4:	71 81       	ldd	r23, Z+1	; 0x01
    3ed6:	82 81       	ldd	r24, Z+2	; 0x02
    3ed8:	93 81       	ldd	r25, Z+3	; 0x03
    3eda:	20 e0       	ldi	r18, 0x00	; 0
    3edc:	30 e0       	ldi	r19, 0x00	; 0
    3ede:	40 e2       	ldi	r20, 0x20	; 32
    3ee0:	51 e4       	ldi	r21, 0x41	; 65
    3ee2:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3ee6:	dc 01       	movw	r26, r24
    3ee8:	cb 01       	movw	r24, r22
    3eea:	8e 01       	movw	r16, r28
    3eec:	07 5a       	subi	r16, 0xA7	; 167
    3eee:	1f 4f       	sbci	r17, 0xFF	; 255
    3ef0:	bc 01       	movw	r22, r24
    3ef2:	cd 01       	movw	r24, r26
    3ef4:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3ef8:	dc 01       	movw	r26, r24
    3efa:	cb 01       	movw	r24, r22
    3efc:	f8 01       	movw	r30, r16
    3efe:	91 83       	std	Z+1, r25	; 0x01
    3f00:	80 83       	st	Z, r24
    3f02:	1f c0       	rjmp	.+62     	; 0x3f42 <main+0x338>
    3f04:	fe 01       	movw	r30, r28
    3f06:	e9 5a       	subi	r30, 0xA9	; 169
    3f08:	ff 4f       	sbci	r31, 0xFF	; 255
    3f0a:	88 ec       	ldi	r24, 0xC8	; 200
    3f0c:	90 e0       	ldi	r25, 0x00	; 0
    3f0e:	91 83       	std	Z+1, r25	; 0x01
    3f10:	80 83       	st	Z, r24
    3f12:	fe 01       	movw	r30, r28
    3f14:	e9 5a       	subi	r30, 0xA9	; 169
    3f16:	ff 4f       	sbci	r31, 0xFF	; 255
    3f18:	80 81       	ld	r24, Z
    3f1a:	91 81       	ldd	r25, Z+1	; 0x01
    3f1c:	01 97       	sbiw	r24, 0x01	; 1
    3f1e:	f1 f7       	brne	.-4      	; 0x3f1c <main+0x312>
    3f20:	fe 01       	movw	r30, r28
    3f22:	e9 5a       	subi	r30, 0xA9	; 169
    3f24:	ff 4f       	sbci	r31, 0xFF	; 255
    3f26:	91 83       	std	Z+1, r25	; 0x01
    3f28:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3f2a:	de 01       	movw	r26, r28
    3f2c:	a7 5a       	subi	r26, 0xA7	; 167
    3f2e:	bf 4f       	sbci	r27, 0xFF	; 255
    3f30:	fe 01       	movw	r30, r28
    3f32:	e7 5a       	subi	r30, 0xA7	; 167
    3f34:	ff 4f       	sbci	r31, 0xFF	; 255
    3f36:	80 81       	ld	r24, Z
    3f38:	91 81       	ldd	r25, Z+1	; 0x01
    3f3a:	01 97       	sbiw	r24, 0x01	; 1
    3f3c:	11 96       	adiw	r26, 0x01	; 1
    3f3e:	9c 93       	st	X, r25
    3f40:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3f42:	fe 01       	movw	r30, r28
    3f44:	e7 5a       	subi	r30, 0xA7	; 167
    3f46:	ff 4f       	sbci	r31, 0xFF	; 255
    3f48:	80 81       	ld	r24, Z
    3f4a:	91 81       	ldd	r25, Z+1	; 0x01
    3f4c:	00 97       	sbiw	r24, 0x00	; 0
    3f4e:	d1 f6       	brne	.-76     	; 0x3f04 <main+0x2fa>
    3f50:	27 c0       	rjmp	.+78     	; 0x3fa0 <main+0x396>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3f52:	8e 01       	movw	r16, r28
    3f54:	07 5a       	subi	r16, 0xA7	; 167
    3f56:	1f 4f       	sbci	r17, 0xFF	; 255
    3f58:	fe 01       	movw	r30, r28
    3f5a:	e5 5a       	subi	r30, 0xA5	; 165
    3f5c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f5e:	60 81       	ld	r22, Z
    3f60:	71 81       	ldd	r23, Z+1	; 0x01
    3f62:	82 81       	ldd	r24, Z+2	; 0x02
    3f64:	93 81       	ldd	r25, Z+3	; 0x03
    3f66:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    3f6a:	dc 01       	movw	r26, r24
    3f6c:	cb 01       	movw	r24, r22
    3f6e:	f8 01       	movw	r30, r16
    3f70:	91 83       	std	Z+1, r25	; 0x01
    3f72:	80 83       	st	Z, r24
    3f74:	de 01       	movw	r26, r28
    3f76:	ab 5a       	subi	r26, 0xAB	; 171
    3f78:	bf 4f       	sbci	r27, 0xFF	; 255
    3f7a:	fe 01       	movw	r30, r28
    3f7c:	e7 5a       	subi	r30, 0xA7	; 167
    3f7e:	ff 4f       	sbci	r31, 0xFF	; 255
    3f80:	80 81       	ld	r24, Z
    3f82:	91 81       	ldd	r25, Z+1	; 0x01
    3f84:	8d 93       	st	X+, r24
    3f86:	9c 93       	st	X, r25
    3f88:	fe 01       	movw	r30, r28
    3f8a:	eb 5a       	subi	r30, 0xAB	; 171
    3f8c:	ff 4f       	sbci	r31, 0xFF	; 255
    3f8e:	80 81       	ld	r24, Z
    3f90:	91 81       	ldd	r25, Z+1	; 0x01
    3f92:	01 97       	sbiw	r24, 0x01	; 1
    3f94:	f1 f7       	brne	.-4      	; 0x3f92 <main+0x388>
    3f96:	fe 01       	movw	r30, r28
    3f98:	eb 5a       	subi	r30, 0xAB	; 171
    3f9a:	ff 4f       	sbci	r31, 0xFF	; 255
    3f9c:	91 83       	std	Z+1, r25	; 0x01
    3f9e:	80 83       	st	Z, r24
			_delay_ms(200);
			Time.Minutes   = USART_u8Recieve();
    3fa0:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    3fa4:	fe 01       	movw	r30, r28
    3fa6:	ec 58       	subi	r30, 0x8C	; 140
    3fa8:	ff 4f       	sbci	r31, 0xFF	; 255
    3faa:	81 83       	std	Z+1, r24	; 0x01
    3fac:	fe 01       	movw	r30, r28
    3fae:	ef 5a       	subi	r30, 0xAF	; 175
    3fb0:	ff 4f       	sbci	r31, 0xFF	; 255
    3fb2:	80 e0       	ldi	r24, 0x00	; 0
    3fb4:	90 e0       	ldi	r25, 0x00	; 0
    3fb6:	a8 e4       	ldi	r26, 0x48	; 72
    3fb8:	b3 e4       	ldi	r27, 0x43	; 67
    3fba:	80 83       	st	Z, r24
    3fbc:	91 83       	std	Z+1, r25	; 0x01
    3fbe:	a2 83       	std	Z+2, r26	; 0x02
    3fc0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3fc2:	8e 01       	movw	r16, r28
    3fc4:	03 5b       	subi	r16, 0xB3	; 179
    3fc6:	1f 4f       	sbci	r17, 0xFF	; 255
    3fc8:	fe 01       	movw	r30, r28
    3fca:	ef 5a       	subi	r30, 0xAF	; 175
    3fcc:	ff 4f       	sbci	r31, 0xFF	; 255
    3fce:	60 81       	ld	r22, Z
    3fd0:	71 81       	ldd	r23, Z+1	; 0x01
    3fd2:	82 81       	ldd	r24, Z+2	; 0x02
    3fd4:	93 81       	ldd	r25, Z+3	; 0x03
    3fd6:	20 e0       	ldi	r18, 0x00	; 0
    3fd8:	30 e0       	ldi	r19, 0x00	; 0
    3fda:	4a ef       	ldi	r20, 0xFA	; 250
    3fdc:	54 e4       	ldi	r21, 0x44	; 68
    3fde:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    3fe2:	dc 01       	movw	r26, r24
    3fe4:	cb 01       	movw	r24, r22
    3fe6:	f8 01       	movw	r30, r16
    3fe8:	80 83       	st	Z, r24
    3fea:	91 83       	std	Z+1, r25	; 0x01
    3fec:	a2 83       	std	Z+2, r26	; 0x02
    3fee:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    3ff0:	fe 01       	movw	r30, r28
    3ff2:	e3 5b       	subi	r30, 0xB3	; 179
    3ff4:	ff 4f       	sbci	r31, 0xFF	; 255
    3ff6:	60 81       	ld	r22, Z
    3ff8:	71 81       	ldd	r23, Z+1	; 0x01
    3ffa:	82 81       	ldd	r24, Z+2	; 0x02
    3ffc:	93 81       	ldd	r25, Z+3	; 0x03
    3ffe:	20 e0       	ldi	r18, 0x00	; 0
    4000:	30 e0       	ldi	r19, 0x00	; 0
    4002:	40 e8       	ldi	r20, 0x80	; 128
    4004:	5f e3       	ldi	r21, 0x3F	; 63
    4006:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    400a:	88 23       	and	r24, r24
    400c:	44 f4       	brge	.+16     	; 0x401e <main+0x414>
		__ticks = 1;
    400e:	fe 01       	movw	r30, r28
    4010:	e5 5b       	subi	r30, 0xB5	; 181
    4012:	ff 4f       	sbci	r31, 0xFF	; 255
    4014:	81 e0       	ldi	r24, 0x01	; 1
    4016:	90 e0       	ldi	r25, 0x00	; 0
    4018:	91 83       	std	Z+1, r25	; 0x01
    401a:	80 83       	st	Z, r24
    401c:	64 c0       	rjmp	.+200    	; 0x40e6 <main+0x4dc>
	else if (__tmp > 65535)
    401e:	fe 01       	movw	r30, r28
    4020:	e3 5b       	subi	r30, 0xB3	; 179
    4022:	ff 4f       	sbci	r31, 0xFF	; 255
    4024:	60 81       	ld	r22, Z
    4026:	71 81       	ldd	r23, Z+1	; 0x01
    4028:	82 81       	ldd	r24, Z+2	; 0x02
    402a:	93 81       	ldd	r25, Z+3	; 0x03
    402c:	20 e0       	ldi	r18, 0x00	; 0
    402e:	3f ef       	ldi	r19, 0xFF	; 255
    4030:	4f e7       	ldi	r20, 0x7F	; 127
    4032:	57 e4       	ldi	r21, 0x47	; 71
    4034:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4038:	18 16       	cp	r1, r24
    403a:	0c f0       	brlt	.+2      	; 0x403e <main+0x434>
    403c:	43 c0       	rjmp	.+134    	; 0x40c4 <main+0x4ba>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    403e:	fe 01       	movw	r30, r28
    4040:	ef 5a       	subi	r30, 0xAF	; 175
    4042:	ff 4f       	sbci	r31, 0xFF	; 255
    4044:	60 81       	ld	r22, Z
    4046:	71 81       	ldd	r23, Z+1	; 0x01
    4048:	82 81       	ldd	r24, Z+2	; 0x02
    404a:	93 81       	ldd	r25, Z+3	; 0x03
    404c:	20 e0       	ldi	r18, 0x00	; 0
    404e:	30 e0       	ldi	r19, 0x00	; 0
    4050:	40 e2       	ldi	r20, 0x20	; 32
    4052:	51 e4       	ldi	r21, 0x41	; 65
    4054:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4058:	dc 01       	movw	r26, r24
    405a:	cb 01       	movw	r24, r22
    405c:	8e 01       	movw	r16, r28
    405e:	05 5b       	subi	r16, 0xB5	; 181
    4060:	1f 4f       	sbci	r17, 0xFF	; 255
    4062:	bc 01       	movw	r22, r24
    4064:	cd 01       	movw	r24, r26
    4066:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    406a:	dc 01       	movw	r26, r24
    406c:	cb 01       	movw	r24, r22
    406e:	f8 01       	movw	r30, r16
    4070:	91 83       	std	Z+1, r25	; 0x01
    4072:	80 83       	st	Z, r24
    4074:	1f c0       	rjmp	.+62     	; 0x40b4 <main+0x4aa>
    4076:	fe 01       	movw	r30, r28
    4078:	e7 5b       	subi	r30, 0xB7	; 183
    407a:	ff 4f       	sbci	r31, 0xFF	; 255
    407c:	88 ec       	ldi	r24, 0xC8	; 200
    407e:	90 e0       	ldi	r25, 0x00	; 0
    4080:	91 83       	std	Z+1, r25	; 0x01
    4082:	80 83       	st	Z, r24
    4084:	fe 01       	movw	r30, r28
    4086:	e7 5b       	subi	r30, 0xB7	; 183
    4088:	ff 4f       	sbci	r31, 0xFF	; 255
    408a:	80 81       	ld	r24, Z
    408c:	91 81       	ldd	r25, Z+1	; 0x01
    408e:	01 97       	sbiw	r24, 0x01	; 1
    4090:	f1 f7       	brne	.-4      	; 0x408e <main+0x484>
    4092:	fe 01       	movw	r30, r28
    4094:	e7 5b       	subi	r30, 0xB7	; 183
    4096:	ff 4f       	sbci	r31, 0xFF	; 255
    4098:	91 83       	std	Z+1, r25	; 0x01
    409a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    409c:	de 01       	movw	r26, r28
    409e:	a5 5b       	subi	r26, 0xB5	; 181
    40a0:	bf 4f       	sbci	r27, 0xFF	; 255
    40a2:	fe 01       	movw	r30, r28
    40a4:	e5 5b       	subi	r30, 0xB5	; 181
    40a6:	ff 4f       	sbci	r31, 0xFF	; 255
    40a8:	80 81       	ld	r24, Z
    40aa:	91 81       	ldd	r25, Z+1	; 0x01
    40ac:	01 97       	sbiw	r24, 0x01	; 1
    40ae:	11 96       	adiw	r26, 0x01	; 1
    40b0:	9c 93       	st	X, r25
    40b2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    40b4:	fe 01       	movw	r30, r28
    40b6:	e5 5b       	subi	r30, 0xB5	; 181
    40b8:	ff 4f       	sbci	r31, 0xFF	; 255
    40ba:	80 81       	ld	r24, Z
    40bc:	91 81       	ldd	r25, Z+1	; 0x01
    40be:	00 97       	sbiw	r24, 0x00	; 0
    40c0:	d1 f6       	brne	.-76     	; 0x4076 <main+0x46c>
    40c2:	27 c0       	rjmp	.+78     	; 0x4112 <main+0x508>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    40c4:	8e 01       	movw	r16, r28
    40c6:	05 5b       	subi	r16, 0xB5	; 181
    40c8:	1f 4f       	sbci	r17, 0xFF	; 255
    40ca:	fe 01       	movw	r30, r28
    40cc:	e3 5b       	subi	r30, 0xB3	; 179
    40ce:	ff 4f       	sbci	r31, 0xFF	; 255
    40d0:	60 81       	ld	r22, Z
    40d2:	71 81       	ldd	r23, Z+1	; 0x01
    40d4:	82 81       	ldd	r24, Z+2	; 0x02
    40d6:	93 81       	ldd	r25, Z+3	; 0x03
    40d8:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    40dc:	dc 01       	movw	r26, r24
    40de:	cb 01       	movw	r24, r22
    40e0:	f8 01       	movw	r30, r16
    40e2:	91 83       	std	Z+1, r25	; 0x01
    40e4:	80 83       	st	Z, r24
    40e6:	de 01       	movw	r26, r28
    40e8:	a9 5b       	subi	r26, 0xB9	; 185
    40ea:	bf 4f       	sbci	r27, 0xFF	; 255
    40ec:	fe 01       	movw	r30, r28
    40ee:	e5 5b       	subi	r30, 0xB5	; 181
    40f0:	ff 4f       	sbci	r31, 0xFF	; 255
    40f2:	80 81       	ld	r24, Z
    40f4:	91 81       	ldd	r25, Z+1	; 0x01
    40f6:	8d 93       	st	X+, r24
    40f8:	9c 93       	st	X, r25
    40fa:	fe 01       	movw	r30, r28
    40fc:	e9 5b       	subi	r30, 0xB9	; 185
    40fe:	ff 4f       	sbci	r31, 0xFF	; 255
    4100:	80 81       	ld	r24, Z
    4102:	91 81       	ldd	r25, Z+1	; 0x01
    4104:	01 97       	sbiw	r24, 0x01	; 1
    4106:	f1 f7       	brne	.-4      	; 0x4104 <main+0x4fa>
    4108:	fe 01       	movw	r30, r28
    410a:	e9 5b       	subi	r30, 0xB9	; 185
    410c:	ff 4f       	sbci	r31, 0xFF	; 255
    410e:	91 83       	std	Z+1, r25	; 0x01
    4110:	80 83       	st	Z, r24
			_delay_ms(200);
			Time.Seconds = USART_u8Recieve();
    4112:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    4116:	fe 01       	movw	r30, r28
    4118:	ec 58       	subi	r30, 0x8C	; 140
    411a:	ff 4f       	sbci	r31, 0xFF	; 255
    411c:	80 83       	st	Z, r24
    411e:	fe 01       	movw	r30, r28
    4120:	ed 5b       	subi	r30, 0xBD	; 189
    4122:	ff 4f       	sbci	r31, 0xFF	; 255
    4124:	80 e0       	ldi	r24, 0x00	; 0
    4126:	90 e0       	ldi	r25, 0x00	; 0
    4128:	a8 e4       	ldi	r26, 0x48	; 72
    412a:	b3 e4       	ldi	r27, 0x43	; 67
    412c:	80 83       	st	Z, r24
    412e:	91 83       	std	Z+1, r25	; 0x01
    4130:	a2 83       	std	Z+2, r26	; 0x02
    4132:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4134:	8e 01       	movw	r16, r28
    4136:	01 5c       	subi	r16, 0xC1	; 193
    4138:	1f 4f       	sbci	r17, 0xFF	; 255
    413a:	fe 01       	movw	r30, r28
    413c:	ed 5b       	subi	r30, 0xBD	; 189
    413e:	ff 4f       	sbci	r31, 0xFF	; 255
    4140:	60 81       	ld	r22, Z
    4142:	71 81       	ldd	r23, Z+1	; 0x01
    4144:	82 81       	ldd	r24, Z+2	; 0x02
    4146:	93 81       	ldd	r25, Z+3	; 0x03
    4148:	20 e0       	ldi	r18, 0x00	; 0
    414a:	30 e0       	ldi	r19, 0x00	; 0
    414c:	4a ef       	ldi	r20, 0xFA	; 250
    414e:	54 e4       	ldi	r21, 0x44	; 68
    4150:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4154:	dc 01       	movw	r26, r24
    4156:	cb 01       	movw	r24, r22
    4158:	f8 01       	movw	r30, r16
    415a:	80 83       	st	Z, r24
    415c:	91 83       	std	Z+1, r25	; 0x01
    415e:	a2 83       	std	Z+2, r26	; 0x02
    4160:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    4162:	fe 01       	movw	r30, r28
    4164:	ff 96       	adiw	r30, 0x3f	; 63
    4166:	60 81       	ld	r22, Z
    4168:	71 81       	ldd	r23, Z+1	; 0x01
    416a:	82 81       	ldd	r24, Z+2	; 0x02
    416c:	93 81       	ldd	r25, Z+3	; 0x03
    416e:	20 e0       	ldi	r18, 0x00	; 0
    4170:	30 e0       	ldi	r19, 0x00	; 0
    4172:	40 e8       	ldi	r20, 0x80	; 128
    4174:	5f e3       	ldi	r21, 0x3F	; 63
    4176:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    417a:	88 23       	and	r24, r24
    417c:	2c f4       	brge	.+10     	; 0x4188 <main+0x57e>
		__ticks = 1;
    417e:	81 e0       	ldi	r24, 0x01	; 1
    4180:	90 e0       	ldi	r25, 0x00	; 0
    4182:	9e af       	std	Y+62, r25	; 0x3e
    4184:	8d af       	std	Y+61, r24	; 0x3d
    4186:	46 c0       	rjmp	.+140    	; 0x4214 <main+0x60a>
	else if (__tmp > 65535)
    4188:	fe 01       	movw	r30, r28
    418a:	ff 96       	adiw	r30, 0x3f	; 63
    418c:	60 81       	ld	r22, Z
    418e:	71 81       	ldd	r23, Z+1	; 0x01
    4190:	82 81       	ldd	r24, Z+2	; 0x02
    4192:	93 81       	ldd	r25, Z+3	; 0x03
    4194:	20 e0       	ldi	r18, 0x00	; 0
    4196:	3f ef       	ldi	r19, 0xFF	; 255
    4198:	4f e7       	ldi	r20, 0x7F	; 127
    419a:	57 e4       	ldi	r21, 0x47	; 71
    419c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    41a0:	18 16       	cp	r1, r24
    41a2:	64 f5       	brge	.+88     	; 0x41fc <main+0x5f2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    41a4:	fe 01       	movw	r30, r28
    41a6:	ed 5b       	subi	r30, 0xBD	; 189
    41a8:	ff 4f       	sbci	r31, 0xFF	; 255
    41aa:	60 81       	ld	r22, Z
    41ac:	71 81       	ldd	r23, Z+1	; 0x01
    41ae:	82 81       	ldd	r24, Z+2	; 0x02
    41b0:	93 81       	ldd	r25, Z+3	; 0x03
    41b2:	20 e0       	ldi	r18, 0x00	; 0
    41b4:	30 e0       	ldi	r19, 0x00	; 0
    41b6:	40 e2       	ldi	r20, 0x20	; 32
    41b8:	51 e4       	ldi	r21, 0x41	; 65
    41ba:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    41be:	dc 01       	movw	r26, r24
    41c0:	cb 01       	movw	r24, r22
    41c2:	bc 01       	movw	r22, r24
    41c4:	cd 01       	movw	r24, r26
    41c6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    41ca:	dc 01       	movw	r26, r24
    41cc:	cb 01       	movw	r24, r22
    41ce:	9e af       	std	Y+62, r25	; 0x3e
    41d0:	8d af       	std	Y+61, r24	; 0x3d
    41d2:	0f c0       	rjmp	.+30     	; 0x41f2 <main+0x5e8>
    41d4:	88 ec       	ldi	r24, 0xC8	; 200
    41d6:	90 e0       	ldi	r25, 0x00	; 0
    41d8:	9c af       	std	Y+60, r25	; 0x3c
    41da:	8b af       	std	Y+59, r24	; 0x3b
    41dc:	8b ad       	ldd	r24, Y+59	; 0x3b
    41de:	9c ad       	ldd	r25, Y+60	; 0x3c
    41e0:	01 97       	sbiw	r24, 0x01	; 1
    41e2:	f1 f7       	brne	.-4      	; 0x41e0 <main+0x5d6>
    41e4:	9c af       	std	Y+60, r25	; 0x3c
    41e6:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    41e8:	8d ad       	ldd	r24, Y+61	; 0x3d
    41ea:	9e ad       	ldd	r25, Y+62	; 0x3e
    41ec:	01 97       	sbiw	r24, 0x01	; 1
    41ee:	9e af       	std	Y+62, r25	; 0x3e
    41f0:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    41f2:	8d ad       	ldd	r24, Y+61	; 0x3d
    41f4:	9e ad       	ldd	r25, Y+62	; 0x3e
    41f6:	00 97       	sbiw	r24, 0x00	; 0
    41f8:	69 f7       	brne	.-38     	; 0x41d4 <main+0x5ca>
    41fa:	16 c0       	rjmp	.+44     	; 0x4228 <main+0x61e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    41fc:	fe 01       	movw	r30, r28
    41fe:	ff 96       	adiw	r30, 0x3f	; 63
    4200:	60 81       	ld	r22, Z
    4202:	71 81       	ldd	r23, Z+1	; 0x01
    4204:	82 81       	ldd	r24, Z+2	; 0x02
    4206:	93 81       	ldd	r25, Z+3	; 0x03
    4208:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    420c:	dc 01       	movw	r26, r24
    420e:	cb 01       	movw	r24, r22
    4210:	9e af       	std	Y+62, r25	; 0x3e
    4212:	8d af       	std	Y+61, r24	; 0x3d
    4214:	8d ad       	ldd	r24, Y+61	; 0x3d
    4216:	9e ad       	ldd	r25, Y+62	; 0x3e
    4218:	9a af       	std	Y+58, r25	; 0x3a
    421a:	89 af       	std	Y+57, r24	; 0x39
    421c:	89 ad       	ldd	r24, Y+57	; 0x39
    421e:	9a ad       	ldd	r25, Y+58	; 0x3a
    4220:	01 97       	sbiw	r24, 0x01	; 1
    4222:	f1 f7       	brne	.-4      	; 0x4220 <main+0x616>
    4224:	9a af       	std	Y+58, r25	; 0x3a
    4226:	89 af       	std	Y+57, r24	; 0x39
			_delay_ms(200);

			// call Function
			RTC_enumUpdateTime(&Time);
    4228:	ce 01       	movw	r24, r28
    422a:	8c 58       	subi	r24, 0x8C	; 140
    422c:	9f 4f       	sbci	r25, 0xFF	; 255
    422e:	0e 94 31 18 	call	0x3062	; 0x3062 <RTC_enumUpdateTime>

			// get Sunrise and Sunset Values From NodeMCU
			Local_u8EEpromWRSET_HOURS = USART_u8Recieve();
    4232:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    4236:	80 93 68 01 	sts	0x0168, r24
    423a:	80 e0       	ldi	r24, 0x00	; 0
    423c:	90 e0       	ldi	r25, 0x00	; 0
    423e:	a8 e4       	ldi	r26, 0x48	; 72
    4240:	b3 e4       	ldi	r27, 0x43	; 67
    4242:	8d ab       	std	Y+53, r24	; 0x35
    4244:	9e ab       	std	Y+54, r25	; 0x36
    4246:	af ab       	std	Y+55, r26	; 0x37
    4248:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    424a:	6d a9       	ldd	r22, Y+53	; 0x35
    424c:	7e a9       	ldd	r23, Y+54	; 0x36
    424e:	8f a9       	ldd	r24, Y+55	; 0x37
    4250:	98 ad       	ldd	r25, Y+56	; 0x38
    4252:	20 e0       	ldi	r18, 0x00	; 0
    4254:	30 e0       	ldi	r19, 0x00	; 0
    4256:	4a ef       	ldi	r20, 0xFA	; 250
    4258:	54 e4       	ldi	r21, 0x44	; 68
    425a:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    425e:	dc 01       	movw	r26, r24
    4260:	cb 01       	movw	r24, r22
    4262:	89 ab       	std	Y+49, r24	; 0x31
    4264:	9a ab       	std	Y+50, r25	; 0x32
    4266:	ab ab       	std	Y+51, r26	; 0x33
    4268:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    426a:	69 a9       	ldd	r22, Y+49	; 0x31
    426c:	7a a9       	ldd	r23, Y+50	; 0x32
    426e:	8b a9       	ldd	r24, Y+51	; 0x33
    4270:	9c a9       	ldd	r25, Y+52	; 0x34
    4272:	20 e0       	ldi	r18, 0x00	; 0
    4274:	30 e0       	ldi	r19, 0x00	; 0
    4276:	40 e8       	ldi	r20, 0x80	; 128
    4278:	5f e3       	ldi	r21, 0x3F	; 63
    427a:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    427e:	88 23       	and	r24, r24
    4280:	2c f4       	brge	.+10     	; 0x428c <main+0x682>
		__ticks = 1;
    4282:	81 e0       	ldi	r24, 0x01	; 1
    4284:	90 e0       	ldi	r25, 0x00	; 0
    4286:	98 ab       	std	Y+48, r25	; 0x30
    4288:	8f a7       	std	Y+47, r24	; 0x2f
    428a:	3f c0       	rjmp	.+126    	; 0x430a <main+0x700>
	else if (__tmp > 65535)
    428c:	69 a9       	ldd	r22, Y+49	; 0x31
    428e:	7a a9       	ldd	r23, Y+50	; 0x32
    4290:	8b a9       	ldd	r24, Y+51	; 0x33
    4292:	9c a9       	ldd	r25, Y+52	; 0x34
    4294:	20 e0       	ldi	r18, 0x00	; 0
    4296:	3f ef       	ldi	r19, 0xFF	; 255
    4298:	4f e7       	ldi	r20, 0x7F	; 127
    429a:	57 e4       	ldi	r21, 0x47	; 71
    429c:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    42a0:	18 16       	cp	r1, r24
    42a2:	4c f5       	brge	.+82     	; 0x42f6 <main+0x6ec>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    42a4:	6d a9       	ldd	r22, Y+53	; 0x35
    42a6:	7e a9       	ldd	r23, Y+54	; 0x36
    42a8:	8f a9       	ldd	r24, Y+55	; 0x37
    42aa:	98 ad       	ldd	r25, Y+56	; 0x38
    42ac:	20 e0       	ldi	r18, 0x00	; 0
    42ae:	30 e0       	ldi	r19, 0x00	; 0
    42b0:	40 e2       	ldi	r20, 0x20	; 32
    42b2:	51 e4       	ldi	r21, 0x41	; 65
    42b4:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    42b8:	dc 01       	movw	r26, r24
    42ba:	cb 01       	movw	r24, r22
    42bc:	bc 01       	movw	r22, r24
    42be:	cd 01       	movw	r24, r26
    42c0:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    42c4:	dc 01       	movw	r26, r24
    42c6:	cb 01       	movw	r24, r22
    42c8:	98 ab       	std	Y+48, r25	; 0x30
    42ca:	8f a7       	std	Y+47, r24	; 0x2f
    42cc:	0f c0       	rjmp	.+30     	; 0x42ec <main+0x6e2>
    42ce:	88 ec       	ldi	r24, 0xC8	; 200
    42d0:	90 e0       	ldi	r25, 0x00	; 0
    42d2:	9e a7       	std	Y+46, r25	; 0x2e
    42d4:	8d a7       	std	Y+45, r24	; 0x2d
    42d6:	8d a5       	ldd	r24, Y+45	; 0x2d
    42d8:	9e a5       	ldd	r25, Y+46	; 0x2e
    42da:	01 97       	sbiw	r24, 0x01	; 1
    42dc:	f1 f7       	brne	.-4      	; 0x42da <main+0x6d0>
    42de:	9e a7       	std	Y+46, r25	; 0x2e
    42e0:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    42e2:	8f a5       	ldd	r24, Y+47	; 0x2f
    42e4:	98 a9       	ldd	r25, Y+48	; 0x30
    42e6:	01 97       	sbiw	r24, 0x01	; 1
    42e8:	98 ab       	std	Y+48, r25	; 0x30
    42ea:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    42ec:	8f a5       	ldd	r24, Y+47	; 0x2f
    42ee:	98 a9       	ldd	r25, Y+48	; 0x30
    42f0:	00 97       	sbiw	r24, 0x00	; 0
    42f2:	69 f7       	brne	.-38     	; 0x42ce <main+0x6c4>
    42f4:	14 c0       	rjmp	.+40     	; 0x431e <main+0x714>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    42f6:	69 a9       	ldd	r22, Y+49	; 0x31
    42f8:	7a a9       	ldd	r23, Y+50	; 0x32
    42fa:	8b a9       	ldd	r24, Y+51	; 0x33
    42fc:	9c a9       	ldd	r25, Y+52	; 0x34
    42fe:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4302:	dc 01       	movw	r26, r24
    4304:	cb 01       	movw	r24, r22
    4306:	98 ab       	std	Y+48, r25	; 0x30
    4308:	8f a7       	std	Y+47, r24	; 0x2f
    430a:	8f a5       	ldd	r24, Y+47	; 0x2f
    430c:	98 a9       	ldd	r25, Y+48	; 0x30
    430e:	9c a7       	std	Y+44, r25	; 0x2c
    4310:	8b a7       	std	Y+43, r24	; 0x2b
    4312:	8b a5       	ldd	r24, Y+43	; 0x2b
    4314:	9c a5       	ldd	r25, Y+44	; 0x2c
    4316:	01 97       	sbiw	r24, 0x01	; 1
    4318:	f1 f7       	brne	.-4      	; 0x4316 <main+0x70c>
    431a:	9c a7       	std	Y+44, r25	; 0x2c
    431c:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(200);
			Local_u8EEpromWRSET_MIN   = USART_u8Recieve();
    431e:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    4322:	80 93 69 01 	sts	0x0169, r24
    4326:	80 e0       	ldi	r24, 0x00	; 0
    4328:	90 e0       	ldi	r25, 0x00	; 0
    432a:	a8 e4       	ldi	r26, 0x48	; 72
    432c:	b3 e4       	ldi	r27, 0x43	; 67
    432e:	8f a3       	std	Y+39, r24	; 0x27
    4330:	98 a7       	std	Y+40, r25	; 0x28
    4332:	a9 a7       	std	Y+41, r26	; 0x29
    4334:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4336:	6f a1       	ldd	r22, Y+39	; 0x27
    4338:	78 a5       	ldd	r23, Y+40	; 0x28
    433a:	89 a5       	ldd	r24, Y+41	; 0x29
    433c:	9a a5       	ldd	r25, Y+42	; 0x2a
    433e:	20 e0       	ldi	r18, 0x00	; 0
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	4a ef       	ldi	r20, 0xFA	; 250
    4344:	54 e4       	ldi	r21, 0x44	; 68
    4346:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    434a:	dc 01       	movw	r26, r24
    434c:	cb 01       	movw	r24, r22
    434e:	8b a3       	std	Y+35, r24	; 0x23
    4350:	9c a3       	std	Y+36, r25	; 0x24
    4352:	ad a3       	std	Y+37, r26	; 0x25
    4354:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    4356:	6b a1       	ldd	r22, Y+35	; 0x23
    4358:	7c a1       	ldd	r23, Y+36	; 0x24
    435a:	8d a1       	ldd	r24, Y+37	; 0x25
    435c:	9e a1       	ldd	r25, Y+38	; 0x26
    435e:	20 e0       	ldi	r18, 0x00	; 0
    4360:	30 e0       	ldi	r19, 0x00	; 0
    4362:	40 e8       	ldi	r20, 0x80	; 128
    4364:	5f e3       	ldi	r21, 0x3F	; 63
    4366:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    436a:	88 23       	and	r24, r24
    436c:	2c f4       	brge	.+10     	; 0x4378 <main+0x76e>
		__ticks = 1;
    436e:	81 e0       	ldi	r24, 0x01	; 1
    4370:	90 e0       	ldi	r25, 0x00	; 0
    4372:	9a a3       	std	Y+34, r25	; 0x22
    4374:	89 a3       	std	Y+33, r24	; 0x21
    4376:	3f c0       	rjmp	.+126    	; 0x43f6 <main+0x7ec>
	else if (__tmp > 65535)
    4378:	6b a1       	ldd	r22, Y+35	; 0x23
    437a:	7c a1       	ldd	r23, Y+36	; 0x24
    437c:	8d a1       	ldd	r24, Y+37	; 0x25
    437e:	9e a1       	ldd	r25, Y+38	; 0x26
    4380:	20 e0       	ldi	r18, 0x00	; 0
    4382:	3f ef       	ldi	r19, 0xFF	; 255
    4384:	4f e7       	ldi	r20, 0x7F	; 127
    4386:	57 e4       	ldi	r21, 0x47	; 71
    4388:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    438c:	18 16       	cp	r1, r24
    438e:	4c f5       	brge	.+82     	; 0x43e2 <main+0x7d8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4390:	6f a1       	ldd	r22, Y+39	; 0x27
    4392:	78 a5       	ldd	r23, Y+40	; 0x28
    4394:	89 a5       	ldd	r24, Y+41	; 0x29
    4396:	9a a5       	ldd	r25, Y+42	; 0x2a
    4398:	20 e0       	ldi	r18, 0x00	; 0
    439a:	30 e0       	ldi	r19, 0x00	; 0
    439c:	40 e2       	ldi	r20, 0x20	; 32
    439e:	51 e4       	ldi	r21, 0x41	; 65
    43a0:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    43a4:	dc 01       	movw	r26, r24
    43a6:	cb 01       	movw	r24, r22
    43a8:	bc 01       	movw	r22, r24
    43aa:	cd 01       	movw	r24, r26
    43ac:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43b0:	dc 01       	movw	r26, r24
    43b2:	cb 01       	movw	r24, r22
    43b4:	9a a3       	std	Y+34, r25	; 0x22
    43b6:	89 a3       	std	Y+33, r24	; 0x21
    43b8:	0f c0       	rjmp	.+30     	; 0x43d8 <main+0x7ce>
    43ba:	88 ec       	ldi	r24, 0xC8	; 200
    43bc:	90 e0       	ldi	r25, 0x00	; 0
    43be:	98 a3       	std	Y+32, r25	; 0x20
    43c0:	8f 8f       	std	Y+31, r24	; 0x1f
    43c2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    43c4:	98 a1       	ldd	r25, Y+32	; 0x20
    43c6:	01 97       	sbiw	r24, 0x01	; 1
    43c8:	f1 f7       	brne	.-4      	; 0x43c6 <main+0x7bc>
    43ca:	98 a3       	std	Y+32, r25	; 0x20
    43cc:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    43ce:	89 a1       	ldd	r24, Y+33	; 0x21
    43d0:	9a a1       	ldd	r25, Y+34	; 0x22
    43d2:	01 97       	sbiw	r24, 0x01	; 1
    43d4:	9a a3       	std	Y+34, r25	; 0x22
    43d6:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    43d8:	89 a1       	ldd	r24, Y+33	; 0x21
    43da:	9a a1       	ldd	r25, Y+34	; 0x22
    43dc:	00 97       	sbiw	r24, 0x00	; 0
    43de:	69 f7       	brne	.-38     	; 0x43ba <main+0x7b0>
    43e0:	14 c0       	rjmp	.+40     	; 0x440a <main+0x800>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    43e2:	6b a1       	ldd	r22, Y+35	; 0x23
    43e4:	7c a1       	ldd	r23, Y+36	; 0x24
    43e6:	8d a1       	ldd	r24, Y+37	; 0x25
    43e8:	9e a1       	ldd	r25, Y+38	; 0x26
    43ea:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    43ee:	dc 01       	movw	r26, r24
    43f0:	cb 01       	movw	r24, r22
    43f2:	9a a3       	std	Y+34, r25	; 0x22
    43f4:	89 a3       	std	Y+33, r24	; 0x21
    43f6:	89 a1       	ldd	r24, Y+33	; 0x21
    43f8:	9a a1       	ldd	r25, Y+34	; 0x22
    43fa:	9e 8f       	std	Y+30, r25	; 0x1e
    43fc:	8d 8f       	std	Y+29, r24	; 0x1d
    43fe:	8d 8d       	ldd	r24, Y+29	; 0x1d
    4400:	9e 8d       	ldd	r25, Y+30	; 0x1e
    4402:	01 97       	sbiw	r24, 0x01	; 1
    4404:	f1 f7       	brne	.-4      	; 0x4402 <main+0x7f8>
    4406:	9e 8f       	std	Y+30, r25	; 0x1e
    4408:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(200);
			Local_u8EEpromWRRIS_Hours = USART_u8Recieve();
    440a:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    440e:	80 93 6a 01 	sts	0x016A, r24
    4412:	80 e0       	ldi	r24, 0x00	; 0
    4414:	90 e0       	ldi	r25, 0x00	; 0
    4416:	a8 e4       	ldi	r26, 0x48	; 72
    4418:	b3 e4       	ldi	r27, 0x43	; 67
    441a:	89 8f       	std	Y+25, r24	; 0x19
    441c:	9a 8f       	std	Y+26, r25	; 0x1a
    441e:	ab 8f       	std	Y+27, r26	; 0x1b
    4420:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    4422:	69 8d       	ldd	r22, Y+25	; 0x19
    4424:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4426:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4428:	9c 8d       	ldd	r25, Y+28	; 0x1c
    442a:	20 e0       	ldi	r18, 0x00	; 0
    442c:	30 e0       	ldi	r19, 0x00	; 0
    442e:	4a ef       	ldi	r20, 0xFA	; 250
    4430:	54 e4       	ldi	r21, 0x44	; 68
    4432:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4436:	dc 01       	movw	r26, r24
    4438:	cb 01       	movw	r24, r22
    443a:	8d 8b       	std	Y+21, r24	; 0x15
    443c:	9e 8b       	std	Y+22, r25	; 0x16
    443e:	af 8b       	std	Y+23, r26	; 0x17
    4440:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    4442:	6d 89       	ldd	r22, Y+21	; 0x15
    4444:	7e 89       	ldd	r23, Y+22	; 0x16
    4446:	8f 89       	ldd	r24, Y+23	; 0x17
    4448:	98 8d       	ldd	r25, Y+24	; 0x18
    444a:	20 e0       	ldi	r18, 0x00	; 0
    444c:	30 e0       	ldi	r19, 0x00	; 0
    444e:	40 e8       	ldi	r20, 0x80	; 128
    4450:	5f e3       	ldi	r21, 0x3F	; 63
    4452:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4456:	88 23       	and	r24, r24
    4458:	2c f4       	brge	.+10     	; 0x4464 <main+0x85a>
		__ticks = 1;
    445a:	81 e0       	ldi	r24, 0x01	; 1
    445c:	90 e0       	ldi	r25, 0x00	; 0
    445e:	9c 8b       	std	Y+20, r25	; 0x14
    4460:	8b 8b       	std	Y+19, r24	; 0x13
    4462:	3f c0       	rjmp	.+126    	; 0x44e2 <main+0x8d8>
	else if (__tmp > 65535)
    4464:	6d 89       	ldd	r22, Y+21	; 0x15
    4466:	7e 89       	ldd	r23, Y+22	; 0x16
    4468:	8f 89       	ldd	r24, Y+23	; 0x17
    446a:	98 8d       	ldd	r25, Y+24	; 0x18
    446c:	20 e0       	ldi	r18, 0x00	; 0
    446e:	3f ef       	ldi	r19, 0xFF	; 255
    4470:	4f e7       	ldi	r20, 0x7F	; 127
    4472:	57 e4       	ldi	r21, 0x47	; 71
    4474:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4478:	18 16       	cp	r1, r24
    447a:	4c f5       	brge	.+82     	; 0x44ce <main+0x8c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    447c:	69 8d       	ldd	r22, Y+25	; 0x19
    447e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    4480:	8b 8d       	ldd	r24, Y+27	; 0x1b
    4482:	9c 8d       	ldd	r25, Y+28	; 0x1c
    4484:	20 e0       	ldi	r18, 0x00	; 0
    4486:	30 e0       	ldi	r19, 0x00	; 0
    4488:	40 e2       	ldi	r20, 0x20	; 32
    448a:	51 e4       	ldi	r21, 0x41	; 65
    448c:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4490:	dc 01       	movw	r26, r24
    4492:	cb 01       	movw	r24, r22
    4494:	bc 01       	movw	r22, r24
    4496:	cd 01       	movw	r24, r26
    4498:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    449c:	dc 01       	movw	r26, r24
    449e:	cb 01       	movw	r24, r22
    44a0:	9c 8b       	std	Y+20, r25	; 0x14
    44a2:	8b 8b       	std	Y+19, r24	; 0x13
    44a4:	0f c0       	rjmp	.+30     	; 0x44c4 <main+0x8ba>
    44a6:	88 ec       	ldi	r24, 0xC8	; 200
    44a8:	90 e0       	ldi	r25, 0x00	; 0
    44aa:	9a 8b       	std	Y+18, r25	; 0x12
    44ac:	89 8b       	std	Y+17, r24	; 0x11
    44ae:	89 89       	ldd	r24, Y+17	; 0x11
    44b0:	9a 89       	ldd	r25, Y+18	; 0x12
    44b2:	01 97       	sbiw	r24, 0x01	; 1
    44b4:	f1 f7       	brne	.-4      	; 0x44b2 <main+0x8a8>
    44b6:	9a 8b       	std	Y+18, r25	; 0x12
    44b8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    44ba:	8b 89       	ldd	r24, Y+19	; 0x13
    44bc:	9c 89       	ldd	r25, Y+20	; 0x14
    44be:	01 97       	sbiw	r24, 0x01	; 1
    44c0:	9c 8b       	std	Y+20, r25	; 0x14
    44c2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    44c4:	8b 89       	ldd	r24, Y+19	; 0x13
    44c6:	9c 89       	ldd	r25, Y+20	; 0x14
    44c8:	00 97       	sbiw	r24, 0x00	; 0
    44ca:	69 f7       	brne	.-38     	; 0x44a6 <main+0x89c>
    44cc:	14 c0       	rjmp	.+40     	; 0x44f6 <main+0x8ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    44ce:	6d 89       	ldd	r22, Y+21	; 0x15
    44d0:	7e 89       	ldd	r23, Y+22	; 0x16
    44d2:	8f 89       	ldd	r24, Y+23	; 0x17
    44d4:	98 8d       	ldd	r25, Y+24	; 0x18
    44d6:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    44da:	dc 01       	movw	r26, r24
    44dc:	cb 01       	movw	r24, r22
    44de:	9c 8b       	std	Y+20, r25	; 0x14
    44e0:	8b 8b       	std	Y+19, r24	; 0x13
    44e2:	8b 89       	ldd	r24, Y+19	; 0x13
    44e4:	9c 89       	ldd	r25, Y+20	; 0x14
    44e6:	98 8b       	std	Y+16, r25	; 0x10
    44e8:	8f 87       	std	Y+15, r24	; 0x0f
    44ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    44ec:	98 89       	ldd	r25, Y+16	; 0x10
    44ee:	01 97       	sbiw	r24, 0x01	; 1
    44f0:	f1 f7       	brne	.-4      	; 0x44ee <main+0x8e4>
    44f2:	98 8b       	std	Y+16, r25	; 0x10
    44f4:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(200);
			Local_u8EEpromWRRIS_Min   = USART_u8Recieve();
    44f6:	0e 94 02 0f 	call	0x1e04	; 0x1e04 <USART_u8Recieve>
    44fa:	80 93 6b 01 	sts	0x016B, r24
    44fe:	80 e0       	ldi	r24, 0x00	; 0
    4500:	90 e0       	ldi	r25, 0x00	; 0
    4502:	a0 e2       	ldi	r26, 0x20	; 32
    4504:	b1 e4       	ldi	r27, 0x41	; 65
    4506:	8b 87       	std	Y+11, r24	; 0x0b
    4508:	9c 87       	std	Y+12, r25	; 0x0c
    450a:	ad 87       	std	Y+13, r26	; 0x0d
    450c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    450e:	6b 85       	ldd	r22, Y+11	; 0x0b
    4510:	7c 85       	ldd	r23, Y+12	; 0x0c
    4512:	8d 85       	ldd	r24, Y+13	; 0x0d
    4514:	9e 85       	ldd	r25, Y+14	; 0x0e
    4516:	20 e0       	ldi	r18, 0x00	; 0
    4518:	30 e0       	ldi	r19, 0x00	; 0
    451a:	4a ef       	ldi	r20, 0xFA	; 250
    451c:	54 e4       	ldi	r21, 0x44	; 68
    451e:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    4522:	dc 01       	movw	r26, r24
    4524:	cb 01       	movw	r24, r22
    4526:	8f 83       	std	Y+7, r24	; 0x07
    4528:	98 87       	std	Y+8, r25	; 0x08
    452a:	a9 87       	std	Y+9, r26	; 0x09
    452c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    452e:	6f 81       	ldd	r22, Y+7	; 0x07
    4530:	78 85       	ldd	r23, Y+8	; 0x08
    4532:	89 85       	ldd	r24, Y+9	; 0x09
    4534:	9a 85       	ldd	r25, Y+10	; 0x0a
    4536:	20 e0       	ldi	r18, 0x00	; 0
    4538:	30 e0       	ldi	r19, 0x00	; 0
    453a:	40 e8       	ldi	r20, 0x80	; 128
    453c:	5f e3       	ldi	r21, 0x3F	; 63
    453e:	0e 94 19 0b 	call	0x1632	; 0x1632 <__ltsf2>
    4542:	88 23       	and	r24, r24
    4544:	2c f4       	brge	.+10     	; 0x4550 <main+0x946>
		__ticks = 1;
    4546:	81 e0       	ldi	r24, 0x01	; 1
    4548:	90 e0       	ldi	r25, 0x00	; 0
    454a:	9e 83       	std	Y+6, r25	; 0x06
    454c:	8d 83       	std	Y+5, r24	; 0x05
    454e:	3f c0       	rjmp	.+126    	; 0x45ce <main+0x9c4>
	else if (__tmp > 65535)
    4550:	6f 81       	ldd	r22, Y+7	; 0x07
    4552:	78 85       	ldd	r23, Y+8	; 0x08
    4554:	89 85       	ldd	r24, Y+9	; 0x09
    4556:	9a 85       	ldd	r25, Y+10	; 0x0a
    4558:	20 e0       	ldi	r18, 0x00	; 0
    455a:	3f ef       	ldi	r19, 0xFF	; 255
    455c:	4f e7       	ldi	r20, 0x7F	; 127
    455e:	57 e4       	ldi	r21, 0x47	; 71
    4560:	0e 94 b9 0a 	call	0x1572	; 0x1572 <__gtsf2>
    4564:	18 16       	cp	r1, r24
    4566:	4c f5       	brge	.+82     	; 0x45ba <main+0x9b0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    4568:	6b 85       	ldd	r22, Y+11	; 0x0b
    456a:	7c 85       	ldd	r23, Y+12	; 0x0c
    456c:	8d 85       	ldd	r24, Y+13	; 0x0d
    456e:	9e 85       	ldd	r25, Y+14	; 0x0e
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	30 e0       	ldi	r19, 0x00	; 0
    4574:	40 e2       	ldi	r20, 0x20	; 32
    4576:	51 e4       	ldi	r21, 0x41	; 65
    4578:	0e 94 13 09 	call	0x1226	; 0x1226 <__mulsf3>
    457c:	dc 01       	movw	r26, r24
    457e:	cb 01       	movw	r24, r22
    4580:	bc 01       	movw	r22, r24
    4582:	cd 01       	movw	r24, r26
    4584:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    4588:	dc 01       	movw	r26, r24
    458a:	cb 01       	movw	r24, r22
    458c:	9e 83       	std	Y+6, r25	; 0x06
    458e:	8d 83       	std	Y+5, r24	; 0x05
    4590:	0f c0       	rjmp	.+30     	; 0x45b0 <main+0x9a6>
    4592:	88 ec       	ldi	r24, 0xC8	; 200
    4594:	90 e0       	ldi	r25, 0x00	; 0
    4596:	9c 83       	std	Y+4, r25	; 0x04
    4598:	8b 83       	std	Y+3, r24	; 0x03
    459a:	8b 81       	ldd	r24, Y+3	; 0x03
    459c:	9c 81       	ldd	r25, Y+4	; 0x04
    459e:	01 97       	sbiw	r24, 0x01	; 1
    45a0:	f1 f7       	brne	.-4      	; 0x459e <main+0x994>
    45a2:	9c 83       	std	Y+4, r25	; 0x04
    45a4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    45a6:	8d 81       	ldd	r24, Y+5	; 0x05
    45a8:	9e 81       	ldd	r25, Y+6	; 0x06
    45aa:	01 97       	sbiw	r24, 0x01	; 1
    45ac:	9e 83       	std	Y+6, r25	; 0x06
    45ae:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    45b0:	8d 81       	ldd	r24, Y+5	; 0x05
    45b2:	9e 81       	ldd	r25, Y+6	; 0x06
    45b4:	00 97       	sbiw	r24, 0x00	; 0
    45b6:	69 f7       	brne	.-38     	; 0x4592 <main+0x988>
    45b8:	14 c0       	rjmp	.+40     	; 0x45e2 <main+0x9d8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    45ba:	6f 81       	ldd	r22, Y+7	; 0x07
    45bc:	78 85       	ldd	r23, Y+8	; 0x08
    45be:	89 85       	ldd	r24, Y+9	; 0x09
    45c0:	9a 85       	ldd	r25, Y+10	; 0x0a
    45c2:	0e 94 c8 00 	call	0x190	; 0x190 <__fixunssfsi>
    45c6:	dc 01       	movw	r26, r24
    45c8:	cb 01       	movw	r24, r22
    45ca:	9e 83       	std	Y+6, r25	; 0x06
    45cc:	8d 83       	std	Y+5, r24	; 0x05
    45ce:	8d 81       	ldd	r24, Y+5	; 0x05
    45d0:	9e 81       	ldd	r25, Y+6	; 0x06
    45d2:	9a 83       	std	Y+2, r25	; 0x02
    45d4:	89 83       	std	Y+1, r24	; 0x01
    45d6:	89 81       	ldd	r24, Y+1	; 0x01
    45d8:	9a 81       	ldd	r25, Y+2	; 0x02
    45da:	01 97       	sbiw	r24, 0x01	; 1
    45dc:	f1 f7       	brne	.-4      	; 0x45da <main+0x9d0>
    45de:	9a 83       	std	Y+2, r25	; 0x02
    45e0:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(10);
			// Update EEPROM
			EEPROM_voidWriteTime( Local_u8EEpromWRSET_HOURS, Local_u8EEpromWRSET_MIN, Local_u8EEpromWRRIS_Hours , Local_u8EEpromWRRIS_Min);
    45e2:	80 91 68 01 	lds	r24, 0x0168
    45e6:	90 91 69 01 	lds	r25, 0x0169
    45ea:	20 91 6a 01 	lds	r18, 0x016A
    45ee:	30 91 6b 01 	lds	r19, 0x016B
    45f2:	69 2f       	mov	r22, r25
    45f4:	42 2f       	mov	r20, r18
    45f6:	23 2f       	mov	r18, r19
    45f8:	0e 94 ef 1b 	call	0x37de	; 0x37de <EEPROM_voidWriteTime>
			EEPROM_ReadTime();  // Read New Time after updating
    45fc:	0e 94 e2 1d 	call	0x3bc4	; 0x3bc4 <EEPROM_ReadTime>

		}


		Local_u8inti=LDR_SNESOR_u8Read(ADC_6); // Reading the Temperature and convert back to analog and return the percentage of Ligh
    4600:	86 e0       	ldi	r24, 0x06	; 6
    4602:	0e 94 87 1a 	call	0x350e	; 0x350e <LDR_SNESOR_u8Read>
    4606:	fe 01       	movw	r30, r28
    4608:	ee 58       	subi	r30, 0x8E	; 142
    460a:	ff 4f       	sbci	r31, 0xFF	; 255
    460c:	80 83       	st	Z, r24
		RTC_enumReadTime(&Time); // Read the Time form RTC
    460e:	ce 01       	movw	r24, r28
    4610:	8c 58       	subi	r24, 0x8C	; 140
    4612:	9f 4f       	sbci	r25, 0xFF	; 255
    4614:	0e 94 5e 19 	call	0x32bc	; 0x32bc <RTC_enumReadTime>

		if(Time.HoursMode==Hours_24)
    4618:	fe 01       	movw	r30, r28
    461a:	ec 58       	subi	r30, 0x8C	; 140
    461c:	ff 4f       	sbci	r31, 0xFF	; 255
    461e:	84 81       	ldd	r24, Z+4	; 0x04
    4620:	88 23       	and	r24, r24
    4622:	09 f0       	breq	.+2      	; 0x4626 <main+0xa1c>
    4624:	3f c0       	rjmp	.+126    	; 0x46a4 <main+0xa9a>
		{
			/// Checking the Time is after the sunset time or before the sunrise time to keep controlling the light
			if( ((Time.Hours > Local_u8EEpromSET_HOURS) || ( Time.Hours == Local_u8EEpromSET_HOURS && Time.Minutes >= Local_u8EEpromSET_MIN )) )
    4626:	fe 01       	movw	r30, r28
    4628:	ec 58       	subi	r30, 0x8C	; 140
    462a:	ff 4f       	sbci	r31, 0xFF	; 255
    462c:	92 81       	ldd	r25, Z+2	; 0x02
    462e:	80 91 6c 01 	lds	r24, 0x016C
    4632:	89 17       	cp	r24, r25
    4634:	80 f0       	brcs	.+32     	; 0x4656 <main+0xa4c>
    4636:	fe 01       	movw	r30, r28
    4638:	ec 58       	subi	r30, 0x8C	; 140
    463a:	ff 4f       	sbci	r31, 0xFF	; 255
    463c:	92 81       	ldd	r25, Z+2	; 0x02
    463e:	80 91 6c 01 	lds	r24, 0x016C
    4642:	98 17       	cp	r25, r24
    4644:	69 f4       	brne	.+26     	; 0x4660 <main+0xa56>
    4646:	fe 01       	movw	r30, r28
    4648:	ec 58       	subi	r30, 0x8C	; 140
    464a:	ff 4f       	sbci	r31, 0xFF	; 255
    464c:	91 81       	ldd	r25, Z+1	; 0x01
    464e:	80 91 6d 01 	lds	r24, 0x016D
    4652:	98 17       	cp	r25, r24
    4654:	28 f0       	brcs	.+10     	; 0x4660 <main+0xa56>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
    4656:	fe 01       	movw	r30, r28
    4658:	ed 58       	subi	r30, 0x8D	; 141
    465a:	ff 4f       	sbci	r31, 0xFF	; 255
    465c:	10 82       	st	Z, r1
    465e:	22 c0       	rjmp	.+68     	; 0x46a4 <main+0xa9a>
			}
			else if ( (Time.Hours < Local_u8EEpromRIS_Hours) || ((Time.Hours == Local_u8EEpromRIS_Hours) && (Time.Minutes <= Local_u8EEpromRIS_Min) ))
    4660:	fe 01       	movw	r30, r28
    4662:	ec 58       	subi	r30, 0x8C	; 140
    4664:	ff 4f       	sbci	r31, 0xFF	; 255
    4666:	92 81       	ldd	r25, Z+2	; 0x02
    4668:	80 91 6e 01 	lds	r24, 0x016E
    466c:	98 17       	cp	r25, r24
    466e:	80 f0       	brcs	.+32     	; 0x4690 <main+0xa86>
    4670:	fe 01       	movw	r30, r28
    4672:	ec 58       	subi	r30, 0x8C	; 140
    4674:	ff 4f       	sbci	r31, 0xFF	; 255
    4676:	92 81       	ldd	r25, Z+2	; 0x02
    4678:	80 91 6e 01 	lds	r24, 0x016E
    467c:	98 17       	cp	r25, r24
    467e:	69 f4       	brne	.+26     	; 0x469a <main+0xa90>
    4680:	fe 01       	movw	r30, r28
    4682:	ec 58       	subi	r30, 0x8C	; 140
    4684:	ff 4f       	sbci	r31, 0xFF	; 255
    4686:	91 81       	ldd	r25, Z+1	; 0x01
    4688:	80 91 6f 01 	lds	r24, 0x016F
    468c:	89 17       	cp	r24, r25
    468e:	28 f0       	brcs	.+10     	; 0x469a <main+0xa90>
			{
				local_u8SunSetFlag = SUNSET; // Raise flag that it's sunset
    4690:	fe 01       	movw	r30, r28
    4692:	ed 58       	subi	r30, 0x8D	; 141
    4694:	ff 4f       	sbci	r31, 0xFF	; 255
    4696:	10 82       	st	Z, r1
    4698:	05 c0       	rjmp	.+10     	; 0x46a4 <main+0xa9a>
			}
			else
			{
				local_u8SunSetFlag = SUNRISE;
    469a:	fe 01       	movw	r30, r28
    469c:	ed 58       	subi	r30, 0x8D	; 141
    469e:	ff 4f       	sbci	r31, 0xFF	; 255
    46a0:	81 e0       	ldi	r24, 0x01	; 1
    46a2:	80 83       	st	Z, r24
			}
		}

		if(local_u8SunSetFlag == SUNSET) // if the Sunset time flag is raised
    46a4:	fe 01       	movw	r30, r28
    46a6:	ed 58       	subi	r30, 0x8D	; 141
    46a8:	ff 4f       	sbci	r31, 0xFF	; 255
    46aa:	80 81       	ld	r24, Z
    46ac:	88 23       	and	r24, r24
    46ae:	09 f0       	breq	.+2      	; 0x46b2 <main+0xaa8>
    46b0:	59 c0       	rjmp	.+178    	; 0x4764 <main+0xb5a>
		{
			/// according to the light intensity we control the LED array intensity
			if(Local_u8inti>90)
    46b2:	fe 01       	movw	r30, r28
    46b4:	ee 58       	subi	r30, 0x8E	; 142
    46b6:	ff 4f       	sbci	r31, 0xFF	; 255
    46b8:	80 81       	ld	r24, Z
    46ba:	8b 35       	cpi	r24, 0x5B	; 91
    46bc:	40 f0       	brcs	.+16     	; 0x46ce <main+0xac4>
			{
				T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
    46be:	60 e0       	ldi	r22, 0x00	; 0
    46c0:	70 e0       	ldi	r23, 0x00	; 0
    46c2:	80 e0       	ldi	r24, 0x00	; 0
    46c4:	90 e0       	ldi	r25, 0x00	; 0
    46c6:	41 e0       	ldi	r20, 0x01	; 1
    46c8:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    46cc:	a9 cb       	rjmp	.-2222   	; 0x3e20 <main+0x216>
			}
			else if(Local_u8inti<90 && Local_u8inti>70)
    46ce:	fe 01       	movw	r30, r28
    46d0:	ee 58       	subi	r30, 0x8E	; 142
    46d2:	ff 4f       	sbci	r31, 0xFF	; 255
    46d4:	80 81       	ld	r24, Z
    46d6:	8a 35       	cpi	r24, 0x5A	; 90
    46d8:	70 f4       	brcc	.+28     	; 0x46f6 <main+0xaec>
    46da:	fe 01       	movw	r30, r28
    46dc:	ee 58       	subi	r30, 0x8E	; 142
    46de:	ff 4f       	sbci	r31, 0xFF	; 255
    46e0:	80 81       	ld	r24, Z
    46e2:	87 34       	cpi	r24, 0x47	; 71
    46e4:	40 f0       	brcs	.+16     	; 0x46f6 <main+0xaec>
			{
				T0_PhaseCorrectPwm(30,INVERTED);  /// LED is on by 30% of its full intensity
    46e6:	60 e0       	ldi	r22, 0x00	; 0
    46e8:	70 e0       	ldi	r23, 0x00	; 0
    46ea:	80 ef       	ldi	r24, 0xF0	; 240
    46ec:	91 e4       	ldi	r25, 0x41	; 65
    46ee:	41 e0       	ldi	r20, 0x01	; 1
    46f0:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    46f4:	95 cb       	rjmp	.-2262   	; 0x3e20 <main+0x216>
			}
			else if(Local_u8inti>50 && Local_u8inti<70)
    46f6:	fe 01       	movw	r30, r28
    46f8:	ee 58       	subi	r30, 0x8E	; 142
    46fa:	ff 4f       	sbci	r31, 0xFF	; 255
    46fc:	80 81       	ld	r24, Z
    46fe:	83 33       	cpi	r24, 0x33	; 51
    4700:	70 f0       	brcs	.+28     	; 0x471e <main+0xb14>
    4702:	fe 01       	movw	r30, r28
    4704:	ee 58       	subi	r30, 0x8E	; 142
    4706:	ff 4f       	sbci	r31, 0xFF	; 255
    4708:	80 81       	ld	r24, Z
    470a:	86 34       	cpi	r24, 0x46	; 70
    470c:	40 f4       	brcc	.+16     	; 0x471e <main+0xb14>
			{
				T0_PhaseCorrectPwm(50,INVERTED);	/// LED is on by 50% of its full intensity
    470e:	60 e0       	ldi	r22, 0x00	; 0
    4710:	70 e0       	ldi	r23, 0x00	; 0
    4712:	88 e4       	ldi	r24, 0x48	; 72
    4714:	92 e4       	ldi	r25, 0x42	; 66
    4716:	41 e0       	ldi	r20, 0x01	; 1
    4718:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    471c:	81 cb       	rjmp	.-2302   	; 0x3e20 <main+0x216>
			}
			else if(Local_u8inti<50 && Local_u8inti>30)
    471e:	fe 01       	movw	r30, r28
    4720:	ee 58       	subi	r30, 0x8E	; 142
    4722:	ff 4f       	sbci	r31, 0xFF	; 255
    4724:	80 81       	ld	r24, Z
    4726:	82 33       	cpi	r24, 0x32	; 50
    4728:	70 f4       	brcc	.+28     	; 0x4746 <main+0xb3c>
    472a:	fe 01       	movw	r30, r28
    472c:	ee 58       	subi	r30, 0x8E	; 142
    472e:	ff 4f       	sbci	r31, 0xFF	; 255
    4730:	80 81       	ld	r24, Z
    4732:	8f 31       	cpi	r24, 0x1F	; 31
    4734:	40 f0       	brcs	.+16     	; 0x4746 <main+0xb3c>
			{
				T0_PhaseCorrectPwm(70,INVERTED); /// LED is on by 70% of its full intensity
    4736:	60 e0       	ldi	r22, 0x00	; 0
    4738:	70 e0       	ldi	r23, 0x00	; 0
    473a:	8c e8       	ldi	r24, 0x8C	; 140
    473c:	92 e4       	ldi	r25, 0x42	; 66
    473e:	41 e0       	ldi	r20, 0x01	; 1
    4740:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    4744:	6d cb       	rjmp	.-2342   	; 0x3e20 <main+0x216>
			}
			else if(Local_u8inti<30 )
    4746:	fe 01       	movw	r30, r28
    4748:	ee 58       	subi	r30, 0x8E	; 142
    474a:	ff 4f       	sbci	r31, 0xFF	; 255
    474c:	80 81       	ld	r24, Z
    474e:	8e 31       	cpi	r24, 0x1E	; 30
    4750:	08 f0       	brcs	.+2      	; 0x4754 <main+0xb4a>
    4752:	66 cb       	rjmp	.-2356   	; 0x3e20 <main+0x216>
			{
				T0_PhaseCorrectPwm(100,INVERTED); /// LED is on by 100% of its full intensity
    4754:	60 e0       	ldi	r22, 0x00	; 0
    4756:	70 e0       	ldi	r23, 0x00	; 0
    4758:	88 ec       	ldi	r24, 0xC8	; 200
    475a:	92 e4       	ldi	r25, 0x42	; 66
    475c:	41 e0       	ldi	r20, 0x01	; 1
    475e:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    4762:	5e cb       	rjmp	.-2372   	; 0x3e20 <main+0x216>
			}
		}
		else
		{
			T0_PhaseCorrectPwm(0,INVERTED); /// LED is Off
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	70 e0       	ldi	r23, 0x00	; 0
    4768:	80 e0       	ldi	r24, 0x00	; 0
    476a:	90 e0       	ldi	r25, 0x00	; 0
    476c:	41 e0       	ldi	r20, 0x01	; 1
    476e:	0e 94 4e 10 	call	0x209c	; 0x209c <T0_PhaseCorrectPwm>
    4772:	56 cb       	rjmp	.-2388   	; 0x3e20 <main+0x216>

00004774 <__udivmodqi4>:
    4774:	99 1b       	sub	r25, r25
    4776:	79 e0       	ldi	r23, 0x09	; 9
    4778:	04 c0       	rjmp	.+8      	; 0x4782 <__udivmodqi4_ep>

0000477a <__udivmodqi4_loop>:
    477a:	99 1f       	adc	r25, r25
    477c:	96 17       	cp	r25, r22
    477e:	08 f0       	brcs	.+2      	; 0x4782 <__udivmodqi4_ep>
    4780:	96 1b       	sub	r25, r22

00004782 <__udivmodqi4_ep>:
    4782:	88 1f       	adc	r24, r24
    4784:	7a 95       	dec	r23
    4786:	c9 f7       	brne	.-14     	; 0x477a <__udivmodqi4_loop>
    4788:	80 95       	com	r24
    478a:	08 95       	ret

0000478c <__mulsi3>:
    478c:	62 9f       	mul	r22, r18
    478e:	d0 01       	movw	r26, r0
    4790:	73 9f       	mul	r23, r19
    4792:	f0 01       	movw	r30, r0
    4794:	82 9f       	mul	r24, r18
    4796:	e0 0d       	add	r30, r0
    4798:	f1 1d       	adc	r31, r1
    479a:	64 9f       	mul	r22, r20
    479c:	e0 0d       	add	r30, r0
    479e:	f1 1d       	adc	r31, r1
    47a0:	92 9f       	mul	r25, r18
    47a2:	f0 0d       	add	r31, r0
    47a4:	83 9f       	mul	r24, r19
    47a6:	f0 0d       	add	r31, r0
    47a8:	74 9f       	mul	r23, r20
    47aa:	f0 0d       	add	r31, r0
    47ac:	65 9f       	mul	r22, r21
    47ae:	f0 0d       	add	r31, r0
    47b0:	99 27       	eor	r25, r25
    47b2:	72 9f       	mul	r23, r18
    47b4:	b0 0d       	add	r27, r0
    47b6:	e1 1d       	adc	r30, r1
    47b8:	f9 1f       	adc	r31, r25
    47ba:	63 9f       	mul	r22, r19
    47bc:	b0 0d       	add	r27, r0
    47be:	e1 1d       	adc	r30, r1
    47c0:	f9 1f       	adc	r31, r25
    47c2:	bd 01       	movw	r22, r26
    47c4:	cf 01       	movw	r24, r30
    47c6:	11 24       	eor	r1, r1
    47c8:	08 95       	ret

000047ca <__udivmodsi4>:
    47ca:	a1 e2       	ldi	r26, 0x21	; 33
    47cc:	1a 2e       	mov	r1, r26
    47ce:	aa 1b       	sub	r26, r26
    47d0:	bb 1b       	sub	r27, r27
    47d2:	fd 01       	movw	r30, r26
    47d4:	0d c0       	rjmp	.+26     	; 0x47f0 <__udivmodsi4_ep>

000047d6 <__udivmodsi4_loop>:
    47d6:	aa 1f       	adc	r26, r26
    47d8:	bb 1f       	adc	r27, r27
    47da:	ee 1f       	adc	r30, r30
    47dc:	ff 1f       	adc	r31, r31
    47de:	a2 17       	cp	r26, r18
    47e0:	b3 07       	cpc	r27, r19
    47e2:	e4 07       	cpc	r30, r20
    47e4:	f5 07       	cpc	r31, r21
    47e6:	20 f0       	brcs	.+8      	; 0x47f0 <__udivmodsi4_ep>
    47e8:	a2 1b       	sub	r26, r18
    47ea:	b3 0b       	sbc	r27, r19
    47ec:	e4 0b       	sbc	r30, r20
    47ee:	f5 0b       	sbc	r31, r21

000047f0 <__udivmodsi4_ep>:
    47f0:	66 1f       	adc	r22, r22
    47f2:	77 1f       	adc	r23, r23
    47f4:	88 1f       	adc	r24, r24
    47f6:	99 1f       	adc	r25, r25
    47f8:	1a 94       	dec	r1
    47fa:	69 f7       	brne	.-38     	; 0x47d6 <__udivmodsi4_loop>
    47fc:	60 95       	com	r22
    47fe:	70 95       	com	r23
    4800:	80 95       	com	r24
    4802:	90 95       	com	r25
    4804:	9b 01       	movw	r18, r22
    4806:	ac 01       	movw	r20, r24
    4808:	bd 01       	movw	r22, r26
    480a:	cf 01       	movw	r24, r30
    480c:	08 95       	ret

0000480e <__prologue_saves__>:
    480e:	2f 92       	push	r2
    4810:	3f 92       	push	r3
    4812:	4f 92       	push	r4
    4814:	5f 92       	push	r5
    4816:	6f 92       	push	r6
    4818:	7f 92       	push	r7
    481a:	8f 92       	push	r8
    481c:	9f 92       	push	r9
    481e:	af 92       	push	r10
    4820:	bf 92       	push	r11
    4822:	cf 92       	push	r12
    4824:	df 92       	push	r13
    4826:	ef 92       	push	r14
    4828:	ff 92       	push	r15
    482a:	0f 93       	push	r16
    482c:	1f 93       	push	r17
    482e:	cf 93       	push	r28
    4830:	df 93       	push	r29
    4832:	cd b7       	in	r28, 0x3d	; 61
    4834:	de b7       	in	r29, 0x3e	; 62
    4836:	ca 1b       	sub	r28, r26
    4838:	db 0b       	sbc	r29, r27
    483a:	0f b6       	in	r0, 0x3f	; 63
    483c:	f8 94       	cli
    483e:	de bf       	out	0x3e, r29	; 62
    4840:	0f be       	out	0x3f, r0	; 63
    4842:	cd bf       	out	0x3d, r28	; 61
    4844:	09 94       	ijmp

00004846 <__epilogue_restores__>:
    4846:	2a 88       	ldd	r2, Y+18	; 0x12
    4848:	39 88       	ldd	r3, Y+17	; 0x11
    484a:	48 88       	ldd	r4, Y+16	; 0x10
    484c:	5f 84       	ldd	r5, Y+15	; 0x0f
    484e:	6e 84       	ldd	r6, Y+14	; 0x0e
    4850:	7d 84       	ldd	r7, Y+13	; 0x0d
    4852:	8c 84       	ldd	r8, Y+12	; 0x0c
    4854:	9b 84       	ldd	r9, Y+11	; 0x0b
    4856:	aa 84       	ldd	r10, Y+10	; 0x0a
    4858:	b9 84       	ldd	r11, Y+9	; 0x09
    485a:	c8 84       	ldd	r12, Y+8	; 0x08
    485c:	df 80       	ldd	r13, Y+7	; 0x07
    485e:	ee 80       	ldd	r14, Y+6	; 0x06
    4860:	fd 80       	ldd	r15, Y+5	; 0x05
    4862:	0c 81       	ldd	r16, Y+4	; 0x04
    4864:	1b 81       	ldd	r17, Y+3	; 0x03
    4866:	aa 81       	ldd	r26, Y+2	; 0x02
    4868:	b9 81       	ldd	r27, Y+1	; 0x01
    486a:	ce 0f       	add	r28, r30
    486c:	d1 1d       	adc	r29, r1
    486e:	0f b6       	in	r0, 0x3f	; 63
    4870:	f8 94       	cli
    4872:	de bf       	out	0x3e, r29	; 62
    4874:	0f be       	out	0x3f, r0	; 63
    4876:	cd bf       	out	0x3d, r28	; 61
    4878:	ed 01       	movw	r28, r26
    487a:	08 95       	ret

0000487c <_exit>:
    487c:	f8 94       	cli

0000487e <__stop_program>:
    487e:	ff cf       	rjmp	.-2      	; 0x487e <__stop_program>
